import { resolve } from "@gatsbyjs/reach-router/lib/utils"; // Specific import to treeshake Node.js stuff

import { applyTrailingSlashOption } from "gatsby-page-utils/apply-trailing-slash-option";
import { parsePath } from "./parse-path";
import { isLocalLink } from "./is-local-link";
import { withPrefix } from ".";

const isAbsolutePath = path => path === null || path === void 0 ? void 0 : path.startsWith(`/`);

const getGlobalTrailingSlash = () => typeof __TRAILING_SLASH__ !== `undefined` ? __TRAILING_SLASH__ : undefined;

function absolutify(path, current) {
  // If it's already absolute, return as-is
  if (isAbsolutePath(path)) {
    return path;
  }

  const option = getGlobalTrailingSlash();
  const absolutePath = resolve(path, current);

  if (option === `always` || option === `never`) {
    return applyTrailingSlashOption(absolutePath, option);
  }

  return absolutePath;
}

export const rewriteLinkPath = (path, relativeTo) => {
  if (typeof path === `number`) {
    return path;
  }

  if (!isLocalLink(path)) {
    return path;
  }

  const {
    pathname,
    search,
    hash
  } = parsePath(path);
  const option = getGlobalTrailingSlash();
  let adjustedPath = path;

  if (option === `always` || option === `never`) {
    const output = applyTrailingSlashOption(pathname, option);
    adjustedPath = `${output}${search}${hash}`;
  }

  return isAbsolutePath(adjustedPath) ? withPrefix(adjustedPath) : absolutify(adjustedPath, relativeTo);
};