{"version":3,"file":"index.browser-4760edcd.js","sources":["../src/image-utils.ts","../src/components/hooks.ts","../src/components/layout-wrapper.tsx","../src/components/picture.tsx","../src/components/placeholder.tsx","../src/components/main-image.tsx","../src/components/gatsby-image.server.tsx","../src/components/gatsby-image.browser.tsx","../src/components/static-image.server.tsx","../src/components/static-image.tsx"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        document.addEventListener(`load`, function onLoadListener() {\n          document.removeEventListener(`load`, onLoadListener)\n\n          onStartLoad?.({\n            wasCached: true,\n          })\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n"],"names":["message","console","warn","a","b","images","map","image","src","width","join","filename","lastIndexOf","dot","slice","ext","length","args","layout","height","sourceMetadata","breakpoints","aspectRatio","formats","format","toLowerCase","camelCase","Math","round","setDefaultDimensions","generateImageSource","fit","options","_generateImageSource","pluginName","reporter","backgroundColor","placeholderURL","formatFromFilename","size","has","delete","add","imgDimensions","DEFAULT_BREAKPOINTS","Object","entries","filter","_","erroneousUserDimensions","dim","outputPixelDensities","DEFAULT_PIXEL_DENSITIES","dedupeAndSortDensities","getDimensionsAndAspectRatio","calculated","fixedDimension","sizes","densities","density","presentationWidth","originalWidth","presentationHeight","unscaledWidth","calculateImageSizes","sources","getSizes","imageSizes","forEach","imageSrc","Boolean","find","img","unscaled","result","fallback","srcSet","getSrcSet","push","type","imageProps","placeholder","values","Array","from","sort","sortNumeric","min","includes","dimensions","Number","MAX_SAFE_INTEGER","widthOption","heightOption","imageAspectRatio","max","prototype","GATSBY___IMAGE","node","_node$images","_node$images$fallback","isGatsbyImageData","gatsbyImageData","isGatsbyImageDataParent","gatsbyImage","isGatsbyImageParent","childImageSharp","_node$childImageSharp","getImage","_getImage","_getImage$images","_getImage$images$fall","_getImage2","_getImage2$images","_getImage2$images$fal","baseUrl","urlBuilder","sourceWidth","sourceHeight","props","_breakpoints","EVERY_BREAKPOINT","isLoading","isLoaded","loading","style","gatsbyImageIsInstalled","left","position","top","transform","transition","willChange","shouldLoad","opacity","objectFit","objectPosition","wrapperStyle","bottom","right","defaultImage","artDirected","media","process","env","NODE_ENV","output","source","paddingTop","maxWidth","display","React","alt","role","children","Fragment","Sizer","decoding","undefined","Image","key","fallbackImage","propTypes","PropTypes","string","isRequired","bool","Picture","displayName","exact","arrayOf","oneOfType","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","object","altValidator","as","className","class","preactClass","onStartLoad","onLoad","onError","overflow","verticalAlign","getWrapperProps","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","getSizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","document","addEventListener","removeEventListener","onLoadListener","imageCache","cacheKey","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","memo","GatsbyImageHydrator","GatsbyImage","number","checkDimensionProps","validLayouts","__imageData","imageData","__error","_getStaticImage","GatsbyImageBrowser","StaticImage"],"mappings":"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"}