{"version":3,"file":"develop.js","names":["requireUncached","file","require","cache","resolve","e","doesConfigChangeRequireRestart","lastConfig","newConfig","replacer","_","v","RegExp","toString","oldConfigString","JSON","stringify","siteMetadata","newConfigString","getDebugPort","port","getDebugInfo","program","Object","prototype","hasOwnProperty","call","inspect","break","inspectBrk","ControllableScript","constructor","script","debugInfo","start","args","tmpFileName","tmp","tmpNameSync","tmpdir","path","join","process","cwd","fs","outputFileSync","isRunning","push","execa","node","env","GATSBY_NODE_GLOBALS","global","__GATSBY","stdio","stop","signal","code","Error","kill","send","type","action","payload","err","Promise","on","removeAllListeners","undefined","onMessage","callback","onExit","msg","isRestarting","REGEX_IP","module","exports","buildId","uuid","v4","root","directory","parseInt","developProcessPath","slash","telemetryServerPath","detectPortInUseAndPrompt","message","exit","proxyPort","rootFile","statusServerPort","developPort","telemetryServerPort","all","getRandomPort","INTERNAL_STATUS_PORT","https","reporter","panic","sslHost","host","test","ssl","getSslCert","name","caFile","certFile","keyFile","proxy","startDevelopProxy","targetPort","developProcess","telemetryServerProcess","unlocks","isCI","statusUnlock","createServiceLock","developUnlock","telemetryUnlock","updateInternalSiteMetadata","sitePackageJson","sitePath","pid","lastRun","Date","now","data","getService","console","error","concat","statusServer","createServer","http","listen","io","SocketIO","cors","origin","cookie","handleChildProcessIPC","emit","serveSite","socket","respond","serveRestartingScreen","telemetryFlush","files","GATSBY_CONFIG_REGEX","watcher","chokidar","watch","filePath","basename","match","warn","dirtyFile","shutdownServices","_code","services","close","server","forEach","unlock","catch","then"],"sources":["../../src/commands/develop.ts"],"sourcesContent":["// NOTE(@mxstbr): Do not use the reporter in this file, as that has side-effects on import which break structured logging\nimport path from \"path\"\nimport http from \"http\"\nimport https from \"https\"\nimport tmp from \"tmp\"\nimport { ChildProcess } from \"child_process\"\nimport execa from \"execa\"\nimport chokidar from \"chokidar\"\nimport getRandomPort from \"detect-port\"\nimport { detectPortInUseAndPrompt } from \"../utils/detect-port-in-use-and-prompt\"\nimport { Server as SocketIO } from \"socket.io\"\nimport fs from \"fs-extra\"\nimport onExit from \"signal-exit\"\nimport {\n  isCI,\n  slash,\n  createServiceLock,\n  getService,\n  updateInternalSiteMetadata,\n  UnlockFn,\n  uuid,\n} from \"gatsby-core-utils\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { getSslCert } from \"../utils/get-ssl-cert\"\nimport { IProxyControls, startDevelopProxy } from \"../utils/develop-proxy\"\nimport { IProgram, IDebugInfo } from \"./types\"\nimport { flush as telemetryFlush } from \"gatsby-telemetry\"\n\n// Adapted from https://stackoverflow.com/a/16060619\nconst requireUncached = (file: string): any => {\n  try {\n    delete require.cache[require.resolve(file)]\n  } catch (e) {\n    return null\n  }\n\n  try {\n    return require(file)\n  } catch (e) {\n    return null\n  }\n}\n\n// Heuristics for gatsby-config.js, as not all changes to it require a full restart to take effect\nconst doesConfigChangeRequireRestart = (\n  lastConfig: Record<string, any>,\n  newConfig: Record<string, any>\n): boolean => {\n  // Ignore changes to siteMetadata\n  const replacer = (_, v): string | void => {\n    if (typeof v === `function` || v instanceof RegExp) {\n      return v.toString()\n    } else {\n      return v\n    }\n  }\n\n  const oldConfigString = JSON.stringify(\n    { ...lastConfig, siteMetadata: null },\n    replacer\n  )\n  const newConfigString = JSON.stringify(\n    { ...newConfig, siteMetadata: null },\n    replacer\n  )\n\n  if (oldConfigString === newConfigString) return false\n\n  return true\n}\n\n// Return a user-supplied port otherwise the default Node.js debugging port\nconst getDebugPort = (port?: number): number => port ?? 9229\n\nexport const getDebugInfo = (program: IProgram): IDebugInfo | null => {\n  if (Object.prototype.hasOwnProperty.call(program, `inspect`)) {\n    return {\n      port: getDebugPort(program.inspect),\n      break: false,\n    }\n  } else if (Object.prototype.hasOwnProperty.call(program, `inspectBrk`)) {\n    return {\n      port: getDebugPort(program.inspectBrk),\n      break: true,\n    }\n  } else {\n    return null\n  }\n}\n\nclass ControllableScript {\n  private process?: ChildProcess\n  private script\n  private debugInfo: IDebugInfo | null\n  public isRunning\n  constructor(script, debugInfo: IDebugInfo | null) {\n    this.script = script\n    this.debugInfo = debugInfo\n  }\n  start(): void {\n    const args: Array<string> = []\n    const tmpFileName = tmp.tmpNameSync({\n      tmpdir: path.join(process.cwd(), `.cache`),\n    })\n    fs.outputFileSync(tmpFileName, this.script)\n    this.isRunning = true\n    // Passing --inspect isn't necessary for the child process to launch a port but it allows some editors to automatically attach\n    if (this.debugInfo) {\n      if (this.debugInfo.break) {\n        args.push(`--inspect-brk=${this.debugInfo.port}`)\n      } else {\n        args.push(`--inspect=${this.debugInfo.port}`)\n      }\n    }\n\n    this.process = execa.node(tmpFileName, args, {\n      env: {\n        ...process.env,\n        GATSBY_NODE_GLOBALS: JSON.stringify(global.__GATSBY ?? {}),\n      },\n      stdio: [`inherit`, `inherit`, `inherit`, `ipc`],\n    })\n  }\n  async stop(\n    signal: NodeJS.Signals | null = null,\n    code?: number\n  ): Promise<void> {\n    if (!this.process) {\n      throw new Error(`Trying to stop the process before starting it`)\n    }\n\n    this.isRunning = false\n    try {\n      if (signal) {\n        this.process.kill(signal)\n      } else {\n        this.process.send(\n          {\n            type: `COMMAND`,\n            action: {\n              type: `EXIT`,\n              payload: code,\n            },\n          },\n          () => {\n            // The try/catch won't suffice for this process.send\n            // So use the callback to manually catch the Error, otherwise it'll be thrown\n            // Ref: https://nodejs.org/api/child_process.html#child_process_subprocess_send_message_sendhandle_options_callback\n          }\n        )\n      }\n    } catch (err) {\n      // Ignore error if process has crashed or already quit.\n      // Ref: https://github.com/gatsbyjs/gatsby/issues/28011#issuecomment-877302917\n    }\n\n    return new Promise(resolve => {\n      if (!this.process) {\n        throw new Error(`Trying to stop the process before starting it`)\n      }\n\n      this.process.on(`exit`, () => {\n        if (this.process) {\n          this.process.removeAllListeners()\n        }\n        this.process = undefined\n        resolve()\n      })\n    })\n  }\n  onMessage(callback: (msg: any) => void): void {\n    if (!this.process) {\n      throw new Error(`Trying to attach message handler before process started`)\n    }\n    this.process.on(`message`, callback)\n  }\n  onExit(\n    callback: (code: number | null, signal: NodeJS.Signals | null) => void\n  ): void {\n    if (!this.process) {\n      throw new Error(`Trying to attach exit handler before process started`)\n    }\n    this.process.on(`exit`, callback)\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  send(msg: any): void {\n    if (!this.process) {\n      throw new Error(`Trying to send a message before process started`)\n    }\n\n    this.process.send(msg)\n  }\n}\n\nlet isRestarting\n\n// checks if a string is a valid ip\nconst REGEX_IP =\n  /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$/\n\nmodule.exports = async (program: IProgram): Promise<void> => {\n  global.__GATSBY = {\n    buildId: uuid.v4(),\n    root: program.directory,\n  }\n\n  // In some cases, port can actually be a string. But our codebase is expecting it to be a number.\n  // So we want to early just force it to a number to ensure we always act on a correct type.\n  program.port = parseInt(program.port + ``, 10)\n  const developProcessPath = slash(require.resolve(`./develop-process`))\n  const telemetryServerPath = slash(\n    require.resolve(`../utils/telemetry-server`)\n  )\n\n  try {\n    program.port = await detectPortInUseAndPrompt(program.port)\n  } catch (e) {\n    if (e.message === `USER_REJECTED`) {\n      process.exit(0)\n    }\n\n    throw e\n  }\n\n  // Run the actual develop server on a random port, and the proxy on the program port\n  // which users will access\n  const proxyPort = program.port\n  const debugInfo = getDebugInfo(program)\n\n  const rootFile = (file: string): string => path.join(program.directory, file)\n\n  // Require gatsby-config.js before accessing process.env, to enable the user to change\n  // environment variables from the config file.\n  let lastConfig = requireUncached(rootFile(`gatsby-config`))\n\n  // INTERNAL_STATUS_PORT allows for setting the websocket port used for monitoring\n  // when the browser should prompt the user to restart the develop process.\n  // This port is randomized by default and in most cases should never be required to configure.\n  // It is exposed for environments where port access needs to be explicit, such as with Docker.\n  // As the port is meant for internal usage only, any attempt to interface with features\n  // it exposes via third-party software is not supported.\n  const [statusServerPort, developPort, telemetryServerPort] =\n    await Promise.all([\n      getRandomPort(process.env.INTERNAL_STATUS_PORT),\n      getRandomPort(),\n      getRandomPort(),\n    ])\n\n  // In order to enable custom ssl, --cert-file --key-file and -https flags must all be\n  // used together\n  if ((program[`cert-file`] || program[`key-file`]) && !program.https) {\n    reporter.panic(\n      `for custom ssl --https, --cert-file, and --key-file must be used together`\n    )\n  }\n\n  // Check if https is enabled, then create or get SSL cert.\n  // Certs are named 'devcert' and issued to the host.\n  // NOTE(@mxstbr): We mutate program.ssl _after_ passing it\n  // to the develop process controllable script above because\n  // that would mean we double SSL browser => proxy => server\n  if (program.https) {\n    const sslHost =\n      program.host === `0.0.0.0` || program.host === `::`\n        ? `localhost`\n        : program.host\n\n    if (REGEX_IP.test(sslHost)) {\n      reporter.panic(\n        `You're trying to generate a ssl certificate for an IP (${sslHost}). Please use a hostname instead.`\n      )\n    }\n\n    const ssl = await getSslCert({\n      name: sslHost,\n      caFile: program[`ca-file`],\n      certFile: program[`cert-file`],\n      keyFile: program[`key-file`],\n      directory: program.directory,\n    })\n\n    if (ssl) {\n      program.ssl = ssl\n    }\n  }\n\n  // NOTE(@mxstbr): We need to start the develop proxy before the develop process to ensure\n  // codesandbox detects the right port to expose by default\n  const proxy = startDevelopProxy({\n    proxyPort: proxyPort,\n    targetPort: developPort,\n    program,\n  })\n\n  const developProcess = new ControllableScript(\n    `\n    const cmd = require(${JSON.stringify(developProcessPath)});\n    const args = ${JSON.stringify({\n      ...program,\n      port: developPort,\n      proxyPort,\n      // Don't pass SSL options down to the develop process, it should always use HTTP\n      ssl: null,\n      debugInfo,\n    })};\n    cmd(args);\n  `,\n    debugInfo\n  )\n\n  const telemetryServerProcess = new ControllableScript(\n    `require(${JSON.stringify(telemetryServerPath)}).default(${JSON.stringify(\n      telemetryServerPort\n    )})`,\n    null\n  )\n\n  let unlocks: Array<UnlockFn | null> = []\n  if (!isCI()) {\n    const statusUnlock = await createServiceLock(\n      program.directory,\n      `developstatusserver`,\n      {\n        port: statusServerPort,\n      }\n    )\n    const developUnlock = await createServiceLock(\n      program.directory,\n      `developproxy`,\n      {\n        port: proxyPort,\n      }\n    )\n    const telemetryUnlock = await createServiceLock(\n      program.directory,\n      `telemetryserver`,\n      {\n        port: telemetryServerPort,\n      }\n    )\n    await updateInternalSiteMetadata({\n      name: program.sitePackageJson.name,\n      sitePath: program.directory,\n      pid: process.pid,\n      lastRun: Date.now(),\n    })\n\n    if (!statusUnlock || !developUnlock) {\n      const data = await getService(program.directory, `developproxy`)\n      const port = data?.port || 8000\n      console.error(\n        `Looks like develop for this site is already running, can you visit ${\n          program.ssl ? `https:` : `http:`\n        }//localhost:${port} ? If it is not, try again in five seconds!`\n      )\n      process.exit(1)\n    }\n\n    unlocks = unlocks.concat([statusUnlock, developUnlock, telemetryUnlock])\n  }\n\n  const statusServer = program.ssl\n    ? https.createServer(program.ssl)\n    : http.createServer()\n  statusServer.listen(statusServerPort)\n\n  const io = new SocketIO(statusServer, {\n    // whitelist all (https://github.com/expressjs/cors#configuration-options)\n    cors: {\n      origin: true,\n    },\n    cookie: true,\n  })\n\n  const handleChildProcessIPC = (msg): void => {\n    if (msg.type === `HEARTBEAT`) return\n    if (process.send) {\n      // Forward IPC\n      process.send(msg)\n    }\n\n    io.emit(`structured-log`, msg)\n\n    if (\n      msg.type === `LOG_ACTION` &&\n      msg.action.type === `SET_STATUS` &&\n      msg.action.payload === `SUCCESS`\n    ) {\n      proxy.serveSite()\n    }\n  }\n\n  io.on(`connection`, socket => {\n    socket.on(`develop:restart`, async respond => {\n      isRestarting = true\n      proxy.serveRestartingScreen()\n      // respond() responds to the client, which in our case prompts it to reload the page to show the restarting screen\n      if (respond) respond(`develop:is-starting`)\n      await developProcess.stop()\n      developProcess.start()\n      developProcess.onMessage(handleChildProcessIPC)\n      isRestarting = false\n    })\n  })\n\n  developProcess.start()\n  developProcess.onMessage(handleChildProcessIPC)\n\n  telemetryServerProcess.start()\n\n  // Plugins can call `process.exit` which would be sent to `develop-process` (child process)\n  // This needs to be propagated back to the parent process\n  developProcess.onExit(\n    (code: number | null, signal: NodeJS.Signals | null) => {\n      try {\n        telemetryFlush()\n      } catch (e) {\n        // nop\n      }\n      if (isRestarting) return\n      if (signal !== null) {\n        process.kill(process.pid, signal)\n        return\n      }\n      if (code !== null) {\n        process.exit(code)\n      }\n\n      // This should not happen:\n      // https://nodejs.org/api/child_process.html#child_process_event_exit\n      // The 'exit' event is emitted after the child process ends. If the process\n      // exited, code is the final exit code of the process, otherwise null.\n      // If the process terminated due to receipt of a signal, signal is the\n      // string name of the signal, otherwise null. One of the two will always be\n      // non - null.\n      //\n      // but just in case let do non-zero exit, because we are in situation\n      // we don't expect to be possible\n      process.exit(1)\n    }\n  )\n\n  const files = [\n    rootFile(`gatsby-config.js`),\n    rootFile(`gatsby-node.js`),\n    rootFile(`gatsby-config.ts`),\n    rootFile(`gatsby-node.ts`),\n  ]\n  const GATSBY_CONFIG_REGEX = /^gatsby-config\\.[jt]s$/\n  let watcher: chokidar.FSWatcher\n\n  if (!isCI()) {\n    watcher = chokidar.watch(files).on(`change`, filePath => {\n      const file = path.basename(filePath)\n\n      if (file.match(GATSBY_CONFIG_REGEX)) {\n        const newConfig = requireUncached(rootFile(`gatsby-config`))\n\n        if (!doesConfigChangeRequireRestart(lastConfig, newConfig)) {\n          lastConfig = newConfig\n          return\n        }\n\n        lastConfig = newConfig\n      }\n\n      console.warn(\n        `develop process needs to be restarted to apply the changes to ${file}`\n      )\n      io.emit(`structured-log`, {\n        type: `LOG_ACTION`,\n        action: {\n          type: `DEVELOP`,\n          payload: `RESTART_REQUIRED`,\n          dirtyFile: file,\n        },\n      })\n    })\n  }\n\n  // route ipc messaging to the original develop process\n  process.on(`message`, msg => {\n    developProcess.send(msg)\n  })\n\n  process.on(`SIGINT`, async () => {\n    await shutdownServices(\n      {\n        developProcess,\n        telemetryServerProcess,\n        unlocks,\n        statusServer,\n        proxy,\n        watcher,\n      },\n      `SIGINT`\n    )\n\n    process.exit(0)\n  })\n\n  process.on(`SIGTERM`, async () => {\n    await shutdownServices(\n      {\n        developProcess,\n        telemetryServerProcess,\n        unlocks,\n        statusServer,\n        proxy,\n        watcher,\n      },\n      `SIGTERM`\n    )\n\n    process.exit(0)\n  })\n\n  onExit((_code, signal) => {\n    shutdownServices(\n      {\n        developProcess,\n        telemetryServerProcess,\n        unlocks,\n        statusServer,\n        proxy,\n        watcher,\n      },\n      signal as NodeJS.Signals\n    )\n  })\n}\n\ninterface IShutdownServicesOptions {\n  statusServer: https.Server | http.Server\n  developProcess: ControllableScript\n  proxy: IProxyControls\n  unlocks: Array<UnlockFn | null>\n  watcher: chokidar.FSWatcher\n  telemetryServerProcess: ControllableScript\n}\n\nfunction shutdownServices(\n  {\n    statusServer,\n    developProcess,\n    proxy,\n    unlocks,\n    watcher,\n    telemetryServerProcess,\n  }: IShutdownServicesOptions,\n  signal: NodeJS.Signals\n): Promise<void> {\n  try {\n    telemetryFlush()\n  } catch (e) {\n    // nop\n  }\n  const services = [\n    developProcess.stop(signal),\n    telemetryServerProcess.stop(),\n    watcher?.close(),\n    new Promise(resolve => statusServer.close(resolve)),\n    new Promise(resolve => proxy.server.close(resolve)),\n  ]\n\n  unlocks.forEach(unlock => {\n    if (unlock) {\n      services.push(unlock())\n    }\n  })\n\n  return Promise.all(services)\n    .catch(() => {})\n    .then(() => {})\n}\n"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AASA;;AACA;;AACA;;AAEA;;AA1BA;AA4BA;AACA,MAAMA,eAAe,GAAIC,IAAD,IAAuB;EAC7C,IAAI;IACF,OAAOC,OAAO,CAACC,KAAR,CAAcD,OAAO,CAACE,OAAR,CAAgBH,IAAhB,CAAd,CAAP;EACD,CAFD,CAEE,OAAOI,CAAP,EAAU;IACV,OAAO,IAAP;EACD;;EAED,IAAI;IACF,OAAOH,OAAO,CAACD,IAAD,CAAd;EACD,CAFD,CAEE,OAAOI,CAAP,EAAU;IACV,OAAO,IAAP;EACD;AACF,CAZD,C,CAcA;;;AACA,MAAMC,8BAA8B,GAAG,CACrCC,UADqC,EAErCC,SAFqC,KAGzB;EACZ;EACA,MAAMC,QAAQ,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAyB;IACxC,IAAI,OAAOA,CAAP,KAAc,UAAd,IAA2BA,CAAC,YAAYC,MAA5C,EAAoD;MAClD,OAAOD,CAAC,CAACE,QAAF,EAAP;IACD,CAFD,MAEO;MACL,OAAOF,CAAP;IACD;EACF,CAND;;EAQA,MAAMG,eAAe,GAAGC,IAAI,CAACC,SAAL,CACtB,EAAE,GAAGT,UAAL;IAAiBU,YAAY,EAAE;EAA/B,CADsB,EAEtBR,QAFsB,CAAxB;EAIA,MAAMS,eAAe,GAAGH,IAAI,CAACC,SAAL,CACtB,EAAE,GAAGR,SAAL;IAAgBS,YAAY,EAAE;EAA9B,CADsB,EAEtBR,QAFsB,CAAxB;EAKA,IAAIK,eAAe,KAAKI,eAAxB,EAAyC,OAAO,KAAP;EAEzC,OAAO,IAAP;AACD,CAzBD,C,CA2BA;;;AACA,MAAMC,YAAY,GAAIC,IAAD,IAA2BA,IAA3B,aAA2BA,IAA3B,cAA2BA,IAA3B,GAAmC,IAAxD;;AAEO,MAAMC,YAAY,GAAIC,OAAD,IAA0C;EACpE,IAAIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,OAArC,EAA+C,SAA/C,CAAJ,EAA8D;IAC5D,OAAO;MACLF,IAAI,EAAED,YAAY,CAACG,OAAO,CAACK,OAAT,CADb;MAELC,KAAK,EAAE;IAFF,CAAP;EAID,CALD,MAKO,IAAIL,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,OAArC,EAA+C,YAA/C,CAAJ,EAAiE;IACtE,OAAO;MACLF,IAAI,EAAED,YAAY,CAACG,OAAO,CAACO,UAAT,CADb;MAELD,KAAK,EAAE;IAFF,CAAP;EAID,CALM,MAKA;IACL,OAAO,IAAP;EACD;AACF,CAdM;;;;AAgBP,MAAME,kBAAN,CAAyB;EAKvBC,WAAW,CAACC,MAAD,EAASC,SAAT,EAAuC;IAChD,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,SAAL,GAAiBA,SAAjB;EACD;;EACDC,KAAK,GAAS;IAAA;;IACZ,MAAMC,IAAmB,GAAG,EAA5B;;IACA,MAAMC,WAAW,GAAGC,YAAA,CAAIC,WAAJ,CAAgB;MAClCC,MAAM,EAAEC,aAAA,CAAKC,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAA0B,QAA1B;IAD0B,CAAhB,CAApB;;IAGAC,gBAAA,CAAGC,cAAH,CAAkBT,WAAlB,EAA+B,KAAKJ,MAApC;;IACA,KAAKc,SAAL,GAAiB,IAAjB,CANY,CAOZ;;IACA,IAAI,KAAKb,SAAT,EAAoB;MAClB,IAAI,KAAKA,SAAL,CAAeL,KAAnB,EAA0B;QACxBO,IAAI,CAACY,IAAL,CAAW,iBAAgB,KAAKd,SAAL,CAAeb,IAAK,EAA/C;MACD,CAFD,MAEO;QACLe,IAAI,CAACY,IAAL,CAAW,aAAY,KAAKd,SAAL,CAAeb,IAAK,EAA3C;MACD;IACF;;IAED,KAAKsB,OAAL,GAAeM,cAAA,CAAMC,IAAN,CAAWb,WAAX,EAAwBD,IAAxB,EAA8B;MAC3Ce,GAAG,EAAE,EACH,GAAGR,OAAO,CAACQ,GADR;QAEHC,mBAAmB,EAAEpC,IAAI,CAACC,SAAL,qBAAeoC,MAAM,CAACC,QAAtB,+DAAkC,EAAlC;MAFlB,CADsC;MAK3CC,KAAK,EAAE,CAAE,SAAF,EAAa,SAAb,EAAwB,SAAxB,EAAmC,KAAnC;IALoC,CAA9B,CAAf;EAOD;;EACS,MAAJC,IAAI,CACRC,MAA6B,GAAG,IADxB,EAERC,IAFQ,EAGO;IACf,IAAI,CAAC,KAAKf,OAAV,EAAmB;MACjB,MAAM,IAAIgB,KAAJ,CAAW,+CAAX,CAAN;IACD;;IAED,KAAKZ,SAAL,GAAiB,KAAjB;;IACA,IAAI;MACF,IAAIU,MAAJ,EAAY;QACV,KAAKd,OAAL,CAAaiB,IAAb,CAAkBH,MAAlB;MACD,CAFD,MAEO;QACL,KAAKd,OAAL,CAAakB,IAAb,CACE;UACEC,IAAI,EAAG,SADT;UAEEC,MAAM,EAAE;YACND,IAAI,EAAG,MADD;YAENE,OAAO,EAAEN;UAFH;QAFV,CADF,EAQE,MAAM,CACJ;UACA;UACA;QACD,CAZH;MAcD;IACF,CAnBD,CAmBE,OAAOO,GAAP,EAAY,CACZ;MACA;IACD;;IAED,OAAO,IAAIC,OAAJ,CAAY7D,OAAO,IAAI;MAC5B,IAAI,CAAC,KAAKsC,OAAV,EAAmB;QACjB,MAAM,IAAIgB,KAAJ,CAAW,+CAAX,CAAN;MACD;;MAED,KAAKhB,OAAL,CAAawB,EAAb,CAAiB,MAAjB,EAAwB,MAAM;QAC5B,IAAI,KAAKxB,OAAT,EAAkB;UAChB,KAAKA,OAAL,CAAayB,kBAAb;QACD;;QACD,KAAKzB,OAAL,GAAe0B,SAAf;QACAhE,OAAO;MACR,CAND;IAOD,CAZM,CAAP;EAaD;;EACDiE,SAAS,CAACC,QAAD,EAAqC;IAC5C,IAAI,CAAC,KAAK5B,OAAV,EAAmB;MACjB,MAAM,IAAIgB,KAAJ,CAAW,yDAAX,CAAN;IACD;;IACD,KAAKhB,OAAL,CAAawB,EAAb,CAAiB,SAAjB,EAA2BI,QAA3B;EACD;;EACDC,MAAM,CACJD,QADI,EAEE;IACN,IAAI,CAAC,KAAK5B,OAAV,EAAmB;MACjB,MAAM,IAAIgB,KAAJ,CAAW,sDAAX,CAAN;IACD;;IACD,KAAKhB,OAAL,CAAawB,EAAb,CAAiB,MAAjB,EAAwBI,QAAxB;EACD,CA7FsB,CA8FvB;;;EACAV,IAAI,CAACY,GAAD,EAAiB;IACnB,IAAI,CAAC,KAAK9B,OAAV,EAAmB;MACjB,MAAM,IAAIgB,KAAJ,CAAW,iDAAX,CAAN;IACD;;IAED,KAAKhB,OAAL,CAAakB,IAAb,CAAkBY,GAAlB;EACD;;AArGsB;;AAwGzB,IAAIC,YAAJ,C,CAEA;;AACA,MAAMC,QAAQ,GACZ,2GADF;;AAGAC,MAAM,CAACC,OAAP,GAAiB,MAAOtD,OAAP,IAA4C;EAC3D8B,MAAM,CAACC,QAAP,GAAkB;IAChBwB,OAAO,EAAEC,qBAAA,CAAKC,EAAL,EADO;IAEhBC,IAAI,EAAE1D,OAAO,CAAC2D;EAFE,CAAlB,CAD2D,CAM3D;EACA;;EACA3D,OAAO,CAACF,IAAR,GAAe8D,QAAQ,CAAC5D,OAAO,CAACF,IAAR,GAAgB,EAAjB,EAAoB,EAApB,CAAvB;EACA,MAAM+D,kBAAkB,GAAG,IAAAC,sBAAA,EAAMlF,OAAO,CAACE,OAAR,CAAiB,mBAAjB,CAAN,CAA3B;EACA,MAAMiF,mBAAmB,GAAG,IAAAD,sBAAA,EAC1BlF,OAAO,CAACE,OAAR,CAAiB,2BAAjB,CAD0B,CAA5B;;EAIA,IAAI;IACFkB,OAAO,CAACF,IAAR,GAAe,MAAM,IAAAkE,kDAAA,EAAyBhE,OAAO,CAACF,IAAjC,CAArB;EACD,CAFD,CAEE,OAAOf,CAAP,EAAU;IACV,IAAIA,CAAC,CAACkF,OAAF,KAAe,eAAnB,EAAmC;MACjC7C,OAAO,CAAC8C,IAAR,CAAa,CAAb;IACD;;IAED,MAAMnF,CAAN;EACD,CAtB0D,CAwB3D;EACA;;;EACA,MAAMoF,SAAS,GAAGnE,OAAO,CAACF,IAA1B;EACA,MAAMa,SAAS,GAAGZ,YAAY,CAACC,OAAD,CAA9B;;EAEA,MAAMoE,QAAQ,GAAIzF,IAAD,IAA0BuC,aAAA,CAAKC,IAAL,CAAUnB,OAAO,CAAC2D,SAAlB,EAA6BhF,IAA7B,CAA3C,CA7B2D,CA+B3D;EACA;;;EACA,IAAIM,UAAU,GAAGP,eAAe,CAAC0F,QAAQ,CAAE,eAAF,CAAT,CAAhC,CAjC2D,CAmC3D;EACA;EACA;EACA;EACA;EACA;;EACA,MAAM,CAACC,gBAAD,EAAmBC,WAAnB,EAAgCC,mBAAhC,IACJ,MAAM5B,OAAO,CAAC6B,GAAR,CAAY,CAChB,IAAAC,mBAAA,EAAcrD,OAAO,CAACQ,GAAR,CAAY8C,oBAA1B,CADgB,EAEhB,IAAAD,mBAAA,GAFgB,EAGhB,IAAAA,mBAAA,GAHgB,CAAZ,CADR,CAzC2D,CAgD3D;EACA;;EACA,IAAI,CAACzE,OAAO,CAAE,WAAF,CAAP,IAAwBA,OAAO,CAAE,UAAF,CAAhC,KAAiD,CAACA,OAAO,CAAC2E,KAA9D,EAAqE;IACnEC,iBAAA,CAASC,KAAT,CACG,2EADH;EAGD,CAtD0D,CAwD3D;EACA;EACA;EACA;EACA;;;EACA,IAAI7E,OAAO,CAAC2E,KAAZ,EAAmB;IACjB,MAAMG,OAAO,GACX9E,OAAO,CAAC+E,IAAR,KAAkB,SAAlB,IAA8B/E,OAAO,CAAC+E,IAAR,KAAkB,IAAhD,GACK,WADL,GAEI/E,OAAO,CAAC+E,IAHd;;IAKA,IAAI3B,QAAQ,CAAC4B,IAAT,CAAcF,OAAd,CAAJ,EAA4B;MAC1BF,iBAAA,CAASC,KAAT,CACG,0DAAyDC,OAAQ,mCADpE;IAGD;;IAED,MAAMG,GAAG,GAAG,MAAM,IAAAC,sBAAA,EAAW;MAC3BC,IAAI,EAAEL,OADqB;MAE3BM,MAAM,EAAEpF,OAAO,CAAE,SAAF,CAFY;MAG3BqF,QAAQ,EAAErF,OAAO,CAAE,WAAF,CAHU;MAI3BsF,OAAO,EAAEtF,OAAO,CAAE,UAAF,CAJW;MAK3B2D,SAAS,EAAE3D,OAAO,CAAC2D;IALQ,CAAX,CAAlB;;IAQA,IAAIsB,GAAJ,EAAS;MACPjF,OAAO,CAACiF,GAAR,GAAcA,GAAd;IACD;EACF,CApF0D,CAsF3D;EACA;;;EACA,MAAMM,KAAK,GAAG,IAAAC,+BAAA,EAAkB;IAC9BrB,SAAS,EAAEA,SADmB;IAE9BsB,UAAU,EAAEnB,WAFkB;IAG9BtE;EAH8B,CAAlB,CAAd;EAMA,MAAM0F,cAAc,GAAG,IAAIlF,kBAAJ,CACpB;AACL,0BAA0Bf,IAAI,CAACC,SAAL,CAAemE,kBAAf,CAAmC;AAC7D,mBAAmBpE,IAAI,CAACC,SAAL,CAAe,EAC5B,GAAGM,OADyB;IAE5BF,IAAI,EAAEwE,WAFsB;IAG5BH,SAH4B;IAI5B;IACAc,GAAG,EAAE,IALuB;IAM5BtE;EAN4B,CAAf,CAOZ;AACP;AACA,GAZyB,EAarBA,SAbqB,CAAvB;EAgBA,MAAMgF,sBAAsB,GAAG,IAAInF,kBAAJ,CAC5B,WAAUf,IAAI,CAACC,SAAL,CAAeqE,mBAAf,CAAoC,aAAYtE,IAAI,CAACC,SAAL,CACzD6E,mBADyD,CAEzD,GAH2B,EAI7B,IAJ6B,CAA/B;EAOA,IAAIqB,OAA+B,GAAG,EAAtC;;EACA,IAAI,CAAC,IAAAC,qBAAA,GAAL,EAAa;IACX,MAAMC,YAAY,GAAG,MAAM,IAAAC,kCAAA,EACzB/F,OAAO,CAAC2D,SADiB,EAExB,qBAFwB,EAGzB;MACE7D,IAAI,EAAEuE;IADR,CAHyB,CAA3B;IAOA,MAAM2B,aAAa,GAAG,MAAM,IAAAD,kCAAA,EAC1B/F,OAAO,CAAC2D,SADkB,EAEzB,cAFyB,EAG1B;MACE7D,IAAI,EAAEqE;IADR,CAH0B,CAA5B;IAOA,MAAM8B,eAAe,GAAG,MAAM,IAAAF,kCAAA,EAC5B/F,OAAO,CAAC2D,SADoB,EAE3B,iBAF2B,EAG5B;MACE7D,IAAI,EAAEyE;IADR,CAH4B,CAA9B;IAOA,MAAM,IAAA2B,2CAAA,EAA2B;MAC/Bf,IAAI,EAAEnF,OAAO,CAACmG,eAAR,CAAwBhB,IADC;MAE/BiB,QAAQ,EAAEpG,OAAO,CAAC2D,SAFa;MAG/B0C,GAAG,EAAEjF,OAAO,CAACiF,GAHkB;MAI/BC,OAAO,EAAEC,IAAI,CAACC,GAAL;IAJsB,CAA3B,CAAN;;IAOA,IAAI,CAACV,YAAD,IAAiB,CAACE,aAAtB,EAAqC;MACnC,MAAMS,IAAI,GAAG,MAAM,IAAAC,2BAAA,EAAW1G,OAAO,CAAC2D,SAAnB,EAA+B,cAA/B,CAAnB;MACA,MAAM7D,IAAI,GAAG,CAAA2G,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAE3G,IAAN,KAAc,IAA3B;MACA6G,OAAO,CAACC,KAAR,CACG,sEACC5G,OAAO,CAACiF,GAAR,GAAe,QAAf,GAA0B,OAC3B,eAAcnF,IAAK,6CAHtB;MAKAsB,OAAO,CAAC8C,IAAR,CAAa,CAAb;IACD;;IAED0B,OAAO,GAAGA,OAAO,CAACiB,MAAR,CAAe,CAACf,YAAD,EAAeE,aAAf,EAA8BC,eAA9B,CAAf,CAAV;EACD;;EAED,MAAMa,YAAY,GAAG9G,OAAO,CAACiF,GAAR,GACjBN,cAAA,CAAMoC,YAAN,CAAmB/G,OAAO,CAACiF,GAA3B,CADiB,GAEjB+B,aAAA,CAAKD,YAAL,EAFJ;EAGAD,YAAY,CAACG,MAAb,CAAoB5C,gBAApB;EAEA,MAAM6C,EAAE,GAAG,IAAIC,cAAJ,CAAaL,YAAb,EAA2B;IACpC;IACAM,IAAI,EAAE;MACJC,MAAM,EAAE;IADJ,CAF8B;IAKpCC,MAAM,EAAE;EAL4B,CAA3B,CAAX;;EAQA,MAAMC,qBAAqB,GAAIrE,GAAD,IAAe;IAC3C,IAAIA,GAAG,CAACX,IAAJ,KAAc,WAAlB,EAA8B;;IAC9B,IAAInB,OAAO,CAACkB,IAAZ,EAAkB;MAChB;MACAlB,OAAO,CAACkB,IAAR,CAAaY,GAAb;IACD;;IAEDgE,EAAE,CAACM,IAAH,CAAS,gBAAT,EAA0BtE,GAA1B;;IAEA,IACEA,GAAG,CAACX,IAAJ,KAAc,YAAd,IACAW,GAAG,CAACV,MAAJ,CAAWD,IAAX,KAAqB,YADrB,IAEAW,GAAG,CAACV,MAAJ,CAAWC,OAAX,KAAwB,SAH1B,EAIE;MACA8C,KAAK,CAACkC,SAAN;IACD;EACF,CAhBD;;EAkBAP,EAAE,CAACtE,EAAH,CAAO,YAAP,EAAoB8E,MAAM,IAAI;IAC5BA,MAAM,CAAC9E,EAAP,CAAW,iBAAX,EAA6B,MAAM+E,OAAN,IAAiB;MAC5CxE,YAAY,GAAG,IAAf;MACAoC,KAAK,CAACqC,qBAAN,GAF4C,CAG5C;;MACA,IAAID,OAAJ,EAAaA,OAAO,CAAE,qBAAF,CAAP;MACb,MAAMjC,cAAc,CAACzD,IAAf,EAAN;MACAyD,cAAc,CAAC9E,KAAf;MACA8E,cAAc,CAAC3C,SAAf,CAAyBwE,qBAAzB;MACApE,YAAY,GAAG,KAAf;IACD,CATD;EAUD,CAXD;EAaAuC,cAAc,CAAC9E,KAAf;EACA8E,cAAc,CAAC3C,SAAf,CAAyBwE,qBAAzB;EAEA5B,sBAAsB,CAAC/E,KAAvB,GAhN2D,CAkN3D;EACA;;EACA8E,cAAc,CAACzC,MAAf,CACE,CAACd,IAAD,EAAsBD,MAAtB,KAAwD;IACtD,IAAI;MACF,IAAA2F,sBAAA;IACD,CAFD,CAEE,OAAO9I,CAAP,EAAU,CACV;IACD;;IACD,IAAIoE,YAAJ,EAAkB;;IAClB,IAAIjB,MAAM,KAAK,IAAf,EAAqB;MACnBd,OAAO,CAACiB,IAAR,CAAajB,OAAO,CAACiF,GAArB,EAA0BnE,MAA1B;MACA;IACD;;IACD,IAAIC,IAAI,KAAK,IAAb,EAAmB;MACjBf,OAAO,CAAC8C,IAAR,CAAa/B,IAAb;IACD,CAbqD,CAetD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;IACAf,OAAO,CAAC8C,IAAR,CAAa,CAAb;EACD,CA3BH;EA8BA,MAAM4D,KAAK,GAAG,CACZ1D,QAAQ,CAAE,kBAAF,CADI,EAEZA,QAAQ,CAAE,gBAAF,CAFI,EAGZA,QAAQ,CAAE,kBAAF,CAHI,EAIZA,QAAQ,CAAE,gBAAF,CAJI,CAAd;EAMA,MAAM2D,mBAAmB,GAAG,wBAA5B;EACA,IAAIC,OAAJ;;EAEA,IAAI,CAAC,IAAAnC,qBAAA,GAAL,EAAa;IACXmC,OAAO,GAAGC,iBAAA,CAASC,KAAT,CAAeJ,KAAf,EAAsBlF,EAAtB,CAA0B,QAA1B,EAAmCuF,QAAQ,IAAI;MACvD,MAAMxJ,IAAI,GAAGuC,aAAA,CAAKkH,QAAL,CAAcD,QAAd,CAAb;;MAEA,IAAIxJ,IAAI,CAAC0J,KAAL,CAAWN,mBAAX,CAAJ,EAAqC;QACnC,MAAM7I,SAAS,GAAGR,eAAe,CAAC0F,QAAQ,CAAE,eAAF,CAAT,CAAjC;;QAEA,IAAI,CAACpF,8BAA8B,CAACC,UAAD,EAAaC,SAAb,CAAnC,EAA4D;UAC1DD,UAAU,GAAGC,SAAb;UACA;QACD;;QAEDD,UAAU,GAAGC,SAAb;MACD;;MAEDyH,OAAO,CAAC2B,IAAR,CACG,iEAAgE3J,IAAK,EADxE;MAGAuI,EAAE,CAACM,IAAH,CAAS,gBAAT,EAA0B;QACxBjF,IAAI,EAAG,YADiB;QAExBC,MAAM,EAAE;UACND,IAAI,EAAG,SADD;UAENE,OAAO,EAAG,kBAFJ;UAGN8F,SAAS,EAAE5J;QAHL;MAFgB,CAA1B;IAQD,CAzBS,CAAV;EA0BD,CAtR0D,CAwR3D;;;EACAyC,OAAO,CAACwB,EAAR,CAAY,SAAZ,EAAsBM,GAAG,IAAI;IAC3BwC,cAAc,CAACpD,IAAf,CAAoBY,GAApB;EACD,CAFD;EAIA9B,OAAO,CAACwB,EAAR,CAAY,QAAZ,EAAqB,YAAY;IAC/B,MAAM4F,gBAAgB,CACpB;MACE9C,cADF;MAEEC,sBAFF;MAGEC,OAHF;MAIEkB,YAJF;MAKEvB,KALF;MAMEyC;IANF,CADoB,EASnB,QATmB,CAAtB;IAYA5G,OAAO,CAAC8C,IAAR,CAAa,CAAb;EACD,CAdD;EAgBA9C,OAAO,CAACwB,EAAR,CAAY,SAAZ,EAAsB,YAAY;IAChC,MAAM4F,gBAAgB,CACpB;MACE9C,cADF;MAEEC,sBAFF;MAGEC,OAHF;MAIEkB,YAJF;MAKEvB,KALF;MAMEyC;IANF,CADoB,EASnB,SATmB,CAAtB;IAYA5G,OAAO,CAAC8C,IAAR,CAAa,CAAb;EACD,CAdD;EAgBA,IAAAjB,mBAAA,EAAO,CAACwF,KAAD,EAAQvG,MAAR,KAAmB;IACxBsG,gBAAgB,CACd;MACE9C,cADF;MAEEC,sBAFF;MAGEC,OAHF;MAIEkB,YAJF;MAKEvB,KALF;MAMEyC;IANF,CADc,EASd9F,MATc,CAAhB;EAWD,CAZD;AAaD,CA1UD;;AAqVA,SAASsG,gBAAT,CACE;EACE1B,YADF;EAEEpB,cAFF;EAGEH,KAHF;EAIEK,OAJF;EAKEoC,OALF;EAMErC;AANF,CADF,EASEzD,MATF,EAUiB;EACf,IAAI;IACF,IAAA2F,sBAAA;EACD,CAFD,CAEE,OAAO9I,CAAP,EAAU,CACV;EACD;;EACD,MAAM2J,QAAQ,GAAG,CACfhD,cAAc,CAACzD,IAAf,CAAoBC,MAApB,CADe,EAEfyD,sBAAsB,CAAC1D,IAAvB,EAFe,EAGf+F,OAHe,aAGfA,OAHe,uBAGfA,OAAO,CAAEW,KAAT,EAHe,EAIf,IAAIhG,OAAJ,CAAY7D,OAAO,IAAIgI,YAAY,CAAC6B,KAAb,CAAmB7J,OAAnB,CAAvB,CAJe,EAKf,IAAI6D,OAAJ,CAAY7D,OAAO,IAAIyG,KAAK,CAACqD,MAAN,CAAaD,KAAb,CAAmB7J,OAAnB,CAAvB,CALe,CAAjB;EAQA8G,OAAO,CAACiD,OAAR,CAAgBC,MAAM,IAAI;IACxB,IAAIA,MAAJ,EAAY;MACVJ,QAAQ,CAACjH,IAAT,CAAcqH,MAAM,EAApB;IACD;EACF,CAJD;EAMA,OAAOnG,OAAO,CAAC6B,GAAR,CAAYkE,QAAZ,EACJK,KADI,CACE,MAAM,CAAE,CADV,EAEJC,IAFI,CAEC,MAAM,CAAE,CAFT,CAAP;AAGD"}