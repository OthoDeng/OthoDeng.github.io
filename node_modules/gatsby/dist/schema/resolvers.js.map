{"version":3,"file":"resolvers.js","names":["findOne","typeName","findOneResolver","_source","args","context","info","stats","totalRunQuery","nodeModel","query","filter","type","schema","getType","tracer","path","findManyPaginated","findManyPaginatedResolver","group","getProjectedField","distinct","max","min","sum","skip","Math","limit","undefined","extendedArgs","totalPluralRunQuery","result","findAll","connectionType","paginate","resultOffset","distinctResolver","source","field","edges","values","Set","forEach","node","value","getValueAt","Array","isArray","subValue","add","Date","toISOString","from","sort","minResolver","Number","MAX_SAFE_INTEGER","isNaN","maxResolver","MIN_SAFE_INTEGER","sumResolver","reduce","prev","groupResolver","groupedResults","acc","key","concat","Object","create","keys","fieldValue","entries","push","GatsbyIterable","totalCount","length","results","params","Error","allItems","start","items","slice","pageCount","count","ceil","currentPage","hasPreviousPage","hasNextPage","map","item","i","arr","next","previous","nodes","pageInfo","itemCount","perPage","link","options","by","fieldConfig","linkResolver","resolver","resolve","defaultFieldResolver","fieldValueOrPromise","fromNode","then","linkResolverValue","returnType","getNullableType","getNamedType","getNodesByIds","ids","getNodeById","id","runQueryArgs","split","reduceRight","obj","in","eq","firstOnly","GraphQLList","linkResolverQueryResult","queryResult","find","fileByPath","fileByPathResolver","parentFileNode","findRootNodeAncestor","internal","queryNodesByPath","relPaths","queryNodeByPath","relPath","absolutePath","normalize","systemPath","dir","fieldName","selectionSet","fieldNodes","getFieldNodeByNameInSelectionSet","isObjectType","isInterfaceType","getFields","fieldArg","arg","name","fieldEnum","isEnumType","fieldNode","arguments","kind","Kind","ENUM","enumKey","enumValue","getValue","selections","selection","FRAGMENT_SPREAD","fragmentDef","fragments","INLINE_FRAGMENT","property","WARNED_ABOUT_RESOLVERS","badResolverInvocationMessage","missingVar","resolverName","pathToArray","wrappingResolver","wrappedTracingResolver","parent","reporter","warn","activity","time","createResolverActivity","parentType","telemetryResolverTimings","process","hrtime","bigint","endActivity","duration","end","isTracingResolver","defaultResolver"],"sources":["../../src/schema/resolvers.ts"],"sourcesContent":["import systemPath from \"path\"\nimport normalize from \"normalize-path\"\nimport {\n  GraphQLList,\n  GraphQLType,\n  getNullableType,\n  getNamedType,\n  Kind,\n  GraphQLFieldConfig,\n  GraphQLResolveInfo,\n  isObjectType,\n  isInterfaceType,\n  isEnumType,\n  SelectionSetNode,\n  SelectionNode,\n  FieldNode,\n} from \"graphql\"\nimport { Path } from \"graphql/jsutils/Path\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { pathToArray } from \"../query/utils\"\nimport { getValueAt } from \"../utils/get-value-at\"\nimport {\n  GatsbyResolver,\n  IGatsbyConnection,\n  IGatsbyResolverContext,\n} from \"./type-definitions\"\nimport { IGatsbyNode } from \"../redux/types\"\nimport { IQueryResult } from \"../datastore/types\"\nimport { GatsbyIterable } from \"../datastore/common/iterable\"\n\ntype ResolvedLink = IGatsbyNode | Array<IGatsbyNode> | null\n\ntype nestedListOfStrings = Array<string | nestedListOfStrings>\ntype nestedListOfNodes = Array<IGatsbyNode | nestedListOfNodes>\n\nexport function findOne<TSource, TArgs>(\n  typeName: string\n): GatsbyResolver<TSource, TArgs> {\n  return function findOneResolver(_source, args, context, info): any {\n    if (context.stats) {\n      context.stats.totalRunQuery++\n    }\n    return context.nodeModel.findOne(\n      {\n        query: { filter: args },\n        type: info.schema.getType(typeName),\n        stats: context.stats,\n        tracer: context.tracer,\n      },\n      { path: context.path }\n    )\n  }\n}\n\ntype PaginatedArgs<TArgs> = TArgs & { skip?: number; limit?: number }\n\nexport function findManyPaginated<TSource, TArgs>(\n  typeName: string\n): GatsbyResolver<TSource, PaginatedArgs<TArgs>> {\n  return async function findManyPaginatedResolver(\n    _source,\n    args,\n    context,\n    info\n  ): Promise<IGatsbyConnection<IGatsbyNode>> {\n    // Peek into selection set and pass on the `field` arg of `group` and\n    // `distinct` which might need to be resolved.\n    const group = getProjectedField(info, `group`)\n    const distinct = getProjectedField(info, `distinct`)\n    const max = getProjectedField(info, `max`)\n    const min = getProjectedField(info, `min`)\n    const sum = getProjectedField(info, `sum`)\n\n    // Apply paddings for pagination\n    // (for previous/next node and also to detect if there is a previous/next page)\n    const skip = typeof args.skip === `number` ? Math.max(0, args.skip - 1) : 0\n    const limit = typeof args.limit === `number` ? args.limit + 2 : undefined\n\n    const extendedArgs = {\n      ...args,\n      group: group || [],\n      distinct: distinct || [],\n      max: max || [],\n      min: min || [],\n      sum: sum || [],\n      skip,\n      limit,\n    }\n    // Note: stats are passed to telemetry in src/commands/build.ts\n    if (context.stats) {\n      context.stats.totalRunQuery++\n      context.stats.totalPluralRunQuery++\n    }\n    const result = await context.nodeModel.findAll(\n      {\n        query: extendedArgs,\n        type: info.schema.getType(typeName),\n        stats: context.stats,\n        tracer: context.tracer,\n      },\n      { path: context.path, connectionType: typeName }\n    )\n    return paginate(result, {\n      resultOffset: skip,\n      skip: args.skip,\n      limit: args.limit,\n    })\n  }\n}\n\ninterface IFieldConnectionArgs {\n  field: string\n}\n\nexport const distinct: GatsbyResolver<\n  IGatsbyConnection<IGatsbyNode>,\n  IFieldConnectionArgs\n> = function distinctResolver(source, args): Array<string> {\n  const { field } = args\n  const { edges } = source\n\n  const values = new Set<string>()\n  edges.forEach(({ node }) => {\n    const value =\n      getValueAt(node, `__gatsby_resolved.${field}`) || getValueAt(node, field)\n    if (value === null || value === undefined) {\n      return\n    }\n    if (Array.isArray(value)) {\n      value.forEach(subValue =>\n        values.add(subValue instanceof Date ? subValue.toISOString() : subValue)\n      )\n    } else if (value instanceof Date) {\n      values.add(value.toISOString())\n    } else {\n      values.add(value)\n    }\n  })\n  return Array.from(values).sort()\n}\n\nexport const min: GatsbyResolver<\n  IGatsbyConnection<IGatsbyNode>,\n  IFieldConnectionArgs\n> = function minResolver(source, args): number | null {\n  const { field } = args\n  const { edges } = source\n\n  let min = Number.MAX_SAFE_INTEGER\n\n  edges.forEach(({ node }) => {\n    let value =\n      getValueAt(node, `__gatsby_resolved.${field}`) || getValueAt(node, field)\n\n    if (typeof value !== `number`) {\n      value = Number(value)\n    }\n    if (!isNaN(value) && value < min) {\n      min = value\n    }\n  })\n  if (min === Number.MAX_SAFE_INTEGER) {\n    return null\n  }\n  return min\n}\n\nexport const max: GatsbyResolver<\n  IGatsbyConnection<IGatsbyNode>,\n  IFieldConnectionArgs\n> = function maxResolver(source, args): number | null {\n  const { field } = args\n  const { edges } = source\n\n  let max = Number.MIN_SAFE_INTEGER\n\n  edges.forEach(({ node }) => {\n    let value =\n      getValueAt(node, `__gatsby_resolved.${field}`) || getValueAt(node, field)\n    if (typeof value !== `number`) {\n      value = Number(value)\n    }\n    if (!isNaN(value) && value > max) {\n      max = value\n    }\n  })\n  if (max === Number.MIN_SAFE_INTEGER) {\n    return null\n  }\n  return max\n}\n\nexport const sum: GatsbyResolver<\n  IGatsbyConnection<IGatsbyNode>,\n  IFieldConnectionArgs\n> = function sumResolver(source, args): number | null {\n  const { field } = args\n  const { edges } = source\n\n  return edges.reduce<number | null>((prev, { node }) => {\n    let value =\n      getValueAt(node, `__gatsby_resolved.${field}`) || getValueAt(node, field)\n\n    if (typeof value !== `number`) {\n      value = Number(value)\n    }\n    if (!isNaN(value)) {\n      return (prev || 0) + value\n    }\n    return prev\n  }, null)\n}\n\ntype IGatsbyGroupReturnValue<NodeType> = Array<\n  IGatsbyConnection<NodeType> & {\n    field: string\n    fieldValue: string | undefined\n  }\n>\n\nexport const group: GatsbyResolver<\n  IGatsbyConnection<IGatsbyNode>,\n  PaginatedArgs<IFieldConnectionArgs>\n> = function groupResolver(source, args): IGatsbyGroupReturnValue<IGatsbyNode> {\n  const { field } = args\n  const { edges } = source\n  const groupedResults: Record<string, Array<IGatsbyNode>> = edges.reduce(\n    (acc, { node }) => {\n      const value =\n        getValueAt(node, `__gatsby_resolved.${field}`) ||\n        getValueAt(node, field)\n      const values = Array.isArray(value) ? value : [value]\n      values\n        .filter(value => value != null)\n        .forEach(value => {\n          const key = value instanceof Date ? value.toISOString() : value\n          acc[key] = (acc[key] || []).concat(node)\n        })\n      return acc\n      // Note: using Object.create on purpose:\n      //   object key may be arbitrary string including reserved words (i.e. `constructor`)\n      //   see: https://github.com/gatsbyjs/gatsby/issues/22508\n    },\n    Object.create(null)\n  )\n\n  return Object.keys(groupedResults)\n    .sort()\n    .reduce((acc: IGatsbyGroupReturnValue<IGatsbyNode>, fieldValue: string) => {\n      const entries = groupedResults[fieldValue] || []\n      acc.push({\n        ...paginate(\n          {\n            entries: new GatsbyIterable(entries),\n            totalCount: async () => entries.length,\n          },\n          args\n        ),\n        field,\n        fieldValue,\n      })\n      return acc\n    }, [])\n}\n\nexport function paginate(\n  results: IQueryResult,\n  params: { skip?: number; limit?: number; resultOffset?: number }\n): IGatsbyConnection<IGatsbyNode> {\n  const { resultOffset = 0, skip = 0, limit } = params\n  if (resultOffset > skip) {\n    throw new Error(\"Result offset cannot be greater than `skip` argument\")\n  }\n  const allItems = Array.from(results.entries)\n\n  const start = skip - resultOffset\n  const items = allItems.slice(start, limit && start + limit)\n\n  const totalCount = results.totalCount\n  const pageCount = async (): Promise<number> => {\n    const count = await totalCount()\n    return limit\n      ? Math.ceil(skip / limit) + Math.ceil((count - skip) / limit)\n      : skip\n      ? 2\n      : 1\n  }\n  const currentPage = limit ? Math.ceil(skip / limit) + 1 : skip ? 2 : 1\n  const hasPreviousPage = currentPage > 1\n  const hasNextPage = limit ? allItems.length - start > limit : false\n\n  return {\n    totalCount,\n    edges: items.map((item, i, arr) => {\n      return {\n        node: item,\n        next: arr[i + 1],\n        previous: arr[i - 1],\n      }\n    }),\n    nodes: items,\n    pageInfo: {\n      currentPage,\n      hasPreviousPage,\n      hasNextPage,\n      itemCount: items.length,\n      pageCount,\n      perPage: limit,\n      totalCount,\n    },\n  }\n}\n\nexport function link<TSource, TArgs>(\n  options: {\n    by: string\n    type?: GraphQLType\n    from?: string\n    fromNode?: boolean\n  } = {\n    by: `id`,\n  },\n  fieldConfig: GraphQLFieldConfig<\n    TSource,\n    IGatsbyResolverContext<TSource, TArgs>,\n    TArgs\n  >\n): GatsbyResolver<TSource, TArgs> {\n  // Note: we explicitly make an attempt to prevent using the `async` keyword because often\n  //       it does not return a promise and this makes a significant difference at scale.\n\n  return function linkResolver(\n    source,\n    args,\n    context,\n    info\n  ): ResolvedLink | Promise<ResolvedLink> {\n    const resolver = fieldConfig.resolve || context.defaultFieldResolver\n    const fieldValueOrPromise = resolver(source, args, context, {\n      ...info,\n      from: options.from || info.from,\n      fromNode: options.from ? options.fromNode : info.fromNode,\n    })\n\n    // Note: for this function, at scale, conditional .then is more efficient than generic await\n    if (typeof fieldValueOrPromise?.then === `function`) {\n      return fieldValueOrPromise.then(fieldValue =>\n        linkResolverValue(fieldValue, args, context, info)\n      )\n    }\n\n    return linkResolverValue(fieldValueOrPromise, args, context, info)\n  }\n\n  function linkResolverValue(\n    fieldValue,\n    args,\n    context,\n    info\n  ): ResolvedLink | Promise<ResolvedLink> {\n    if (fieldValue == null) {\n      return null\n    }\n\n    const returnType = getNullableType(options.type || info.returnType)\n    const type = getNamedType(returnType)\n\n    if (options.by === `id`) {\n      if (Array.isArray(fieldValue)) {\n        return context.nodeModel.getNodesByIds(\n          { ids: fieldValue, type: type },\n          { path: context.path }\n        )\n      } else {\n        return context.nodeModel.getNodeById(\n          { id: fieldValue, type: type },\n          { path: context.path }\n        )\n      }\n    }\n\n    // Return early if fieldValue is [] since { in: [] } doesn't make sense\n    if (Array.isArray(fieldValue) && fieldValue.length === 0) {\n      return fieldValue\n    }\n\n    const runQueryArgs = args as TArgs & { filter: Record<string, any> }\n    runQueryArgs.filter = options.by.split(`.`).reduceRight(\n      (acc: Record<string, any>, key: string) => {\n        const obj = {}\n        obj[key] = acc\n        return obj\n      },\n      Array.isArray(fieldValue) ? { in: fieldValue } : { eq: fieldValue }\n    )\n\n    const firstOnly = !(returnType instanceof GraphQLList)\n\n    if (context.stats) {\n      context.stats.totalRunQuery++\n      if (firstOnly) {\n        context.stats.totalPluralRunQuery++\n      }\n    }\n\n    if (firstOnly) {\n      return context.nodeModel\n        .findOne(\n          {\n            query: runQueryArgs,\n            type,\n            stats: context.stats,\n            tracer: context.tracer,\n          },\n          { path: context.path }\n        )\n        .then(result => linkResolverQueryResult(fieldValue, result, returnType))\n    }\n\n    return context.nodeModel\n      .findAll(\n        {\n          query: runQueryArgs,\n          type,\n          stats: context.stats,\n          tracer: context.tracer,\n        },\n        { path: context.path }\n      )\n      .then(({ entries }) =>\n        linkResolverQueryResult(fieldValue, Array.from(entries), returnType)\n      )\n  }\n\n  function linkResolverQueryResult(\n    fieldValue,\n    queryResult,\n    returnType\n  ): IGatsbyNode | Array<IGatsbyNode> {\n    if (\n      returnType instanceof GraphQLList &&\n      Array.isArray(fieldValue) &&\n      Array.isArray(queryResult)\n    ) {\n      return fieldValue.map(value =>\n        queryResult.find(obj => getValueAt(obj, options.by) === value)\n      )\n    } else {\n      return queryResult\n    }\n  }\n}\n\nexport function fileByPath<TSource, TArgs>(\n  options: {\n    from?: string\n    fromNode?: boolean\n  } = {},\n  fieldConfig\n): GatsbyResolver<TSource, TArgs> {\n  return async function fileByPathResolver(\n    source,\n    args,\n    context,\n    info\n  ): Promise<IGatsbyNode | nestedListOfNodes | null> {\n    const resolver = fieldConfig.resolve || context.defaultFieldResolver\n    const fieldValue: nestedListOfStrings = await resolver(\n      source,\n      args,\n      context,\n      {\n        ...info,\n        from: options.from || info.from,\n        fromNode: options.from ? options.fromNode : info.fromNode,\n      }\n    )\n\n    if (fieldValue == null) {\n      return null\n    }\n\n    // Find the File node for this node (we assume the node is something\n    // like markdown which would be a child node of a File node).\n    const parentFileNode = context.nodeModel.findRootNodeAncestor(\n      source,\n      node => node.internal && node.internal.type === `File`\n    )\n\n    async function queryNodesByPath(\n      relPaths: nestedListOfStrings\n    ): Promise<nestedListOfNodes> {\n      const arr: nestedListOfNodes = []\n      for (let i = 0; i < relPaths.length; ++i) {\n        arr[i] = await (Array.isArray(relPaths[i])\n          ? queryNodesByPath(relPaths[i] as nestedListOfStrings)\n          : queryNodeByPath(relPaths[i] as string))\n      }\n      return arr\n    }\n\n    function queryNodeByPath(relPath: string): Promise<IGatsbyNode> {\n      return context.nodeModel.findOne({\n        query: {\n          filter: {\n            absolutePath: {\n              eq: normalize(systemPath.resolve(parentFileNode.dir, relPath)),\n            },\n          },\n        },\n        type: `File`,\n      })\n    }\n\n    if (Array.isArray(fieldValue)) {\n      return queryNodesByPath(fieldValue)\n    } else {\n      return queryNodeByPath(fieldValue)\n    }\n  }\n}\n\nfunction getProjectedField(\n  info: GraphQLResolveInfo,\n  fieldName: string\n): Array<string> {\n  const selectionSet = info.fieldNodes[0].selectionSet\n  if (selectionSet) {\n    const fieldNodes = getFieldNodeByNameInSelectionSet(\n      selectionSet,\n      fieldName,\n      info\n    )\n\n    const returnType = getNullableType(info.returnType)\n\n    if (isObjectType(returnType) || isInterfaceType(returnType)) {\n      const field = returnType.getFields()[fieldName]\n      const fieldArg = field?.args?.find(arg => arg.name === `field`)\n      if (fieldArg) {\n        const fieldEnum = getNullableType(fieldArg.type)\n\n        if (isEnumType(fieldEnum)) {\n          return fieldNodes.reduce(\n            (acc: Array<string>, fieldNode: FieldNode) => {\n              const fieldArg = fieldNode.arguments?.find(\n                arg => arg.name.value === `field`\n              )\n              if (fieldArg?.value.kind === Kind.ENUM) {\n                const enumKey = fieldArg.value.value\n                const enumValue = fieldEnum.getValue(enumKey)\n                if (enumValue) {\n                  return [...acc, enumValue.value]\n                }\n              }\n              return acc\n            },\n            []\n          )\n        }\n      }\n    }\n  }\n\n  return []\n}\n\nfunction getFieldNodeByNameInSelectionSet(\n  selectionSet: SelectionSetNode,\n  fieldName: string,\n  info: GraphQLResolveInfo\n): Array<FieldNode> {\n  return selectionSet.selections.reduce(\n    (acc: Array<FieldNode>, selection: SelectionNode) => {\n      if (selection.kind === Kind.FRAGMENT_SPREAD) {\n        const fragmentDef = info.fragments[selection.name.value]\n        if (fragmentDef) {\n          return [\n            ...acc,\n            ...getFieldNodeByNameInSelectionSet(\n              fragmentDef.selectionSet,\n              fieldName,\n              info\n            ),\n          ]\n        }\n      } else if (selection.kind === Kind.INLINE_FRAGMENT) {\n        return [\n          ...acc,\n          ...getFieldNodeByNameInSelectionSet(\n            selection.selectionSet,\n            fieldName,\n            info\n          ),\n        ]\n      } /* FIELD_NODE */ else {\n        if (selection.name.value === fieldName) {\n          return [...acc, selection]\n        }\n      }\n      return acc\n    },\n    []\n  )\n}\n\nexport const defaultFieldResolver: GatsbyResolver<any, any> =\n  function defaultFieldResolver(source, args, context, info) {\n    if (\n      (typeof source == `object` && source !== null) ||\n      typeof source === `function`\n    ) {\n      if (info.from) {\n        if (info.fromNode) {\n          const node = context.nodeModel.findRootNodeAncestor(source)\n          if (!node) return null\n          return getValueAt(node, info.from)\n        }\n        return getValueAt(source, info.from)\n      }\n      const property = source[info.fieldName]\n      if (typeof property === `function`) {\n        return source[info.fieldName](args, context, info)\n      }\n      return property\n    }\n\n    return null\n  }\n\nlet WARNED_ABOUT_RESOLVERS = false\nfunction badResolverInvocationMessage(missingVar: string, path?: Path): string {\n  const resolverName = path ? `${pathToArray(path)} ` : ``\n  return `GraphQL Resolver ${resolverName}got called without \"${missingVar}\" argument. This might cause unexpected errors.\n\nIt's likely that this has happened in a schemaCustomization with manually invoked resolver. If manually invoking resolvers, it's best to invoke them as follows:\n\n  resolve(parent, args, context, info)\n\n`\n}\n\nexport function wrappingResolver<TSource, TArgs>(\n  resolver: GatsbyResolver<TSource, TArgs>\n): GatsbyResolver<TSource, TArgs> {\n  // Note: we explicitly make an attempt to prevent using the `async` keyword because often\n  //       it does not return a promise and this makes a significant difference at scale.\n  //       GraphQL will gracefully handle the resolver result of a promise or non-promise.\n\n  if (resolver[`isTracingResolver`]) {\n    return resolver\n  }\n\n  const wrappedTracingResolver = function wrappedTracingResolver(\n    parent,\n    args,\n    context,\n    info\n  ): Promise<any> {\n    if (!WARNED_ABOUT_RESOLVERS) {\n      if (!info) {\n        reporter.warn(badResolverInvocationMessage(`info`))\n        WARNED_ABOUT_RESOLVERS = true\n      } else if (!context) {\n        reporter.warn(badResolverInvocationMessage(`context`, info.path))\n        WARNED_ABOUT_RESOLVERS = true\n      }\n    }\n\n    let activity\n    let time\n    if (context?.tracer) {\n      activity = context.tracer.createResolverActivity(\n        info.path,\n        `${info.parentType.name}.${info.fieldName}`\n      )\n      activity.start()\n    }\n    if (context?.telemetryResolverTimings) {\n      time = process.hrtime.bigint()\n    }\n\n    const result = resolver(parent, args, context, info)\n\n    if (!activity && !time) {\n      return result\n    }\n\n    const endActivity = (): void => {\n      if (context?.telemetryResolverTimings) {\n        context.telemetryResolverTimings.push({\n          name: `${info.parentType}.${info.fieldName}`,\n          duration: Number(process.hrtime.bigint() - time) / 1000 / 1000,\n        })\n      }\n      if (activity) {\n        activity.end()\n      }\n    }\n    if (typeof result?.then === `function`) {\n      result.then(endActivity, endActivity)\n    } else {\n      endActivity()\n    }\n    return result\n  }\n\n  wrappedTracingResolver.isTracingResolver = true\n\n  return wrappedTracingResolver\n}\n\nexport const defaultResolver = wrappingResolver(defaultFieldResolver)\n"],"mappings":"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"}