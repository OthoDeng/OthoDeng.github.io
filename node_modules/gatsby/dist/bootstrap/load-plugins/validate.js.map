{"version":3,"file":"validate.js","names":["getGatsbyUpgradeVersion","entries","reduce","version","entry","api","semver","gt","getBadExports","plugin","pluginAPIKeys","apis","badExports","concat","_","difference","map","e","exportName","pluginName","name","pluginVersion","getErrorContext","exportType","currentAPIs","latestAPIs","ex","gatsbyUpgradeVersion","errors","fixes","forEach","similarities","stringSimilarity","findBestMatch","isDefaultPlugin","message","push","bestMatch","rating","target","sourceMessage","length","filter","Boolean","join","handleBadExports","hasBadExports","Object","keys","find","getLatestAPIs","toPairs","badItem","context","reporter","error","id","validatePluginsOptions","plugins","rootDir","newPlugins","Promise","all","gatsbyNode","resolvedPlugin","resolvePlugin","require","resolve","err","pluginOptionsSchema","subPluginPaths","Set","optionsSchema","Joi","extend","joi","type","base","array","items","alternatives","string","object","options","unknown","custom","arrayValue","helpers","schema","_flags","value","modulePath","module","normalizedPath","state","path","key","index","Array","isArray","ancestors","Error","add","console","log","default","args","$_setFlag","clone","configDir","parentDir","relative","isSchema","warn","describe","append","warning","validateOptionsSchema","validationWarnings","details","stripIndent","trackCli","valueString","subErrors","subPlugins","size","from","ValidationError","validationErrors","validateConfigPluginsOptions","config","process","exit","collatePluginAPIs","flattenedPlugins","node","browser","ssr","nodeAPIs","browserAPIs","ssrAPIs","pluginNodeExports","resolveModuleExports","resolvedCompiledGatsbyNode","mode","pluginBrowserExports","pluginSSRExports","intersection","handleMultipleReplaceRenderers","rendererPlugins","includes","env","NODE_ENV","ignorable","slice","messages","fp","i","skipSSR","m","warnOnIncompatiblePeerDependency","packageJSON","gatsbyPeerDependency","get","isWorker","satisfies","gatsbyVersion","includePrerelease"],"sources":["../../../src/bootstrap/load-plugins/validate.ts"],"sourcesContent":["import _ from \"lodash\"\nimport path from \"path\"\nimport * as semver from \"semver\"\nimport * as stringSimilarity from \"string-similarity\"\nimport { version as gatsbyVersion } from \"gatsby/package.json\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { validateOptionsSchema, Joi } from \"gatsby-plugin-utils\"\nimport { IPluginRefObject } from \"gatsby-plugin-utils/dist/types\"\nimport { stripIndent } from \"common-tags\"\nimport { trackCli } from \"gatsby-telemetry\"\nimport { isWorker } from \"gatsby-worker\"\nimport { resolveModuleExports } from \"../resolve-module-exports\"\nimport { getLatestAPIs } from \"../../utils/get-latest-apis\"\nimport { GatsbyNode, PackageJson } from \"../../../\"\nimport {\n  IPluginInfo,\n  IFlattenedPlugin,\n  IPluginInfoOptions,\n  ISiteConfig,\n} from \"./types\"\nimport { resolvePlugin } from \"./resolve-plugin\"\n\ninterface IApi {\n  version?: string\n}\n\nexport interface IEntry {\n  exportName: string\n  pluginName: string\n  pluginVersion: string\n  api?: IApi\n}\n\nexport type ExportType = \"node\" | \"browser\" | \"ssr\"\n\ntype IEntryMap = {\n  [exportType in ExportType]: Array<IEntry>\n}\n\nexport type ICurrentAPIs = {\n  [exportType in ExportType]: Array<string>\n}\n\nconst getGatsbyUpgradeVersion = (entries: ReadonlyArray<IEntry>): string =>\n  entries.reduce((version, entry) => {\n    if (entry.api && entry.api.version) {\n      return semver.gt(entry.api.version, version || `0.0.0`)\n        ? entry.api.version\n        : version\n    }\n    return version\n  }, ``)\n\n// Given a plugin object, an array of the API names it exports and an\n// array of valid API names, return an array of invalid API exports.\nfunction getBadExports(\n  plugin: IPluginInfo,\n  pluginAPIKeys: ReadonlyArray<string>,\n  apis: ReadonlyArray<string>\n): Array<IEntry> {\n  let badExports: Array<IEntry> = []\n  // Discover any exports from plugins which are not \"known\"\n  badExports = badExports.concat(\n    _.difference(pluginAPIKeys, apis).map(e => {\n      return {\n        exportName: e,\n        pluginName: plugin.name,\n        pluginVersion: plugin.version,\n      }\n    })\n  )\n  return badExports\n}\n\nfunction getErrorContext(\n  badExports: Array<IEntry>,\n  exportType: ExportType,\n  currentAPIs: ICurrentAPIs,\n  latestAPIs: { [exportType in ExportType]: { [exportName: string]: IApi } }\n): {\n  errors: Array<string>\n  entries: Array<IEntry>\n  exportType: ExportType\n  fixes: Array<string>\n  sourceMessage: string\n} {\n  const entries = badExports.map(ex => {\n    return {\n      ...ex,\n      api: latestAPIs[exportType][ex.exportName],\n    }\n  })\n\n  const gatsbyUpgradeVersion = getGatsbyUpgradeVersion(entries)\n  const errors: Array<string> = []\n  const fixes = gatsbyUpgradeVersion\n    ? [`npm install gatsby@^${gatsbyUpgradeVersion}`]\n    : []\n\n  entries.forEach(entry => {\n    const similarities = stringSimilarity.findBestMatch(\n      entry.exportName,\n      currentAPIs[exportType]\n    )\n    const isDefaultPlugin = entry.pluginName == `default-site-plugin`\n\n    const message = entry.api\n      ? entry.api.version\n        ? `was introduced in gatsby@${entry.api.version}`\n        : `is not available in your version of Gatsby`\n      : `is not a known API`\n\n    if (isDefaultPlugin) {\n      errors.push(\n        `- Your local gatsby-${exportType}.js is using the API \"${entry.exportName}\" which ${message}.`\n      )\n    } else {\n      errors.push(\n        `- The plugin ${entry.pluginName}@${entry.pluginVersion} is using the API \"${entry.exportName}\" which ${message}.`\n      )\n    }\n\n    if (similarities.bestMatch.rating > 0.5) {\n      fixes.push(\n        `Rename \"${entry.exportName}\" -> \"${similarities.bestMatch.target}\"`\n      )\n    }\n  })\n\n  return {\n    errors,\n    entries,\n    exportType,\n    fixes,\n    // note: this is a fallback if gatsby-cli is not updated with structured error\n    sourceMessage: [\n      `Your plugins must export known APIs from their gatsby-node.js.`,\n    ]\n      .concat(errors)\n      .concat(\n        fixes.length > 0\n          ? [`\\n`, `Some of the following may help fix the error(s):`, ...fixes]\n          : []\n      )\n      .filter(Boolean)\n      .join(`\\n`),\n  }\n}\n\nexport async function handleBadExports({\n  currentAPIs,\n  badExports,\n}: {\n  currentAPIs: ICurrentAPIs\n  badExports: { [api in ExportType]: Array<IEntry> }\n}): Promise<void> {\n  const hasBadExports = Object.keys(badExports).find(\n    api => badExports[api].length > 0\n  )\n  if (hasBadExports) {\n    const latestAPIs = await getLatestAPIs()\n    // Output error messages for all bad exports\n    _.toPairs(badExports).forEach(badItem => {\n      const [exportType, entries] = badItem\n      if (entries.length > 0) {\n        const context = getErrorContext(\n          entries,\n          exportType as keyof typeof badExports,\n          currentAPIs,\n          latestAPIs\n        )\n        reporter.error({\n          id: `11329`,\n          context,\n        })\n      }\n    })\n  }\n}\n\nasync function validatePluginsOptions(\n  plugins: Array<IPluginRefObject>,\n  rootDir: string\n): Promise<{\n  errors: number\n  plugins: Array<IPluginRefObject>\n}> {\n  let errors = 0\n  const newPlugins = await Promise.all(\n    plugins.map(async plugin => {\n      let gatsbyNode\n      try {\n        const resolvedPlugin = resolvePlugin(plugin, rootDir)\n        gatsbyNode = require(`${resolvedPlugin.resolve}/gatsby-node`)\n      } catch (err) {\n        gatsbyNode = {}\n      }\n\n      if (!gatsbyNode.pluginOptionsSchema) return plugin\n\n      const subPluginPaths = new Set<string>()\n\n      let optionsSchema = (\n        gatsbyNode.pluginOptionsSchema as Exclude<\n          GatsbyNode[\"pluginOptionsSchema\"],\n          undefined\n        >\n      )({\n        Joi: Joi.extend(joi => {\n          return {\n            type: `subPlugins`,\n            base: joi\n              .array()\n              .items(\n                joi.alternatives(\n                  joi.string(),\n                  joi.object({\n                    resolve: Joi.string(),\n                    options: Joi.object({}).unknown(true),\n                  })\n                )\n              )\n              .custom((arrayValue, helpers) => {\n                const entry = helpers.schema._flags.entry\n                return arrayValue.map(value => {\n                  if (typeof value === `string`) {\n                    value = { resolve: value }\n                  }\n\n                  try {\n                    const resolvedPlugin = resolvePlugin(value, rootDir)\n                    const modulePath = require.resolve(\n                      `${resolvedPlugin.resolve}${entry ? `/${entry}` : ``}`\n                    )\n                    value.modulePath = modulePath\n                    value.module = require(modulePath)\n\n                    const normalizedPath = helpers.state.path\n                      .map((key, index) => {\n                        // if subplugin is part of an array - swap concrete index key with `[]`\n                        if (\n                          typeof key === `number` &&\n                          Array.isArray(\n                            helpers.state.ancestors[\n                              helpers.state.path.length - index - 1\n                            ]\n                          )\n                        ) {\n                          if (index !== helpers.state.path.length - 1) {\n                            throw new Error(\n                              `No support for arrays not at the end of path`\n                            )\n                          }\n                          return `[]`\n                        }\n\n                        return key\n                      })\n                      .join(`.`)\n\n                    subPluginPaths.add(normalizedPath)\n                  } catch (err) {\n                    console.log(err)\n                  }\n\n                  return value\n                })\n              }, `Gatsby specific subplugin validation`)\n              .default([]),\n            args: (schema: any, args: any): any => {\n              if (\n                args?.entry &&\n                schema &&\n                typeof schema === `object` &&\n                schema.$_setFlag\n              ) {\n                return schema.$_setFlag(`entry`, args.entry, { clone: true })\n              }\n              return schema\n            },\n          }\n        }),\n      })\n\n      // If rootDir and plugin.parentDir are the same, i.e. if this is a plugin a user configured in their gatsby-config.js (and not a sub-theme that added it), this will be \"\"\n      // Otherwise, this will contain (and show) the relative path\n      const configDir =\n        (plugin.parentDir &&\n          rootDir &&\n          path.relative(rootDir, plugin.parentDir)) ||\n        null\n\n      if (!Joi.isSchema(optionsSchema) || optionsSchema.type !== `object`) {\n        // Validate correct usage of pluginOptionsSchema\n        reporter.warn(\n          `Plugin \"${plugin.resolve}\" has an invalid options schema so we cannot verify your configuration for it.`\n        )\n        return plugin\n      }\n\n      try {\n        if (!optionsSchema.describe().keys.plugins) {\n          // All plugins have \"plugins: []\"\" added to their options in load.ts, even if they\n          // do not have subplugins. We add plugins to the schema if it does not exist already\n          // to make sure they pass validation.\n          optionsSchema = optionsSchema.append({\n            plugins: Joi.array().length(0),\n          })\n        }\n\n        const { value, warning } = await validateOptionsSchema(\n          optionsSchema,\n          (plugin.options as IPluginInfoOptions) || {}\n        )\n\n        plugin.options = value\n\n        // Handle unknown key warnings\n        const validationWarnings = warning?.details\n\n        if (validationWarnings?.length > 0) {\n          reporter.warn(\n            stripIndent(`\n        Warning: there are unknown plugin options for \"${plugin.resolve}\"${\n              configDir ? `, configured by ${configDir}` : ``\n            }: ${validationWarnings\n              .map(error => error.path.join(`.`))\n              .join(`, `)}\n        Please open an issue at https://ghub.io/${\n          plugin.resolve\n        } if you believe this option is valid.\n      `)\n          )\n          trackCli(`UNKNOWN_PLUGIN_OPTION`, {\n            name: plugin.resolve,\n            valueString: validationWarnings\n              .map(error => error.path.join(`.`))\n              .join(`, `),\n          })\n          // We do not increment errors++ here as we do not want to process.exit if there are only warnings\n        }\n\n        // Validate subplugins\n        if (plugin.options?.plugins) {\n          const { errors: subErrors, plugins: subPlugins } =\n            await validatePluginsOptions(\n              plugin.options.plugins as Array<IPluginRefObject>,\n              rootDir\n            )\n          plugin.options.plugins = subPlugins\n          if (subPlugins.length > 0) {\n            subPluginPaths.add(`plugins`)\n          }\n          errors += subErrors\n        }\n        if (subPluginPaths.size > 0) {\n          plugin.subPluginPaths = Array.from(subPluginPaths)\n        }\n      } catch (error) {\n        if (error instanceof Joi.ValidationError) {\n          const validationErrors = error.details\n          if (validationErrors.length > 0) {\n            reporter.error({\n              id: `11331`,\n              context: {\n                configDir,\n                validationErrors,\n                pluginName: plugin.resolve,\n              },\n            })\n            errors++\n          }\n          return plugin\n        }\n\n        throw error\n      }\n\n      return plugin\n    })\n  )\n  return { errors, plugins: newPlugins }\n}\n\nexport async function validateConfigPluginsOptions(\n  config: ISiteConfig = {},\n  rootDir: string\n): Promise<void> {\n  if (!config.plugins) return\n\n  const { errors, plugins } = await validatePluginsOptions(\n    config.plugins,\n    rootDir\n  )\n\n  config.plugins = plugins\n\n  if (errors > 0) {\n    process.exit(1)\n  }\n}\n\n/**\n * Identify which APIs each plugin exports\n */\nexport function collatePluginAPIs({\n  currentAPIs,\n  flattenedPlugins,\n}: {\n  currentAPIs: ICurrentAPIs\n  flattenedPlugins: Array<IPluginInfo & Partial<IFlattenedPlugin>>\n}): { flattenedPlugins: Array<IFlattenedPlugin>; badExports: IEntryMap } {\n  // Get a list of bad exports\n  const badExports: IEntryMap = {\n    node: [],\n    browser: [],\n    ssr: [],\n  }\n\n  flattenedPlugins.forEach(plugin => {\n    plugin.nodeAPIs = []\n    plugin.browserAPIs = []\n    plugin.ssrAPIs = []\n\n    // Discover which APIs this plugin implements and store an array against\n    // the plugin node itself *and* in an API to plugins map for faster lookups\n    // later.\n    const pluginNodeExports = resolveModuleExports(\n      plugin.resolvedCompiledGatsbyNode ?? `${plugin.resolve}/gatsby-node`,\n      {\n        mode: `require`,\n      }\n    )\n    const pluginBrowserExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-browser`\n    )\n    const pluginSSRExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-ssr`\n    )\n\n    if (pluginNodeExports.length > 0) {\n      plugin.nodeAPIs = _.intersection(pluginNodeExports, currentAPIs.node)\n      badExports.node = badExports.node.concat(\n        getBadExports(plugin, pluginNodeExports, currentAPIs.node)\n      ) // Collate any bad exports\n    }\n\n    if (pluginBrowserExports.length > 0) {\n      plugin.browserAPIs = _.intersection(\n        pluginBrowserExports,\n        currentAPIs.browser\n      )\n      badExports.browser = badExports.browser.concat(\n        getBadExports(plugin, pluginBrowserExports, currentAPIs.browser)\n      ) // Collate any bad exports\n    }\n\n    if (pluginSSRExports.length > 0) {\n      plugin.ssrAPIs = _.intersection(pluginSSRExports, currentAPIs.ssr)\n      badExports.ssr = badExports.ssr.concat(\n        getBadExports(plugin, pluginSSRExports, currentAPIs.ssr)\n      ) // Collate any bad exports\n    }\n  })\n\n  return {\n    flattenedPlugins: flattenedPlugins as Array<IFlattenedPlugin>,\n    badExports,\n  }\n}\n\nexport const handleMultipleReplaceRenderers = ({\n  flattenedPlugins,\n}: {\n  flattenedPlugins: Array<IFlattenedPlugin>\n}): Array<IFlattenedPlugin> => {\n  // multiple replaceRenderers may cause problems at build time\n  const rendererPlugins = flattenedPlugins\n    .filter(plugin => plugin.ssrAPIs.includes(`replaceRenderer`))\n    .map(plugin => plugin.name)\n  if (rendererPlugins.length > 1) {\n    if (rendererPlugins.includes(`default-site-plugin`)) {\n      reporter.warn(`replaceRenderer API found in these plugins:`)\n      reporter.warn(rendererPlugins.join(`, `))\n      reporter.warn(\n        `This might be an error, see: https://www.gatsbyjs.com/docs/debugging-replace-renderer-api/`\n      )\n    } else {\n      console.log(``)\n      reporter.error(\n        `Gatsby's replaceRenderer API is implemented by multiple plugins:`\n      )\n      reporter.error(rendererPlugins.join(`, `))\n      reporter.error(`This will break your build`)\n      reporter.error(\n        `See: https://www.gatsbyjs.com/docs/debugging-replace-renderer-api/`\n      )\n      if (process.env.NODE_ENV === `production`) process.exit(1)\n    }\n\n    // Now update plugin list so only final replaceRenderer will run\n    const ignorable = rendererPlugins.slice(0, -1)\n\n    // For each plugin in ignorable, set a skipSSR flag to true\n    // This prevents apiRunnerSSR() from attempting to run it later\n    const messages: Array<string> = []\n    flattenedPlugins.forEach((fp, i) => {\n      if (ignorable.includes(fp.name)) {\n        messages.push(\n          `Duplicate replaceRenderer found, skipping gatsby-ssr.js for plugin: ${fp.name}`\n        )\n        flattenedPlugins[i].skipSSR = true\n      }\n    })\n    if (messages.length > 0) {\n      console.log(``)\n      messages.forEach(m => reporter.warn(m))\n      console.log(``)\n    }\n  }\n\n  return flattenedPlugins\n}\n\nexport function warnOnIncompatiblePeerDependency(\n  name: string,\n  packageJSON: PackageJson\n): void {\n  // Note: In the future the peer dependency should be enforced for all plugins.\n  const gatsbyPeerDependency = _.get(packageJSON, `peerDependencies.gatsby`)\n  if (\n    !isWorker &&\n    gatsbyPeerDependency &&\n    !semver.satisfies(gatsbyVersion, gatsbyPeerDependency, {\n      includePrerelease: true,\n    })\n  ) {\n    reporter.warn(\n      `Plugin ${name} is not compatible with your gatsby version ${gatsbyVersion} - It requires gatsby@${gatsbyPeerDependency}`\n    )\n  }\n}\n"],"mappings":"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"}