{"version":3,"file":"ts-codegen.js","names":["OUTPUT_PATH","NAMESPACE","DEFAULT_TYPESCRIPT_CONFIG","avoidOptionals","immutableTypes","maybeValue","noExport","enumsAsTypes","scalars","Date","JSON","GatsbyImageData","useTypeImports","DEFAULT_TYPESCRIPT_OPERATIONS_CONFIG","exportFragmentSpreadSubTypes","writeTypeScriptTypes","directory","schema","definitions","pluginConfig","pluginMap","add","require","typescript","typescriptOperations","plugins","placement","content","filename","join","gatsbyNodeDocuments","loadDocuments","loaders","CodeFileLoader","pluckConfig","modules","name","identifier","e","documents","filterTargetDefinitions","values","map","definitionMeta","document","kind","Kind","DOCUMENT","def","hash","toString","codegenOptions","undefined","schemaAst","stabilizeSchema","concat","config","namingConvention","typeNames","enumValues","transformUnderscore","addUnderscoreToArgsType","skipTypename","result","codegen","fs","outputFile"],"sources":["../../../src/utils/graphql-typegen/ts-codegen.ts"],"sourcesContent":["import * as fs from \"fs-extra\"\nimport { join } from \"path\"\nimport { codegen } from \"@graphql-codegen/core\"\nimport { GraphQLSchema, Kind } from \"graphql\"\nimport type { Types } from \"@graphql-codegen/plugin-helpers\"\nimport type { TypeScriptPluginConfig } from \"@graphql-codegen/typescript/config\"\nimport type { TypeScriptDocumentsPluginConfig } from \"@graphql-codegen/typescript-operations/config\"\nimport { CodeFileLoader } from \"@graphql-tools/code-file-loader\"\nimport { loadDocuments } from \"@graphql-tools/load\"\nimport { IDefinitionMeta, IStateProgram } from \"../../redux/types\"\nimport { filterTargetDefinitions, stabilizeSchema } from \"./utils\"\n\nconst OUTPUT_PATH = `src/gatsby-types.d.ts`\nconst NAMESPACE = `Queries`\n\n// These override the defaults from\n// https://www.graphql-code-generator.com/plugins/typescript\nconst DEFAULT_TYPESCRIPT_CONFIG: Readonly<TypeScriptPluginConfig> = {\n  // <Maybe> Type is enough\n  avoidOptionals: true,\n  // Types come from the data layer so they can't be modified\n  immutableTypes: true,\n  // TODO: Better maybeValue\n  maybeValue: `T | null`,\n  // We'll want to re-export ourselves\n  noExport: true,\n  // Recommended for .d.ts files\n  enumsAsTypes: true,\n  scalars: {\n    Date: `string`,\n    JSON: `Record<string, unknown>`,\n    GatsbyImageData: `import('gatsby-plugin-image').IGatsbyImageData`,\n  },\n  // import type {} syntax is nicer\n  useTypeImports: true,\n}\n\nconst DEFAULT_TYPESCRIPT_OPERATIONS_CONFIG: Readonly<TypeScriptDocumentsPluginConfig> =\n  {\n    ...DEFAULT_TYPESCRIPT_CONFIG,\n    exportFragmentSpreadSubTypes: true,\n  }\n\nexport async function writeTypeScriptTypes(\n  directory: IStateProgram[\"directory\"],\n  schema: GraphQLSchema,\n  definitions: Map<string, IDefinitionMeta>\n): Promise<void> {\n  const pluginConfig: Pick<Types.GenerateOptions, \"plugins\" | \"pluginMap\"> = {\n    pluginMap: {\n      add: require(`@graphql-codegen/add`),\n      typescript: require(`@graphql-codegen/typescript`),\n      typescriptOperations: require(`@graphql-codegen/typescript-operations`),\n    },\n    plugins: [\n      {\n        add: {\n          placement: `prepend`,\n          content: `/* eslint-disable */\\n`,\n        },\n      },\n      {\n        add: {\n          placement: `prepend`,\n          content: `/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */\\n`,\n        },\n      },\n      {\n        add: {\n          placement: `prepend`,\n          content: `declare namespace ${NAMESPACE} {\\n`,\n        },\n      },\n      {\n        typescript: DEFAULT_TYPESCRIPT_CONFIG,\n      },\n      {\n        typescriptOperations: DEFAULT_TYPESCRIPT_OPERATIONS_CONFIG,\n      },\n      {\n        add: {\n          placement: `append`,\n          content: `\\n}\\n`,\n        },\n      },\n    ],\n  }\n\n  const filename = join(directory, OUTPUT_PATH)\n\n  let gatsbyNodeDocuments: Array<Types.DocumentFile> = []\n  // The loadDocuments + CodeFileLoader looks for graphql(``) functions inside the gatsby-node.ts files\n  // And then extracts the queries into documents\n  // TODO: This codepath can be made obsolete if Gatsby itself already places the queries inside gatsby-node into the `definitions`\n  try {\n    gatsbyNodeDocuments = await loadDocuments(\n      [`./gatsby-node.ts`, `./plugins/**/gatsby-node.ts`],\n      {\n        loaders: [\n          new CodeFileLoader({\n            // Configures https://www.graphql-tools.com/docs/graphql-tag-pluck to only check graphql function from Gatsby\n            pluckConfig: {\n              modules: [{ name: `gatsby`, identifier: `graphql` }],\n            },\n          }),\n        ],\n      }\n    )\n  } catch (e) {\n    // These files might not exist, so just skip this\n  }\n\n  const documents: Array<Types.DocumentFile> = [\n    ...filterTargetDefinitions(definitions).values(),\n  ].map(definitionMeta => {\n    return {\n      document: {\n        kind: Kind.DOCUMENT,\n        definitions: [definitionMeta.def],\n      },\n      hash: definitionMeta.hash.toString(),\n    }\n  })\n\n  const codegenOptions: Omit<Types.GenerateOptions, \"plugins\" | \"pluginMap\"> = {\n    // @ts-ignore - Incorrect types\n    schema: undefined,\n    schemaAst: stabilizeSchema(schema),\n    documents: documents.concat(gatsbyNodeDocuments),\n    filename,\n    config: {\n      namingConvention: {\n        typeNames: `keep`,\n        enumValues: `keep`,\n        transformUnderscore: false,\n      },\n      addUnderscoreToArgsType: true,\n      skipTypename: true,\n    },\n  }\n\n  const result = await codegen({\n    ...pluginConfig,\n    ...codegenOptions,\n  })\n\n  await fs.outputFile(filename, result)\n}\n"],"mappings":"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"}