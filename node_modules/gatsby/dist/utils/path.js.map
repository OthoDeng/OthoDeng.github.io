{"version":3,"sources":["../../src/utils/path.ts"],"names":["withBasePath","basePath","paths","withTrailingSlash","posixJoinWithLeadingSlash","path","posix","join","map","segment","index","getCommonDir","path1","path2","path1Segments","split","path2Segments","i","length","toLowerCase","joined","slice"],"mappings":";;;;;;;AAAA;;AACA;;AAEO,MAAMA,YAAY,GAAIC,QAAD,IAAsB,CAChD,GAAGC,KAD6C,KAErC,+BAASD,QAAT,EAAmB,GAAGC,KAAtB,CAFN;;;;AAIA,MAAMC,iBAAiB,GAAIF,QAAD,IAA+B,GAAEA,QAAS,GAApE;;;;AAEP,MAAMG,yBAAyB,GAAIF,KAAD,IAChCG,cAAKC,KAAL,CAAWC,IAAX,CACE,GAAGL,KAAK,CAACM,GAAN,CAAU,CAACC,OAAD,EAAUC,KAAV,KACXD,OAAO,KAAM,EAAb,IAAkBC,KAAK,KAAK,CAA5B,GAAiC,GAAjC,GAAsCD,OADrC,CADL,CADF;;AAOO,MAAME,YAAY,GAAG,CAACC,KAAD,EAAgBC,KAAhB,KAA0C;AACpE,QAAMC,aAAa,GAAGF,KAAK,CAACG,KAAN,CAAY,OAAZ,CAAtB;AACA,QAAMC,aAAa,GAAGH,KAAK,CAACE,KAAN,CAAY,OAAZ,CAAtB;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,aAAa,CAACI,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,QAAIA,CAAC,IAAID,aAAa,CAACE,MAAvB,EAA+B;AAC7B,aAAOd,yBAAyB,CAACY,aAAD,CAAhC;AACD,KAFD,MAEO,IACLF,aAAa,CAACG,CAAD,CAAb,CAAiBE,WAAjB,OAAmCH,aAAa,CAACC,CAAD,CAAb,CAAiBE,WAAjB,EAD9B,EAEL;AACA,YAAMC,MAAM,GAAGN,aAAa,CAACO,KAAd,CAAoB,CAApB,EAAuBJ,CAAvB,CAAf;AACA,aAAOb,yBAAyB,CAACgB,MAAD,CAAhC;AACD;AACF;;AAED,SAAOhB,yBAAyB,CAACU,aAAD,CAAhC;AACD,CAhBM","sourcesContent":["import path from \"path\"\nimport { joinPath } from \"gatsby-core-utils\"\n\nexport const withBasePath = (basePath: string) => (\n  ...paths: string[]\n): string => joinPath(basePath, ...paths)\n\nexport const withTrailingSlash = (basePath: string): string => `${basePath}/`\n\nconst posixJoinWithLeadingSlash = (paths: string[]): string =>\n  path.posix.join(\n    ...paths.map((segment, index) =>\n      segment === `` && index === 0 ? `/` : segment\n    )\n  )\n\nexport const getCommonDir = (path1: string, path2: string): string => {\n  const path1Segments = path1.split(/[/\\\\]/)\n  const path2Segments = path2.split(/[/\\\\]/)\n\n  for (let i = 0; i < path1Segments.length; i++) {\n    if (i >= path2Segments.length) {\n      return posixJoinWithLeadingSlash(path2Segments)\n    } else if (\n      path1Segments[i].toLowerCase() !== path2Segments[i].toLowerCase()\n    ) {\n      const joined = path1Segments.slice(0, i)\n      return posixJoinWithLeadingSlash(joined)\n    }\n  }\n\n  return posixJoinWithLeadingSlash(path1Segments)\n}\n"],"file":"path.js"}