{"version":3,"file":"query.js","names":["DbComparator","DB_COMPARATOR_VALUES","Set","Object","values","isDbComparator","value","has","createDbQueriesFromObject","filter","createDbQueriesFromObjectNested","path","keys","getOwnPropertyNames","_","flatMap","key","queries","map","query","type","nestedQuery","comparator","concat","dbQueryToDottedField","currentQuery","push","join","getFilterStatement","dbQuery","prefixResolvedFields","resolvedFields","dottedFields","objectToDottedField","dottedFieldKeys","forEach","prefixPath","some","dottedKey","startsWith","unshift","prepareQueryArgs","filterFields","filters","isPlainObject","Error","prepareRegex","makeRe","obj","result","pathResult","comparatorSpecificity","EQ","IN","GTE","LTE","GT","LT","NIN","NE","sortBySpecificity","all","sort","compareBySpecificityDesc","a","b","aComparator","bComparator","aSpecificity","bSpecificity"],"sources":["../../../src/datastore/common/query.ts"],"sourcesContent":["import * as _ from \"lodash\"\nimport { prepareRegex } from \"../../utils/prepare-regex\"\nimport { makeRe } from \"micromatch\"\n\nexport interface IDbQueryQuery {\n  type: \"query\"\n  path: Array<string>\n  query: IDbFilterStatement\n}\n\nexport interface IDbQueryElemMatch {\n  type: \"elemMatch\"\n  path: Array<string>\n  nestedQuery: DbQuery\n}\n\nexport type DbQuery = IDbQueryQuery | IDbQueryElemMatch\n\nexport enum DbComparator {\n  EQ = `$eq`,\n  NE = `$ne`,\n  GT = `$gt`,\n  GTE = `$gte`,\n  LT = `$lt`,\n  LTE = `$lte`,\n  IN = `$in`,\n  NIN = `$nin`,\n  REGEX = `$regex`,\n  GLOB = `$glob`,\n}\n\n// TODO: merge with DbComparatorValue\nexport type FilterValueNullable =\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n  | RegExp // Only valid for $regex\n  | Array<string | number | boolean | null | undefined>\n\n// This is filter value in most cases\nexport type FilterValue =\n  | string\n  | number\n  | boolean\n  | RegExp // Only valid for $regex\n  | Array<string | number | boolean>\n\n// The value is an object with arbitrary keys that are either filter values or,\n// recursively, an object with the same struct. Ie. `{a: {a: {a: 2}}}`\nexport interface IInputQuery {\n  [key: string]: FilterValueNullable | IInputQuery\n}\n// Similar to IInputQuery except the comparator leaf nodes will have their\n// key prefixed with `$` and their value, in some cases, normalized.\nexport interface IPreparedQueryArg {\n  [key: string]: FilterValueNullable | IPreparedQueryArg\n}\n\nconst DB_COMPARATOR_VALUES: Set<string> = new Set(Object.values(DbComparator))\n\nfunction isDbComparator(value: string): value is DbComparator {\n  return DB_COMPARATOR_VALUES.has(value)\n}\n\nexport type DbComparatorValue = string | number | boolean | RegExp | null\n\nexport interface IDbFilterStatement {\n  comparator: DbComparator\n  value: DbComparatorValue | Array<DbComparatorValue>\n}\n\n/**\n * Converts a nested mongo args object into array of DbQuery objects,\n * structured representation of each distinct path of the query. We convert\n * nested objects with multiple keys to separate instances.\n */\nexport function createDbQueriesFromObject(\n  filter: Record<string, any>\n): Array<DbQuery> {\n  return createDbQueriesFromObjectNested(filter)\n}\n\nfunction createDbQueriesFromObjectNested(\n  filter: Record<string, any>,\n  path: Array<string> = []\n): Array<DbQuery> {\n  const keys = Object.getOwnPropertyNames(filter)\n  return _.flatMap(keys, (key: string): Array<DbQuery> => {\n    if (key === `$elemMatch`) {\n      const queries = createDbQueriesFromObjectNested(filter[key])\n      return queries.map(query => {\n        return {\n          type: `elemMatch`,\n          path: path,\n          nestedQuery: query,\n        }\n      })\n    } else if (isDbComparator(key)) {\n      return [\n        {\n          type: `query`,\n          path,\n          query: {\n            comparator: key,\n            value: filter[key],\n          },\n        },\n      ]\n    } else {\n      return createDbQueriesFromObjectNested(filter[key], path.concat([key]))\n    }\n  })\n}\n\n/**\n * Takes a DbQuery structure and returns a dotted representation of a field referenced in this query.\n *\n * Example:\n * ```js\n *   const query = createDbQueriesFromObject({\n *     foo: { $elemMatch: { id: { $eq: 5 }, test: { $gt: 42 } } },\n *     bar: { $in: [`bar`] }\n *   })\n *   const result = query.map(dbQueryToDottedField)\n * ```\n * Returns:\n *   [`foo.id`, `foo.test`, `bar`]\n */\nexport function dbQueryToDottedField(query: DbQuery): string {\n  const path: Array<string> = [...query.path]\n  let currentQuery = query\n  while (currentQuery.type === `elemMatch`) {\n    currentQuery = currentQuery.nestedQuery\n    path.push(...currentQuery.path)\n  }\n  return path.join(`.`)\n}\n\nexport function getFilterStatement(dbQuery: DbQuery): IDbFilterStatement {\n  let currentQuery = dbQuery\n  while (currentQuery.type !== `query`) {\n    currentQuery = currentQuery.nestedQuery\n  }\n  return currentQuery.query\n}\n\nexport function prefixResolvedFields(\n  queries: Array<DbQuery>,\n  resolvedFields: Record<string, unknown>\n): Array<DbQuery> {\n  const dottedFields = objectToDottedField(resolvedFields)\n  const dottedFieldKeys = Object.getOwnPropertyNames(dottedFields)\n  queries.forEach(query => {\n    const prefixPath = query.path.join(`.`)\n    if (\n      dottedFields[prefixPath] ||\n      (dottedFieldKeys.some(dottedKey => dottedKey.startsWith(prefixPath)) &&\n        query.type === `elemMatch`) ||\n      dottedFieldKeys.some(dottedKey => prefixPath.startsWith(dottedKey))\n    ) {\n      query.path.unshift(`__gatsby_resolved`)\n    }\n  })\n  return queries\n}\n\n/**\n * Transforms filters coming from input GraphQL query to mongodb-compatible format\n * (by prefixing comparators with \"$\").\n *\n * Example:\n *   { foo: { eq: 5 } } -> { foo: { $eq: 5 }}\n */\nexport function prepareQueryArgs(\n  filterFields: Array<IInputQuery> | IInputQuery = {}\n): IPreparedQueryArg {\n  const filters = {}\n  Object.keys(filterFields).forEach(key => {\n    const value = filterFields[key]\n    if (_.isPlainObject(value)) {\n      filters[key === `elemMatch` ? `$elemMatch` : key] = prepareQueryArgs(\n        value as IInputQuery\n      )\n    } else {\n      switch (key) {\n        case `regex`:\n          if (typeof value !== `string`) {\n            throw new Error(\n              `The $regex comparator is expecting the regex as a string, not an actual regex or anything else`\n            )\n          }\n          filters[`$regex`] = prepareRegex(value)\n          break\n        case `glob`:\n          filters[`$regex`] = makeRe(value)\n          break\n        default:\n          filters[`$${key}`] = value\n      }\n    }\n  })\n  return filters\n}\n\n// Converts a nested mongo args object into a dotted notation. acc\n// (accumulator) must be a reference to an empty object. The converted\n// fields will be added to it. E.g\n//\n// {\n//   internal: {\n//     type: {\n//       $eq: \"TestNode\"\n//     },\n//     content: {\n//       $regex: new MiniMatch(v)\n//     }\n//   },\n//   id: {\n//     $regex: newMiniMatch(v)\n//   }\n// }\n//\n// After execution, acc would be:\n//\n// {\n//   \"internal.type\": {\n//     $eq: \"TestNode\"\n//   },\n//   \"internal.content\": {\n//     $regex: new MiniMatch(v)\n//   },\n//   \"id\": {\n//     $regex: // as above\n//   }\n// }\n\n// Like above, but doesn't handle $elemMatch\nexport function objectToDottedField(\n  obj: Record<string, unknown>,\n  path: Array<string> = []\n): Record<string, unknown> {\n  let result = {}\n  Object.keys(obj).forEach(key => {\n    const value = obj[key]\n    if (_.isPlainObject(value)) {\n      const pathResult = objectToDottedField(\n        value as Record<string, unknown>,\n        path.concat(key)\n      )\n      result = {\n        ...result,\n        ...pathResult,\n      }\n    } else {\n      result[path.concat(key).join(`.`)] = value\n    }\n  })\n  return result\n}\n\nconst comparatorSpecificity = {\n  [DbComparator.EQ]: 80,\n  [DbComparator.IN]: 70,\n  [DbComparator.GTE]: 60,\n  [DbComparator.LTE]: 50,\n  [DbComparator.GT]: 40,\n  [DbComparator.LT]: 30,\n  [DbComparator.NIN]: 20,\n  [DbComparator.NE]: 10,\n}\n\nexport function sortBySpecificity(all: Array<DbQuery>): Array<DbQuery> {\n  return [...all].sort(compareBySpecificityDesc)\n}\n\nfunction compareBySpecificityDesc(a: DbQuery, b: DbQuery): number {\n  const aComparator = getFilterStatement(a).comparator\n  const bComparator = getFilterStatement(b).comparator\n  if (aComparator === bComparator) {\n    return 0\n  }\n  const aSpecificity = comparatorSpecificity[aComparator]\n  const bSpecificity = comparatorSpecificity[bComparator]\n  if (!aSpecificity || !bSpecificity) {\n    throw new Error(\n      `Unexpected comparator pair: ${aComparator}, ${bComparator}`\n    )\n  }\n  return aSpecificity > bSpecificity ? -1 : 1\n}\n"],"mappings":"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"}