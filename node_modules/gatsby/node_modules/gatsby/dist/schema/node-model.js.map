{"version":3,"sources":["../../src/schema/node-model.js"],"names":["_","require","isAbstractType","GraphQLOutputType","GraphQLUnionType","GraphQLList","getNamedType","getNullableType","isCompositeType","invariant","reporter","LocalNodeModel","constructor","schema","schemaComposer","createPageDependency","createPageDependencyActionCreator","_rootNodeMap","WeakMap","_trackedRootNodes","Set","_prepareNodesQueues","_prepareNodesPromises","_preparedNodesCache","Map","replaceFiltersCache","createPageDependencyArgs","connection","nodeTypeNames","toNodeTypeNames","forEach","typeName","map","_filtersCache","withContext","context","ContextualNodeModel","getNodeById","args","pageDependencies","id","type","node","result","includes","internal","trackInlineObjectsInRootNode","trackPageDependencies","getNodesByIds","ids","nodes","Array","isArray","filter","Boolean","length","getAllNodes","nodesByType","concat","runQuery","query","firstOnly","stats","tracer","gqlType","getType","materializationActivity","phantomActivity","parentSpan","getParentActivity","span","start","fields","getQueryFields","sort","group","distinct","fieldsToResolve","determineResolvableFields","prepareNodes","end","runQueryActivity","queryResult","queryArgs","gqlSchema","gqlComposer","resolvedFields","filtersCache","trackInlineObjectsActivity","path","name","queryFields","push","Promise","resolve","process","nextTick","_doResolvePrepareNodesQueue","queue","reduce","nextQueryFields","nextFieldsToResolve","merge","actualFieldsToResolve","deepObjectDifference","get","isEmpty","resolveRecursive","__gatsby_resolved","set","getTypes","has","addRootNodeToInlineObject","add","findRootNodeAncestor","obj","predicate","iterations","parent","trackedParent","isMatchingRoot","error","connectionType","nodeId","rootNodeModel","nodeModel","_getFullDependencies","fullDependencies","gqlTypeName","possibleTypes","getPossibleTypes","getInterfaces","some","iface","filterFields","dropQueryOperators","sortFields","pathToObject","split","reduceRight","acc","key","Object","keys","value","k","v","isPlainObject","getFields","concreteType","resolveType","gqlFields","fieldName","fieldToResolve","queryField","gqlField","gqlNonNullType","gqlFieldType","innerValue","resolveField","isObject","all","item","pickBy","withResolverContext","arg","defaultValue","returnType","isNestedType","field","typeComposer","getAnyTC","possibleTCs","needsResolve","tc","getFieldExtension","innerResolved","rootNodeMap","data","isNode","each","o","from","to","toValue","deepResult","module","exports"],"mappings":"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","sourcesContent":["// @flow\n\nconst _ = require(`lodash`)\nconst {\n  isAbstractType,\n  GraphQLOutputType,\n  GraphQLUnionType,\n  GraphQLList,\n  getNamedType,\n  getNullableType,\n  isCompositeType,\n} = require(`graphql`)\nconst invariant = require(`invariant`)\nconst reporter = require(`gatsby-cli/lib/reporter`)\nimport {\n  getNode,\n  getNodes,\n  getNodesByType,\n  getTypes,\n  saveResolvedNodes,\n} from \"../redux/nodes\"\nimport { runFastFiltersAndSort } from \"../redux/run-fast-filters\"\n\ntype TypeOrTypeName = string | GraphQLOutputType\n\n/**\n * Optional page dependency information.\n *\n * @typedef {Object} PageDependencies\n * @property {string} path The path of the page that depends on the retrieved nodes' data\n * @property {string} [connectionType] Mark this dependency as a connection\n */\ninterface PageDependencies {\n  path: string;\n  connectionType?: string;\n}\n\ninterface QueryArguments {\n  type: TypeOrTypeName;\n  query: { filter: Object, sort?: Object };\n  firstOnly?: boolean;\n}\n\nexport interface NodeModel {\n  getNodeById(\n    { id: string, type?: TypeOrTypeName },\n    pageDependencies?: PageDependencies\n  ): any | null;\n  getNodesByIds(\n    { ids: Array<string>, type?: TypeOrTypeName },\n    pageDependencies?: PageDependencies\n  ): Array<any>;\n  getAllNodes(\n    { type?: TypeOrTypeName },\n    pageDependencies?: PageDependencies\n  ): Array<any>;\n  runQuery(\n    args: QueryArguments,\n    pageDependencies?: PageDependencies\n  ): Promise<any>;\n  getTypes(): Array<string>;\n  trackPageDependencies<nodeOrNodes: Node | Node[]>(\n    result: nodeOrNodes,\n    pageDependencies?: PageDependencies\n  ): nodesOrNodes;\n  findRootNodeAncestor(obj: any, predicate: () => boolean): Node | null;\n  trackInlineObjectsInRootNode(node: Node, sanitize: boolean): Node;\n}\n\nclass LocalNodeModel {\n  constructor({ schema, schemaComposer, createPageDependency }) {\n    this.schema = schema\n    this.schemaComposer = schemaComposer\n    this.createPageDependencyActionCreator = createPageDependency\n\n    this._rootNodeMap = new WeakMap()\n    this._trackedRootNodes = new Set()\n    this._prepareNodesQueues = {}\n    this._prepareNodesPromises = {}\n    this._preparedNodesCache = new Map()\n    this.replaceFiltersCache()\n  }\n\n  createPageDependency(createPageDependencyArgs) {\n    if (createPageDependencyArgs.connection) {\n      const nodeTypeNames = toNodeTypeNames(\n        this.schema,\n        createPageDependencyArgs.connection\n      )\n      if (nodeTypeNames) {\n        nodeTypeNames.forEach(typeName => {\n          this.createPageDependencyActionCreator({\n            ...createPageDependencyArgs,\n            connection: typeName,\n          })\n        })\n        return\n      }\n    }\n\n    this.createPageDependencyActionCreator(createPageDependencyArgs)\n  }\n\n  /**\n   * Replace the cache either with the value passed on (mainly for tests) or\n   * an empty new Map.\n   *\n   * @param {undefined | null | FiltersCache} map\n   *   (This cached is used in redux/nodes.js and caches a set of buckets (Sets)\n   *   of Nodes based on filter and tracks this for each set of types which are\n   *   actually queried. If the filter targets `id` directly, only one Node is\n   *   cached instead of a Set of Nodes. If null, don't create or use a cache.\n   */\n  replaceFiltersCache(map = new Map()) {\n    this._filtersCache = map // See redux/nodes.js for usage\n  }\n\n  withContext(context) {\n    return new ContextualNodeModel(this, context)\n  }\n\n  /**\n   * Get a node from the store by ID and optional type.\n   *\n   * @param {Object} args\n   * @param {string} args.id ID of the requested node\n   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the node\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {(Node|null)}\n   */\n  getNodeById(args, pageDependencies) {\n    const { id, type } = args || {}\n\n    const node = getNodeById(id)\n\n    let result\n    if (!node) {\n      result = null\n    } else if (!type) {\n      result = node\n    } else {\n      const nodeTypeNames = toNodeTypeNames(this.schema, type)\n      result = nodeTypeNames.includes(node.internal.type) ? node : null\n    }\n\n    if (result) {\n      this.trackInlineObjectsInRootNode(node)\n    }\n\n    return this.trackPageDependencies(result, pageDependencies)\n  }\n\n  /**\n   * Get nodes from the store by IDs and optional type.\n   *\n   * @param {Object} args\n   * @param {string[]} args.ids IDs of the requested nodes\n   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the nodes\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Node[]}\n   */\n  getNodesByIds(args, pageDependencies) {\n    const { ids, type } = args || {}\n\n    const nodes = Array.isArray(ids)\n      ? ids.map(id => getNodeById(id)).filter(Boolean)\n      : []\n\n    let result\n    if (!nodes.length || !type) {\n      result = nodes\n    } else {\n      const nodeTypeNames = toNodeTypeNames(this.schema, type)\n      result = nodes.filter(node => nodeTypeNames.includes(node.internal.type))\n    }\n\n    if (result) {\n      result.forEach(node => this.trackInlineObjectsInRootNode(node))\n    }\n\n    return this.trackPageDependencies(result, pageDependencies)\n  }\n\n  /**\n   * Get all nodes in the store, or all nodes of a specified type. Note that\n   * this doesn't add tracking to all the nodes, unless pageDependencies are\n   * passed.\n   *\n   * @param {Object} args\n   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the nodes\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Node[]}\n   */\n  getAllNodes(args, pageDependencies) {\n    const { type } = args || {}\n\n    let result\n    if (!type) {\n      result = getNodes()\n    } else {\n      const nodeTypeNames = toNodeTypeNames(this.schema, type)\n      const nodesByType = nodeTypeNames.map(typeName =>\n        getNodesByType(typeName)\n      )\n      const nodes = [].concat(...nodesByType)\n      result = nodes.filter(Boolean)\n    }\n\n    if (result) {\n      result.forEach(node => this.trackInlineObjectsInRootNode(node))\n    }\n\n    if (pageDependencies) {\n      return this.trackPageDependencies(result, pageDependencies)\n    } else {\n      return result\n    }\n  }\n\n  /**\n   * Get nodes of a type matching the specified query.\n   *\n   * @param {Object} args\n   * @param {Object} args.query Query arguments (`filter` and `sort`)\n   * @param {(string|GraphQLOutputType)} args.type Type\n   * @param {boolean} [args.firstOnly] If true, return only first match\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Promise<Node[]>}\n   */\n  async runQuery(args, pageDependencies) {\n    const { query, firstOnly, type, stats, tracer } = args || {}\n\n    // We don't support querying union types (yet?), because the combined types\n    // need not have any fields in common.\n    const gqlType = typeof type === `string` ? this.schema.getType(type) : type\n    invariant(\n      !(gqlType instanceof GraphQLUnionType),\n      `Querying GraphQLUnion types is not supported.`\n    )\n\n    const nodeTypeNames = toNodeTypeNames(this.schema, gqlType)\n\n    let materializationActivity\n    if (tracer) {\n      materializationActivity = reporter.phantomActivity(`Materialization`, {\n        parentSpan: tracer.getParentActivity().span,\n      })\n      materializationActivity.start()\n    }\n    const fields = getQueryFields({\n      filter: query.filter,\n      sort: query.sort,\n      group: query.group,\n      distinct: query.distinct,\n    })\n    const fieldsToResolve = determineResolvableFields(\n      this.schemaComposer,\n      this.schema,\n      gqlType,\n      fields,\n      nodeTypeNames\n    )\n\n    await this.prepareNodes(gqlType, fields, fieldsToResolve, nodeTypeNames)\n\n    if (materializationActivity) {\n      materializationActivity.end()\n    }\n\n    let runQueryActivity\n    if (tracer) {\n      runQueryActivity = reporter.phantomActivity(`runQuery`, {\n        parentSpan: tracer.getParentActivity().span,\n      })\n      runQueryActivity.start()\n    }\n\n    const queryResult = runFastFiltersAndSort({\n      queryArgs: query,\n      firstOnly,\n      gqlSchema: this.schema,\n      gqlComposer: this.schemaComposer,\n      gqlType,\n      resolvedFields: fieldsToResolve,\n      nodeTypeNames,\n      filtersCache: this._filtersCache,\n      stats,\n    })\n\n    if (runQueryActivity) {\n      runQueryActivity.end()\n    }\n\n    let trackInlineObjectsActivity\n    if (tracer) {\n      trackInlineObjectsActivity = reporter.phantomActivity(\n        `trackInlineObjects`,\n        {\n          parentSpan: tracer.getParentActivity().span,\n        }\n      )\n      trackInlineObjectsActivity.start()\n    }\n\n    let result = queryResult\n    if (firstOnly) {\n      if (result?.length > 0) {\n        result = result[0]\n        this.trackInlineObjectsInRootNode(result)\n      } else {\n        result = null\n\n        // Couldn't find matching node.\n        //  This leads to a state where data tracking for this query gets empty.\n        //  It means we will NEVER re-run this query on any data updates\n        //  (even if a new node matching this query is added at some point).\n        //  To workaround this, we have to add a connection tracking to re-run\n        //  the query whenever any node of this type changes.\n        if (pageDependencies.path) {\n          this.createPageDependency({\n            path: pageDependencies.path,\n            connection: gqlType.name,\n          })\n        }\n      }\n    } else if (result) {\n      result.forEach(node => this.trackInlineObjectsInRootNode(node))\n    }\n\n    if (trackInlineObjectsActivity) {\n      trackInlineObjectsActivity.end()\n    }\n\n    return this.trackPageDependencies(result, pageDependencies)\n  }\n\n  prepareNodes(type, queryFields, fieldsToResolve, nodeTypeNames) {\n    const typeName = type.name\n    if (!this._prepareNodesQueues[typeName]) {\n      this._prepareNodesQueues[typeName] = []\n    }\n\n    this._prepareNodesQueues[typeName].push({\n      queryFields,\n      fieldsToResolve,\n    })\n\n    if (!this._prepareNodesPromises[typeName]) {\n      this._prepareNodesPromises[typeName] = new Promise(resolve => {\n        process.nextTick(async () => {\n          await this._doResolvePrepareNodesQueue(type, nodeTypeNames)\n          resolve()\n        })\n      })\n    }\n\n    return this._prepareNodesPromises[typeName]\n  }\n\n  async _doResolvePrepareNodesQueue(type, nodeTypeNames) {\n    const typeName = type.name\n    const queue = this._prepareNodesQueues[typeName]\n    this._prepareNodesQueues[typeName] = []\n    this._prepareNodesPromises[typeName] = null\n\n    const { queryFields, fieldsToResolve } = queue.reduce(\n      (\n        { queryFields, fieldsToResolve },\n        { queryFields: nextQueryFields, fieldsToResolve: nextFieldsToResolve }\n      ) => {\n        return {\n          queryFields: _.merge(queryFields, nextQueryFields),\n          fieldsToResolve: _.merge(fieldsToResolve, nextFieldsToResolve),\n        }\n      },\n      {\n        queryFields: {},\n        fieldsToResolve: {},\n      }\n    )\n\n    const actualFieldsToResolve = deepObjectDifference(\n      fieldsToResolve,\n      this._preparedNodesCache.get(typeName) || {}\n    )\n\n    if (!_.isEmpty(actualFieldsToResolve)) {\n      await saveResolvedNodes(nodeTypeNames, async node => {\n        this.trackInlineObjectsInRootNode(node)\n        const resolvedFields = await resolveRecursive(\n          this,\n          this.schemaComposer,\n          this.schema,\n          node,\n          type,\n          queryFields,\n          actualFieldsToResolve\n        )\n        if (!node.__gatsby_resolved) {\n          node.__gatsby_resolved = {}\n        }\n        return _.merge(node.__gatsby_resolved, resolvedFields)\n      })\n      this._preparedNodesCache.set(\n        typeName,\n        _.merge(\n          {},\n          this._preparedNodesCache.get(typeName) || {},\n          actualFieldsToResolve\n        )\n      )\n    }\n  }\n\n  /**\n   * Get the names of all node types in the store.\n   *\n   * @returns {string[]}\n   */\n  getTypes() {\n    return getTypes()\n  }\n\n  /**\n   * Adds link between inline objects/arrays contained in Node object\n   * and that Node object.\n   * @param {Node} node Root Node\n   */\n  trackInlineObjectsInRootNode(node) {\n    if (!this._trackedRootNodes.has(node.id)) {\n      addRootNodeToInlineObject(\n        this._rootNodeMap,\n        node,\n        node.id,\n        true,\n        new Set()\n      )\n      this._trackedRootNodes.add(node.id)\n    }\n  }\n\n  /**\n   * Finds top most ancestor of node that contains passed Object or Array\n   * @param {(Object|Array)} obj Object/Array belonging to Node object or Node object\n   * @param {nodePredicate} [predicate] Optional callback to check if ancestor meets defined conditions\n   * @returns {Node} Top most ancestor if predicate is not specified\n   * or first node that meet predicate conditions if predicate is specified\n   */\n  findRootNodeAncestor(obj, predicate = null) {\n    let iterations = 0\n    let node = obj\n\n    while (iterations++ < 100) {\n      if (predicate && predicate(node)) return node\n\n      const parent = getNodeById(node.parent)\n      const id = this._rootNodeMap.get(node)\n      const trackedParent = getNodeById(id)\n\n      if (!parent && !trackedParent) {\n        const isMatchingRoot = !predicate || predicate(node)\n        return isMatchingRoot ? node : null\n      }\n\n      node = parent || trackedParent\n    }\n\n    reporter.error(\n      `It looks like you have a node that's set its parent as itself:\\n\\n` +\n        node\n    )\n    return null\n  }\n\n  /**\n   * Given a result, that's either a single node or an array of them, track them\n   * using pageDependencies. Defaults to tracking according to current resolver\n   * path. Returns the result back.\n   *\n   * @param {Node | Node[]} result\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Node | Node[]}\n   */\n  trackPageDependencies(result, pageDependencies = {}) {\n    const { path, connectionType } = pageDependencies\n    if (path) {\n      if (connectionType) {\n        this.createPageDependency({ path, connection: connectionType })\n      } else {\n        const nodes = Array.isArray(result) ? result : [result]\n        for (const node of nodes) {\n          if (node) {\n            this.createPageDependency({ path, nodeId: node.id })\n          }\n        }\n      }\n    }\n\n    return result\n  }\n}\n\nclass ContextualNodeModel {\n  constructor(rootNodeModel, context) {\n    this.nodeModel = rootNodeModel\n    this.context = context\n  }\n\n  withContext(context) {\n    return new ContextualNodeModel(this.nodeModel, {\n      ...this.context,\n      ...context,\n    })\n  }\n\n  _getFullDependencies(pageDependencies) {\n    return {\n      path: this.context.path,\n      ...(pageDependencies || {}),\n    }\n  }\n\n  getNodeById(args, pageDependencies) {\n    return this.nodeModel.getNodeById(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  getNodesByIds(args, pageDependencies) {\n    return this.nodeModel.getNodesByIds(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  getAllNodes(args, pageDependencies) {\n    const fullDependencies = pageDependencies\n      ? this._getFullDependencies(pageDependencies)\n      : null\n    return this.nodeModel.getAllNodes(args, fullDependencies)\n  }\n\n  runQuery(args, pageDependencies) {\n    return this.nodeModel.runQuery(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  prepareNodes(...args) {\n    return this.nodeModel.prepareNodes(...args)\n  }\n\n  getTypes(...args) {\n    return this.nodeModel.getTypes(...args)\n  }\n\n  trackInlineObjectsInRootNode(...args) {\n    return this.nodeModel.trackInlineObjectsInRootNode(...args)\n  }\n\n  findRootNodeAncestor(...args) {\n    return this.nodeModel.findRootNodeAncestor(...args)\n  }\n\n  createPageDependency(...args) {\n    return this.nodeModel.createPageDependency(...args)\n  }\n\n  trackPageDependencies(result, pageDependencies) {\n    return this.nodeModel.trackPageDependencies(\n      result,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n}\n\nconst getNodeById = id => (id != null ? getNode(id) : null)\n\nconst toNodeTypeNames = (schema, gqlTypeName) => {\n  const gqlType =\n    typeof gqlTypeName === `string` ? schema.getType(gqlTypeName) : gqlTypeName\n\n  if (!gqlType) return []\n\n  const possibleTypes = isAbstractType(gqlType)\n    ? schema.getPossibleTypes(gqlType)\n    : [gqlType]\n\n  return possibleTypes\n    .filter(type => type.getInterfaces().some(iface => iface.name === `Node`))\n    .map(type => type.name)\n}\n\nconst getQueryFields = ({ filter, sort, group, distinct }) => {\n  const filterFields = filter ? dropQueryOperators(filter) : {}\n  const sortFields = (sort && sort.fields) || []\n\n  if (group && !Array.isArray(group)) {\n    group = [group]\n  } else if (group == null) {\n    group = []\n  }\n\n  if (distinct && !Array.isArray(distinct)) {\n    distinct = [distinct]\n  } else if (distinct == null) {\n    distinct = []\n  }\n\n  return _.merge(\n    filterFields,\n    ...sortFields.map(pathToObject),\n    ...group.map(pathToObject),\n    ...distinct.map(pathToObject)\n  )\n}\n\nconst pathToObject = path => {\n  if (path && typeof path === `string`) {\n    return path.split(`.`).reduceRight((acc, key) => {\n      return { [key]: acc }\n    }, true)\n  }\n  return {}\n}\n\nconst dropQueryOperators = filter =>\n  Object.keys(filter).reduce((acc, key) => {\n    const value = filter[key]\n    const k = Object.keys(value)[0]\n    const v = value[k]\n    if (_.isPlainObject(value) && _.isPlainObject(v)) {\n      acc[key] =\n        k === `elemMatch` ? dropQueryOperators(v) : dropQueryOperators(value)\n    } else {\n      acc[key] = true\n    }\n    return acc\n  }, {})\n\nconst getFields = (schema, type, node) => {\n  if (!isAbstractType(type)) {\n    return type.getFields()\n  }\n\n  const concreteType = type.resolveType(node)\n  return schema.getType(concreteType).getFields()\n}\n\nasync function resolveRecursive(\n  nodeModel,\n  schemaComposer,\n  schema,\n  node,\n  type,\n  queryFields,\n  fieldsToResolve\n) {\n  const gqlFields = getFields(schema, type, node)\n  const resolvedFields = {}\n  for (const fieldName of Object.keys(fieldsToResolve)) {\n    const fieldToResolve = fieldsToResolve[fieldName]\n    const queryField = queryFields[fieldName]\n    const gqlField = gqlFields[fieldName]\n    const gqlNonNullType = getNullableType(gqlField.type)\n    const gqlFieldType = getNamedType(gqlField.type)\n    let innerValue = await resolveField(\n      nodeModel,\n      schemaComposer,\n      schema,\n      node,\n      gqlField,\n      fieldName\n    )\n    if (gqlField && innerValue != null) {\n      if (\n        isCompositeType(gqlFieldType) &&\n        !(gqlNonNullType instanceof GraphQLList)\n      ) {\n        innerValue = await resolveRecursive(\n          nodeModel,\n          schemaComposer,\n          schema,\n          innerValue,\n          gqlFieldType,\n          queryField,\n          _.isObject(fieldToResolve) ? fieldToResolve : queryField\n        )\n      } else if (\n        isCompositeType(gqlFieldType) &&\n        _.isArray(innerValue) &&\n        gqlNonNullType instanceof GraphQLList\n      ) {\n        innerValue = await Promise.all(\n          innerValue.map(item =>\n            item == null\n              ? item\n              : resolveRecursive(\n                  nodeModel,\n                  schemaComposer,\n                  schema,\n                  item,\n                  gqlFieldType,\n                  queryField,\n                  _.isObject(fieldToResolve) ? fieldToResolve : queryField\n                )\n          )\n        )\n      }\n    }\n    if (innerValue != null) {\n      resolvedFields[fieldName] = innerValue\n    }\n  }\n\n  for (const fieldName of Object.keys(queryFields)) {\n    if (!fieldsToResolve[fieldName] && node[fieldName]) {\n      // It is possible that this field still has a custom resolver\n      // See https://github.com/gatsbyjs/gatsby/issues/27368\n      resolvedFields[fieldName] = await resolveField(\n        nodeModel,\n        schemaComposer,\n        schema,\n        node,\n        gqlFields[fieldName],\n        fieldName\n      )\n    }\n  }\n\n  return _.pickBy(resolvedFields, (value, key) => queryFields[key])\n}\n\nfunction resolveField(\n  nodeModel,\n  schemaComposer,\n  schema,\n  node,\n  gqlField,\n  fieldName\n) {\n  if (!gqlField?.resolve) {\n    return node[fieldName]\n  }\n  const withResolverContext = require(`./context`)\n  return gqlField.resolve(\n    node,\n    gqlField.args.reduce((acc, arg) => {\n      acc[arg.name] = arg.defaultValue\n      return acc\n    }, {}),\n    withResolverContext({\n      schema,\n      schemaComposer,\n      nodeModel,\n    }),\n    {\n      fieldName,\n      schema,\n      returnType: gqlField.type,\n    }\n  )\n}\n\nconst determineResolvableFields = (\n  schemaComposer,\n  schema,\n  type,\n  fields,\n  nodeTypeNames,\n  isNestedType = false\n) => {\n  const fieldsToResolve = {}\n  const gqlFields = type.getFields()\n  Object.keys(fields).forEach(fieldName => {\n    const field = fields[fieldName]\n    const gqlField = gqlFields[fieldName]\n    const gqlFieldType = getNamedType(gqlField.type)\n    const typeComposer = schemaComposer.getAnyTC(type.name)\n    const possibleTCs = [\n      typeComposer,\n      ...nodeTypeNames.map(name => schemaComposer.getAnyTC(name)),\n    ]\n    let needsResolve = false\n    for (const tc of possibleTCs) {\n      needsResolve = tc.getFieldExtension(fieldName, `needsResolve`) || false\n      if (needsResolve) {\n        break\n      }\n    }\n\n    if (_.isObject(field) && gqlField) {\n      const innerResolved = determineResolvableFields(\n        schemaComposer,\n        schema,\n        gqlFieldType,\n        field,\n        toNodeTypeNames(schema, gqlFieldType),\n        true\n      )\n      if (!_.isEmpty(innerResolved)) {\n        fieldsToResolve[fieldName] = innerResolved\n      }\n    }\n\n    if (!fieldsToResolve[fieldName] && needsResolve) {\n      fieldsToResolve[fieldName] = true\n    }\n    if (!fieldsToResolve[fieldName] && isNestedType) {\n      // If parent field needs to be resolved - all nested fields should be added as well\n      // See https://github.com/gatsbyjs/gatsby/issues/26056\n      fieldsToResolve[fieldName] = true\n    }\n  })\n  return fieldsToResolve\n}\n\nconst addRootNodeToInlineObject = (\n  rootNodeMap,\n  data,\n  nodeId,\n  isNode /* : boolean */,\n  path /* : Set<mixed> */\n) /* : void */ => {\n  const isPlainObject = _.isPlainObject(data)\n\n  if (isPlainObject || _.isArray(data)) {\n    if (path.has(data)) return\n    path.add(data)\n\n    _.each(data, (o, key) => {\n      if (!isNode || key !== `internal`) {\n        addRootNodeToInlineObject(rootNodeMap, o, nodeId, false, path)\n      }\n    })\n\n    // don't need to track node itself\n    if (!isNode) {\n      rootNodeMap.set(data, nodeId)\n    }\n  }\n}\n\nconst deepObjectDifference = (from, to) => {\n  const result = {}\n  Object.keys(from).forEach(key => {\n    const toValue = to[key]\n    if (toValue) {\n      if (_.isPlainObject(toValue)) {\n        const deepResult = deepObjectDifference(from[key], toValue)\n        if (!_.isEmpty(deepResult)) {\n          result[key] = deepResult\n        }\n      }\n    } else {\n      result[key] = from[key]\n    }\n  })\n  return result\n}\n\nmodule.exports = {\n  LocalNodeModel,\n}\n"],"file":"node-model.js"}