{"version":3,"sources":["../../src/query/query-runner.ts"],"names":["resultHashes","Map","reportLongRunningQueryJob","queryJob","messageParts","componentPath","isPage","path","context","push","_","isEmpty","JSON","stringify","report","warn","join","panicQueryJobError","errors","urlPath","undefined","queryContext","plugin","pluginCreatorId","structuredErrors","map","e","structuredError","message","filePath","location","error","codeFrame","query","locations","line","column","panicOnBuild","startQueryJob","graphqlRunner","parentSpan","isPending","timeoutId","setTimeout","queryName","id","finally","clearTimeout","queryRunner","program","store","getState","boundActionCreators","queryStart","result","Object","assign","pageContext","internalComponentName","component","componentChunkName","updatedAt","pluginCreator___NODE","isCreatedByStatefulCreatePages","resultJSON","resultHash","crypto","createHash","update","digest","get","directory","set","resultPath","replace","fs","outputFile","dispatch","type","payload","hash","pageQueryRun","process","env","GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES","setPageData"],"mappings":"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","sourcesContent":["import { Span } from \"opentracing\"\nimport _ from \"lodash\"\nimport fs from \"fs-extra\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport crypto from \"crypto\"\nimport { ExecutionResult, GraphQLError } from \"graphql\"\n\nimport path from \"path\"\nimport { store } from \"../redux\"\nimport { boundActionCreators } from \"../redux/actions\"\nimport { getCodeFrame } from \"./graphql-errors\"\nimport errorParser from \"./error-parser\"\n\nimport { GraphQLRunner } from \"./graphql-runner\"\nimport { IExecutionResult, PageContext } from \"./types\"\nimport { pageDataExists } from \"../utils/page-data\"\n\nconst resultHashes = new Map()\n\ninterface IQueryJob {\n  id: string\n  hash?: string\n  query: string\n  componentPath: string\n  context: PageContext\n  isPage: boolean\n  pluginCreatorId: string\n}\n\nfunction reportLongRunningQueryJob(queryJob): void {\n  const messageParts = [\n    `Query takes too long:`,\n    `File path: ${queryJob.componentPath}`,\n  ]\n\n  if (queryJob.isPage) {\n    const { path, context } = queryJob.context\n    messageParts.push(`URL path: ${path}`)\n\n    if (!_.isEmpty(context)) {\n      messageParts.push(`Context: ${JSON.stringify(context, null, 4)}`)\n    }\n  }\n\n  report.warn(messageParts.join(`\\n`))\n}\n\nfunction panicQueryJobError(\n  queryJob: IQueryJob,\n  errors: ReadonlyArray<GraphQLError>\n): void {\n  let urlPath = undefined\n  let queryContext = {}\n  const plugin = queryJob.pluginCreatorId || `none`\n\n  if (queryJob.isPage) {\n    urlPath = queryJob.context.path\n    queryContext = queryJob.context.context\n  }\n\n  const structuredErrors = errors.map(e => {\n    const structuredError = errorParser({\n      message: e.message,\n      filePath: undefined,\n      location: undefined,\n      error: e,\n    })\n\n    structuredError.context = {\n      ...structuredError.context,\n      codeFrame: getCodeFrame(\n        queryJob.query,\n        e.locations && e.locations[0].line,\n        e.locations && e.locations[0].column\n      ),\n      filePath: queryJob.componentPath,\n      ...(urlPath ? { urlPath } : {}),\n      ...queryContext,\n      plugin,\n    }\n\n    return structuredError\n  })\n\n  report.panicOnBuild(structuredErrors)\n}\n\nasync function startQueryJob(\n  graphqlRunner: GraphQLRunner,\n  queryJob: IQueryJob,\n  parentSpan: Span | undefined\n): Promise<ExecutionResult> {\n  let isPending = true\n\n  // Print out warning when query takes too long\n  const timeoutId = setTimeout(() => {\n    if (isPending) {\n      reportLongRunningQueryJob(queryJob)\n    }\n  }, 15000)\n\n  return graphqlRunner\n    .query(queryJob.query, queryJob.context, {\n      parentSpan,\n      queryName: queryJob.id,\n    })\n    .finally(() => {\n      isPending = false\n      clearTimeout(timeoutId)\n    })\n}\n\nexport async function queryRunner(\n  graphqlRunner: GraphQLRunner,\n  queryJob: IQueryJob,\n  parentSpan: Span | undefined\n): Promise<IExecutionResult> {\n  const { program } = store.getState()\n\n  boundActionCreators.queryStart({\n    path: queryJob.id,\n    componentPath: queryJob.componentPath,\n    isPage: queryJob.isPage,\n  })\n\n  // Run query\n  let result: IExecutionResult\n  // Nothing to do if the query doesn't exist.\n  if (!queryJob.query || queryJob.query === ``) {\n    result = {}\n  } else {\n    result = await startQueryJob(graphqlRunner, queryJob, parentSpan)\n  }\n\n  if (result.errors) {\n    // If there's a graphql error then log the error and exit\n    panicQueryJobError(queryJob, result.errors)\n  }\n\n  // Add the page context onto the results.\n  if (queryJob && queryJob.isPage) {\n    result[`pageContext`] = Object.assign({}, queryJob.context)\n  }\n\n  // Delete internal data from pageContext\n  if (result.pageContext) {\n    delete result.pageContext.path\n    delete result.pageContext.internalComponentName\n    delete result.pageContext.component\n    delete result.pageContext.componentChunkName\n    delete result.pageContext.updatedAt\n    delete result.pageContext.pluginCreator___NODE\n    delete result.pageContext.pluginCreatorId\n    delete result.pageContext.componentPath\n    delete result.pageContext.context\n    delete result.pageContext.isCreatedByStatefulCreatePages\n  }\n\n  const resultJSON = JSON.stringify(result)\n  const resultHash = crypto\n    .createHash(`sha1`)\n    .update(resultJSON)\n    .digest(`base64`)\n\n  if (\n    resultHash !== resultHashes.get(queryJob.id) ||\n    (queryJob.isPage &&\n      !pageDataExists(path.join(program.directory, `public`), queryJob.id))\n  ) {\n    resultHashes.set(queryJob.id, resultHash)\n\n    if (queryJob.isPage) {\n      // We need to save this temporarily in cache because\n      // this might be incomplete at the moment\n      const resultPath = path.join(\n        program.directory,\n        `.cache`,\n        `json`,\n        `${queryJob.id.replace(/\\//g, `_`)}.json`\n      )\n      await fs.outputFile(resultPath, resultJSON)\n      store.dispatch({\n        type: `ADD_PENDING_PAGE_DATA_WRITE`,\n        payload: {\n          path: queryJob.id,\n        },\n      })\n    } else {\n      const resultPath = path.join(\n        program.directory,\n        `public`,\n        `page-data`,\n        `sq`,\n        `d`,\n        `${queryJob.hash}.json`\n      )\n      await fs.outputFile(resultPath, resultJSON)\n    }\n  }\n\n  // Broadcast that a page's query has run.\n  boundActionCreators.pageQueryRun({\n    path: queryJob.id,\n    componentPath: queryJob.componentPath,\n    isPage: queryJob.isPage,\n  })\n\n  // Sets pageData to the store, here for easier access to the resultHash\n  if (\n    process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES &&\n    queryJob.isPage\n  ) {\n    boundActionCreators.setPageData({\n      id: queryJob.id,\n      resultHash,\n    })\n  }\n  return result\n}\n"],"file":"query-runner.js"}