/**
 *
 * audit/utils
 *
 */
import type { ExecutionResult } from 'graphql';
import { Audit, AuditName } from './common';
export * from '../utils';
/**
 * Wrap and prepare an audit for testing.
 *
 * @private
 */
export declare function audit(name: AuditName, fn: () => Promise<void>): Audit;
/**
 * Will throw a string if the assertion fails.
 *
 * All fatal problems will throw an instance of Error.
 *
 * @private
 */
export declare function assert<T = unknown>(name: string, actual: T): {
    toBe: (expected: T) => void;
    toBeBetween: (min: T extends number ? T : never, max: T extends number ? T : never) => void;
    toContain: (expected: T extends (infer U)[] ? U : T extends string ? T : never) => void;
    notToContain: (expected: T extends (infer U_1)[] ? U_1 : T extends string ? T : never) => void;
    toHaveProperty: (prop: T extends Record<any, any> ? PropertyKey : never) => void;
    notToHaveProperty: (prop: T extends Record<any, any> ? PropertyKey : never) => void;
};
/**
 * Parses the string as JSON and safely reports parsing issues for audits.
 *
 * Assumes the parsed JSON will be an `ExecutionResult`.
 *
 * @private
 * */
export declare function assertBodyAsExecutionResult(res: Response): Promise<ExecutionResult<import("graphql/jsutils/ObjMap").ObjMap<unknown>, import("graphql/jsutils/ObjMap").ObjMap<unknown>>>;
