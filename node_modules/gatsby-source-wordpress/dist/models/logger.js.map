{"version":3,"file":"logger.js","names":["logger","state","entityCount","typeCount","activityTimers","reducers","incrementActivityTimer","typeName","by","action","count","activity","setStatus","stopActivityTimer","end","createActivityTimer","reporter","pluginOptions","typeActivityTimer","activityTimer","formatLogMessage","useVerboseStyle","verbose","start"],"sources":["../../src/models/logger.ts"],"sourcesContent":["import { Reporter } from \"gatsby/reporter\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { IPluginOptions } from \"./gatsby-api\"\n\ntype ITimerReporter = ReturnType<Reporter[\"activityTimer\"]>\n\nexport interface ILoggerState {\n  entityCount: number\n  typeCount: { [name: string]: number }\n  activityTimers: {\n    [name: string]: { count: number; activity: ITimerReporter }\n  }\n}\n\nconst logger = {\n  state: {\n    entityCount: 0,\n    typeCount: {},\n    activityTimers: {},\n  } as ILoggerState,\n\n  reducers: {\n    incrementActivityTimer(\n      state: ILoggerState,\n      { typeName, by, action = `fetched` }\n    ): ILoggerState {\n      const logger = state.activityTimers[typeName]\n\n      if (!logger) {\n        return state\n      }\n\n      if (typeof by === `number`) {\n        logger.count += by\n        state.entityCount += by\n      }\n\n      logger.activity.setStatus(`${action} ${logger.count}`)\n\n      return state\n    },\n\n    stopActivityTimer(\n      state: ILoggerState,\n      { typeName, action = `fetched` }: { typeName: string; action: string }\n    ): ILoggerState {\n      const logger = state.activityTimers[typeName]\n\n      if (logger.count === 0) {\n        logger.activity.setStatus(`${action} 0`)\n      }\n\n      logger.activity.end()\n\n      return state\n    },\n\n    createActivityTimer(\n      state: ILoggerState,\n      {\n        typeName,\n        reporter,\n        pluginOptions,\n      }: { typeName: string; reporter: Reporter; pluginOptions: IPluginOptions }\n    ): ILoggerState {\n      if (state.activityTimers[typeName]) {\n        return state\n      }\n\n      const typeActivityTimer = {\n        count: 0,\n        activity: reporter.activityTimer(\n          formatLogMessage(typeName, {\n            useVerboseStyle: pluginOptions.verbose,\n          })\n        ),\n      }\n\n      if (pluginOptions.verbose) {\n        typeActivityTimer.activity.start()\n      }\n\n      state.activityTimers[typeName] = typeActivityTimer\n\n      return state\n    },\n  },\n}\n\nexport default logger\n"],"mappings":";;;;AACA;AAaA,MAAMA,MAAM,GAAG;EACbC,KAAK,EAAE;IACLC,WAAW,EAAE,CAAC;IACdC,SAAS,EAAE,CAAC,CAAC;IACbC,cAAc,EAAE,CAAC;EACnB,CAAiB;EAEjBC,QAAQ,EAAE;IACRC,sBAAsB,CACpBL,KAAmB,EACnB;MAAEM,QAAQ;MAAEC,EAAE;MAAEC,MAAM,GAAI;IAAS,CAAC,EACtB;MACd,MAAMT,MAAM,GAAGC,KAAK,CAACG,cAAc,CAACG,QAAQ,CAAC;MAE7C,IAAI,CAACP,MAAM,EAAE;QACX,OAAOC,KAAK;MACd;MAEA,IAAI,OAAOO,EAAE,KAAM,QAAO,EAAE;QAC1BR,MAAM,CAACU,KAAK,IAAIF,EAAE;QAClBP,KAAK,CAACC,WAAW,IAAIM,EAAE;MACzB;MAEAR,MAAM,CAACW,QAAQ,CAACC,SAAS,CAAE,GAAEH,MAAO,IAAGT,MAAM,CAACU,KAAM,EAAC,CAAC;MAEtD,OAAOT,KAAK;IACd,CAAC;IAEDY,iBAAiB,CACfZ,KAAmB,EACnB;MAAEM,QAAQ;MAAEE,MAAM,GAAI;IAA+C,CAAC,EACxD;MACd,MAAMT,MAAM,GAAGC,KAAK,CAACG,cAAc,CAACG,QAAQ,CAAC;MAE7C,IAAIP,MAAM,CAACU,KAAK,KAAK,CAAC,EAAE;QACtBV,MAAM,CAACW,QAAQ,CAACC,SAAS,CAAE,GAAEH,MAAO,IAAG,CAAC;MAC1C;MAEAT,MAAM,CAACW,QAAQ,CAACG,GAAG,EAAE;MAErB,OAAOb,KAAK;IACd,CAAC;IAEDc,mBAAmB,CACjBd,KAAmB,EACnB;MACEM,QAAQ;MACRS,QAAQ;MACRC;IACuE,CAAC,EAC5D;MACd,IAAIhB,KAAK,CAACG,cAAc,CAACG,QAAQ,CAAC,EAAE;QAClC,OAAON,KAAK;MACd;MAEA,MAAMiB,iBAAiB,GAAG;QACxBR,KAAK,EAAE,CAAC;QACRC,QAAQ,EAAEK,QAAQ,CAACG,aAAa,CAC9B,IAAAC,kCAAgB,EAACb,QAAQ,EAAE;UACzBc,eAAe,EAAEJ,aAAa,CAACK;QACjC,CAAC,CAAC;MAEN,CAAC;MAED,IAAIL,aAAa,CAACK,OAAO,EAAE;QACzBJ,iBAAiB,CAACP,QAAQ,CAACY,KAAK,EAAE;MACpC;MAEAtB,KAAK,CAACG,cAAc,CAACG,QAAQ,CAAC,GAAGW,iBAAiB;MAElD,OAAOjB,KAAK;IACd;EACF;AACF,CAAC;AAAA,eAEcD,MAAM;AAAA"}