{"version":3,"file":"gatsby-api.js","names":["previewOptimizationPreset","presetName","useIf","inPreviewMode","options","html","useGatsbyImage","createStaticFiles","type","usingGatsbyV4OrGreater","__all","limit","Comment","Menu","MenuItem","User","defaultPluginOptions","url","verbose","debug","throwRefetchErrors","graphql","showQueryOnError","showQueryVarsOnError","copyQueryOnError","panicOnError","onlyReportCriticalErrors","copyNodeSourcingQueryAndExit","writeQueriesToDisk","copyHtmlResponseOnError","printIntrospectionDiff","timeBuildSteps","disableCompatibilityCheck","preview","develop","nodeUpdateInterval","hardCacheMediaFiles","hardCacheData","production","allow404Images","allow401Images","auth","htaccess","username","password","schema","queryDepth","circularQueryLimit","typePrefix","timeout","perPage","requestConcurrency","previewRequestConcurrency","excludeFieldNames","imageMaxWidth","fallbackImageMaxWidth","imageQuality","gatsbyImageOptions","placeholderType","presets","RootQuery","UserToMediaItemConnection","exclude","WpContentNodeToEditLockConnectionEdge","WPPageInfo","ActionMonitorAction","UserToActionMonitorActionConnection","Plugin","Theme","MediaItem","placeholderSizeName","lazyNodes","createFileNodes","localFile","excludeByMimeTypes","maxFileSizeBytes","beforeChangeNode","remoteNode","actionType","typeSettings","createdMediaItem","createLocalFileNode","mediaItemNode","parentName","id","ContentNode","nodeInterface","TermNode","menuBeforeChangeNode","EnqueuedScript","EnqueuedStylesheet","EnqueuedAsset","ContentNodeToEnqueuedScriptConnection","ContentNodeToEnqueuedStylesheetConnection","TermNodeToEnqueuedScriptConnection","TermNodeToEnqueuedStylesheetConnection","UserToEnqueuedScriptConnection","UserToEnqueuedStylesheetConnection","gatsbyApi","state","helpers","pluginOptions","reducers","setState","payload","stateCopy","defaultPresets","userPresets","optionsPresets","filter","preset","length","activePluginOptionsPresets","presetModifiedOptions","merge"],"sources":["../../src/models/gatsby-api.ts"],"sourcesContent":["import { GatsbyNodeApiHelpers } from \"~/utils/gatsby-types\"\nimport merge from \"lodash/merge\"\nimport { createLocalFileNode } from \"~/steps/source-nodes/create-nodes/create-local-file-node\"\nimport { menuBeforeChangeNode } from \"~/steps/source-nodes/before-change-node/menu\"\nimport { cloneDeep } from \"lodash\"\nimport { inPreviewMode } from \"~/steps/preview\"\nimport { usingGatsbyV4OrGreater } from \"~/utils/gatsby-version\"\n\nexport interface IPluginOptionsPreset {\n  presetName: string\n  useIf: (\n    helpers: GatsbyNodeApiHelpers,\n    pluginOptions: IPluginOptions\n  ) => boolean\n  options: IPluginOptions\n}\n\nexport const previewOptimizationPreset: IPluginOptionsPreset = {\n  presetName: `PREVIEW_OPTIMIZATION`,\n  useIf: inPreviewMode,\n  options: {\n    html: {\n      useGatsbyImage: false,\n      createStaticFiles: false,\n    },\n\n    type:\n      // in Gatsby v4+ we can't fetch nodes in resolvers.\n      // This means if we apply the following settings in v4+\n      // the site will have a lot of missing data when connection\n      // fields reference node's which werent fetched due to the limit option.\n      // so only apply the following settings before Gatsby v4\n      !usingGatsbyV4OrGreater\n        ? {\n            __all: {\n              limit: 50,\n            },\n            Comment: {\n              limit: 0,\n            },\n            Menu: {\n              limit: null,\n            },\n            MenuItem: {\n              limit: null,\n            },\n            User: {\n              limit: null,\n            },\n          }\n        : {},\n  },\n}\nexport interface IPluginOptions {\n  url?: string\n  verbose?: boolean\n  debug?: {\n    throwRefetchErrors?: boolean\n    graphql?: {\n      showQueryOnError?: boolean\n      showQueryVarsOnError?: boolean\n      copyQueryOnError?: boolean\n      panicOnError?: boolean\n      onlyReportCriticalErrors?: boolean\n      copyNodeSourcingQueryAndExit?: boolean\n      writeQueriesToDisk?: boolean\n      copyHtmlResponseOnError?: boolean\n      printIntrospectionDiff?: boolean\n    }\n    timeBuildSteps?: Array<string> | boolean\n    disableCompatibilityCheck?: boolean\n    preview?: boolean\n  }\n  develop?: {\n    nodeUpdateInterval?: number\n    hardCacheMediaFiles?: boolean\n    hardCacheData?: boolean\n  }\n  production?: {\n    hardCacheMediaFiles?: boolean\n    allow404Images?: boolean\n    allow401Images?: boolean\n  }\n  auth?: {\n    htaccess: {\n      username: string | null\n      password: string | null\n    }\n  }\n  schema?: {\n    queryDepth: number\n    circularQueryLimit: number\n    typePrefix: string\n    timeout: number // 30 seconds\n    perPage: number\n    requestConcurrency?: number\n    previewRequestConcurrency?: number\n  }\n  excludeFieldNames?: []\n  html?: {\n    useGatsbyImage?: boolean\n    gatsbyImageOptions?: Record<string, unknown>\n    imageMaxWidth?: number\n    fallbackImageMaxWidth?: number\n    imageQuality?: number\n    createStaticFiles?: boolean\n    placeholderType?: `blurred` | `dominantColor`\n  }\n  presets?: Array<IPluginOptionsPreset>\n  type?: {\n    [typename: string]: {\n      limit?: number\n      excludeFieldNames?: Array<string>\n\n      exclude?: boolean\n      // @todo type this\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      beforeChangeNode?: (any) => Promise<any>\n      nodeInterface?: boolean\n      lazyNodes?: boolean\n      createFileNodes?: boolean\n      localFile?: {\n        excludeByMimeTypes?: Array<string>\n        maxFileSizeBytes?: number\n        requestConcurrency?: number\n      }\n\n      placeholderSizeName?: string\n    }\n  }\n}\n\nconst defaultPluginOptions: IPluginOptions = {\n  url: null,\n  verbose: true,\n  debug: {\n    throwRefetchErrors: false,\n    graphql: {\n      showQueryOnError: false,\n      showQueryVarsOnError: false,\n      copyQueryOnError: false,\n      panicOnError: false,\n      onlyReportCriticalErrors: true,\n      copyNodeSourcingQueryAndExit: false,\n      writeQueriesToDisk: false,\n      copyHtmlResponseOnError: false,\n      printIntrospectionDiff: false,\n    },\n    timeBuildSteps: false,\n    disableCompatibilityCheck: false,\n    preview: false,\n  },\n  develop: {\n    nodeUpdateInterval: 5000,\n    hardCacheMediaFiles: false,\n    hardCacheData: false,\n  },\n  production: {\n    hardCacheMediaFiles: false,\n    allow404Images: false,\n    allow401Images: false,\n  },\n  auth: {\n    htaccess: {\n      username: null,\n      password: null,\n    },\n  },\n  schema: {\n    queryDepth: 15,\n    circularQueryLimit: 5,\n    typePrefix: `Wp`,\n    timeout: 30 * 1000, // 30 seconds\n    perPage: 100,\n    requestConcurrency: 15,\n    previewRequestConcurrency: 5,\n  },\n  excludeFieldNames: [],\n  html: {\n    // this causes the source plugin to find/replace images in html\n    useGatsbyImage: true,\n    // this adds a limit to the max width an image can be\n    // if the image selected in WP is smaller, or the image is smaller than this\n    // those values will be used instead.\n    imageMaxWidth: null,\n    // if a max width can't be inferred from html, this value will be passed to Sharp\n    // if the image is smaller than this, the images width will be used instead\n    fallbackImageMaxWidth: 1024,\n    imageQuality: 90,\n    //\n    // Transforms anchor links, video src's, and audio src's (that point to wp-content files) into local file static links\n    // Also fetches those files if they don't already exist\n    createStaticFiles: true,\n    //\n    // this adds image options to images in HTML fields when html.useGatsbyImage is also set\n    gatsbyImageOptions: {},\n\n    placeholderType: `blurred`,\n  },\n  presets: [previewOptimizationPreset],\n  type: {\n    __all: {\n      // @todo make dateFields into a plugin option?? It's not currently\n      // this may not be needed since WPGraphQL will be getting a Date type soon\n      // dateFields: [`date`],\n    },\n    RootQuery: {\n      excludeFieldNames: [`viewer`, `node`, `schemaMd5`],\n    },\n    UserToMediaItemConnection: {\n      // if this type is not excluded it will potentially fetch an extra 100\n      // media items per user during node sourcing\n      exclude: true,\n    },\n    WpContentNodeToEditLockConnectionEdge: {\n      exclude: true,\n    },\n    WPPageInfo: {\n      exclude: true,\n    },\n    ActionMonitorAction: {\n      exclude: true,\n    },\n    UserToActionMonitorActionConnection: {\n      exclude: true,\n    },\n    Plugin: {\n      exclude: true,\n    },\n    Theme: {\n      exclude: true,\n    },\n    MediaItem: {\n      exclude: false,\n      placeholderSizeName: `gatsby-image-placeholder`,\n      lazyNodes: false,\n      createFileNodes: true,\n      localFile: {\n        excludeByMimeTypes: [],\n        maxFileSizeBytes: 15728640, // 15Mb\n        requestConcurrency: 100,\n      },\n      beforeChangeNode: async ({\n        remoteNode,\n        actionType,\n        typeSettings,\n        // @todo type this\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }): Promise<any> => {\n        if (\n          // we fetch lazy nodes files in resolvers, no need to fetch them here.\n          typeSettings.lazyNodes ||\n          // or if the user doesn't want us to create file nodes, don't do anything.\n          !typeSettings.createFileNodes\n        ) {\n          return {\n            remoteNode,\n          }\n        }\n\n        if (\n          actionType === `CREATE_ALL` ||\n          actionType === `CREATE` ||\n          actionType === `UPDATE`\n        ) {\n          const createdMediaItem = await createLocalFileNode({\n            mediaItemNode: remoteNode,\n            parentName: `Node action ${actionType}`,\n          })\n\n          if (createdMediaItem) {\n            remoteNode.localFile = {\n              id: createdMediaItem.id,\n            }\n\n            return {\n              remoteNode,\n            }\n          }\n        }\n\n        return {\n          remoteNode,\n        }\n      },\n    },\n    ContentNode: {\n      nodeInterface: true,\n    },\n    TermNode: {\n      nodeInterface: true,\n    },\n    Menu: {\n      /**\n       * This is used to fetch child menu items\n       * on Menus as it's problematic to fetch them otherwise\n       * in WPGQL currently\n       *\n       * So after a Menu Node is fetched and processed, this function runs\n       * It loops through the child menu items, generates a query for them,\n       * fetches them, and creates nodes out of them.\n       *\n       * This runs when initially fetching all nodes, and after an incremental\n       * fetch happens\n       *\n       * When we can get a list of all menu items regardless of location in WPGQL, this can be removed.\n       */\n      beforeChangeNode: menuBeforeChangeNode,\n    },\n    // the next two types can't be sourced in Gatsby properly yet\n    // @todo instead of excluding these manually, auto exclude them\n    // based on how they behave (no single node query available)\n    EnqueuedScript: {\n      exclude: true,\n    },\n    EnqueuedStylesheet: {\n      exclude: true,\n    },\n    EnqueuedAsset: {\n      exclude: true,\n    },\n    ContentNodeToEnqueuedScriptConnection: {\n      exclude: true,\n    },\n    ContentNodeToEnqueuedStylesheetConnection: {\n      exclude: true,\n    },\n    TermNodeToEnqueuedScriptConnection: {\n      exclude: true,\n    },\n    TermNodeToEnqueuedStylesheetConnection: {\n      exclude: true,\n    },\n    UserToEnqueuedScriptConnection: {\n      exclude: true,\n    },\n    UserToEnqueuedStylesheetConnection: {\n      exclude: true,\n    },\n  },\n}\n\nexport interface IGatsbyApiState {\n  helpers: GatsbyNodeApiHelpers\n  pluginOptions: IPluginOptions\n  activePluginOptionsPresets?: Array<IPluginOptionsPreset>\n}\n\nconst gatsbyApi = {\n  state: {\n    helpers: {},\n    pluginOptions: defaultPluginOptions,\n  } as IGatsbyApiState,\n\n  reducers: {\n    setState(\n      state: IGatsbyApiState,\n      payload: IGatsbyApiState\n    ): IGatsbyApiState {\n      const stateCopy = cloneDeep(state)\n\n      const defaultPresets = stateCopy.pluginOptions?.presets || []\n      const userPresets = payload.pluginOptions?.presets || []\n\n      /**\n       * Presets are plugin option configurations that are conditionally\n       * applied based on a `useIf` function (which returns a boolean)\n       * If it returns true, that preset is used.\n       */\n      const optionsPresets = [...defaultPresets, ...userPresets]?.filter(\n        preset => preset.useIf(payload.helpers, payload.pluginOptions)\n      )\n\n      if (optionsPresets?.length) {\n        state.activePluginOptionsPresets = optionsPresets\n\n        let presetModifiedOptions = state.pluginOptions\n\n        for (const preset of optionsPresets) {\n          presetModifiedOptions = merge(presetModifiedOptions, preset.options)\n        }\n\n        state.pluginOptions = presetModifiedOptions\n      }\n\n      // add the user defined plugin options last so they override any presets\n      state = merge(state, payload)\n\n      return state\n    },\n  },\n}\n\nexport default gatsbyApi\n"],"mappings":";;;;;;AACA;AACA;AACA;AAEA;AACA;AAWO,MAAMA,yBAA+C,GAAG;EAC7DC,UAAU,EAAG,sBAAqB;EAClCC,KAAK,EAAEC,sBAAa;EACpBC,OAAO,EAAE;IACPC,IAAI,EAAE;MACJC,cAAc,EAAE,KAAK;MACrBC,iBAAiB,EAAE;IACrB,CAAC;IAEDC,IAAI;IACF;IACA;IACA;IACA;IACA;IACA,CAACC,qCAAsB,GACnB;MACEC,KAAK,EAAE;QACLC,KAAK,EAAE;MACT,CAAC;MACDC,OAAO,EAAE;QACPD,KAAK,EAAE;MACT,CAAC;MACDE,IAAI,EAAE;QACJF,KAAK,EAAE;MACT,CAAC;MACDG,QAAQ,EAAE;QACRH,KAAK,EAAE;MACT,CAAC;MACDI,IAAI,EAAE;QACJJ,KAAK,EAAE;MACT;IACF,CAAC,GACD,CAAC;EACT;AACF,CAAC;AAAA;AAgFD,MAAMK,oBAAoC,GAAG;EAC3CC,GAAG,EAAE,IAAI;EACTC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE;IACLC,kBAAkB,EAAE,KAAK;IACzBC,OAAO,EAAE;MACPC,gBAAgB,EAAE,KAAK;MACvBC,oBAAoB,EAAE,KAAK;MAC3BC,gBAAgB,EAAE,KAAK;MACvBC,YAAY,EAAE,KAAK;MACnBC,wBAAwB,EAAE,IAAI;MAC9BC,4BAA4B,EAAE,KAAK;MACnCC,kBAAkB,EAAE,KAAK;MACzBC,uBAAuB,EAAE,KAAK;MAC9BC,sBAAsB,EAAE;IAC1B,CAAC;IACDC,cAAc,EAAE,KAAK;IACrBC,yBAAyB,EAAE,KAAK;IAChCC,OAAO,EAAE;EACX,CAAC;EACDC,OAAO,EAAE;IACPC,kBAAkB,EAAE,IAAI;IACxBC,mBAAmB,EAAE,KAAK;IAC1BC,aAAa,EAAE;EACjB,CAAC;EACDC,UAAU,EAAE;IACVF,mBAAmB,EAAE,KAAK;IAC1BG,cAAc,EAAE,KAAK;IACrBC,cAAc,EAAE;EAClB,CAAC;EACDC,IAAI,EAAE;IACJC,QAAQ,EAAE;MACRC,QAAQ,EAAE,IAAI;MACdC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,MAAM,EAAE;IACNC,UAAU,EAAE,EAAE;IACdC,kBAAkB,EAAE,CAAC;IACrBC,UAAU,EAAG,IAAG;IAChBC,OAAO,EAAE,EAAE,GAAG,IAAI;IAAE;IACpBC,OAAO,EAAE,GAAG;IACZC,kBAAkB,EAAE,EAAE;IACtBC,yBAAyB,EAAE;EAC7B,CAAC;EACDC,iBAAiB,EAAE,EAAE;EACrBhD,IAAI,EAAE;IACJ;IACAC,cAAc,EAAE,IAAI;IACpB;IACA;IACA;IACAgD,aAAa,EAAE,IAAI;IACnB;IACA;IACAC,qBAAqB,EAAE,IAAI;IAC3BC,YAAY,EAAE,EAAE;IAChB;IACA;IACA;IACAjD,iBAAiB,EAAE,IAAI;IACvB;IACA;IACAkD,kBAAkB,EAAE,CAAC,CAAC;IAEtBC,eAAe,EAAG;EACpB,CAAC;EACDC,OAAO,EAAE,CAAC3D,yBAAyB,CAAC;EACpCQ,IAAI,EAAE;IACJE,KAAK,EAAE;MACL;MACA;MACA;IAAA,CACD;IACDkD,SAAS,EAAE;MACTP,iBAAiB,EAAE,CAAE,QAAO,EAAG,MAAK,EAAG,WAAU;IACnD,CAAC;IACDQ,yBAAyB,EAAE;MACzB;MACA;MACAC,OAAO,EAAE;IACX,CAAC;IACDC,qCAAqC,EAAE;MACrCD,OAAO,EAAE;IACX,CAAC;IACDE,UAAU,EAAE;MACVF,OAAO,EAAE;IACX,CAAC;IACDG,mBAAmB,EAAE;MACnBH,OAAO,EAAE;IACX,CAAC;IACDI,mCAAmC,EAAE;MACnCJ,OAAO,EAAE;IACX,CAAC;IACDK,MAAM,EAAE;MACNL,OAAO,EAAE;IACX,CAAC;IACDM,KAAK,EAAE;MACLN,OAAO,EAAE;IACX,CAAC;IACDO,SAAS,EAAE;MACTP,OAAO,EAAE,KAAK;MACdQ,mBAAmB,EAAG,0BAAyB;MAC/CC,SAAS,EAAE,KAAK;MAChBC,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAE;QACTC,kBAAkB,EAAE,EAAE;QACtBC,gBAAgB,EAAE,QAAQ;QAAE;QAC5BxB,kBAAkB,EAAE;MACtB,CAAC;MACDyB,gBAAgB,EAAE,OAAO;QACvBC,UAAU;QACVC,UAAU;QACVC;QACA;QACA;MACF,CAAC,KAAmB;QAClB;QACE;QACAA,YAAY,CAACR,SAAS;QACtB;QACA,CAACQ,YAAY,CAACP,eAAe,EAC7B;UACA,OAAO;YACLK;UACF,CAAC;QACH;QAEA,IACEC,UAAU,KAAM,YAAW,IAC3BA,UAAU,KAAM,QAAO,IACvBA,UAAU,KAAM,QAAO,EACvB;UACA,MAAME,gBAAgB,GAAG,MAAM,IAAAC,wCAAmB,EAAC;YACjDC,aAAa,EAAEL,UAAU;YACzBM,UAAU,EAAG,eAAcL,UAAW;UACxC,CAAC,CAAC;UAEF,IAAIE,gBAAgB,EAAE;YACpBH,UAAU,CAACJ,SAAS,GAAG;cACrBW,EAAE,EAAEJ,gBAAgB,CAACI;YACvB,CAAC;YAED,OAAO;cACLP;YACF,CAAC;UACH;QACF;QAEA,OAAO;UACLA;QACF,CAAC;MACH;IACF,CAAC;IACDQ,WAAW,EAAE;MACXC,aAAa,EAAE;IACjB,CAAC;IACDC,QAAQ,EAAE;MACRD,aAAa,EAAE;IACjB,CAAC;IACDzE,IAAI,EAAE;MACJ;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM+D,gBAAgB,EAAEY;IACpB,CAAC;IACD;IACA;IACA;IACAC,cAAc,EAAE;MACd3B,OAAO,EAAE;IACX,CAAC;IACD4B,kBAAkB,EAAE;MAClB5B,OAAO,EAAE;IACX,CAAC;IACD6B,aAAa,EAAE;MACb7B,OAAO,EAAE;IACX,CAAC;IACD8B,qCAAqC,EAAE;MACrC9B,OAAO,EAAE;IACX,CAAC;IACD+B,yCAAyC,EAAE;MACzC/B,OAAO,EAAE;IACX,CAAC;IACDgC,kCAAkC,EAAE;MAClChC,OAAO,EAAE;IACX,CAAC;IACDiC,sCAAsC,EAAE;MACtCjC,OAAO,EAAE;IACX,CAAC;IACDkC,8BAA8B,EAAE;MAC9BlC,OAAO,EAAE;IACX,CAAC;IACDmC,kCAAkC,EAAE;MAClCnC,OAAO,EAAE;IACX;EACF;AACF,CAAC;AAQD,MAAMoC,SAAS,GAAG;EAChBC,KAAK,EAAE;IACLC,OAAO,EAAE,CAAC,CAAC;IACXC,aAAa,EAAErF;EACjB,CAAoB;EAEpBsF,QAAQ,EAAE;IACRC,QAAQ,CACNJ,KAAsB,EACtBK,OAAwB,EACP;MAAA;MACjB,MAAMC,SAAS,GAAG,yBAAUN,KAAK,CAAC;MAElC,MAAMO,cAAc,GAAG,0BAAAD,SAAS,CAACJ,aAAa,0DAAvB,sBAAyB1C,OAAO,KAAI,EAAE;MAC7D,MAAMgD,WAAW,GAAG,0BAAAH,OAAO,CAACH,aAAa,0DAArB,sBAAuB1C,OAAO,KAAI,EAAE;;MAExD;AACN;AACA;AACA;AACA;MACM,MAAMiD,cAAc,WAAG,CAAC,GAAGF,cAAc,EAAE,GAAGC,WAAW,CAAC,yCAAnC,KAAqCE,MAAM,CAChEC,MAAM,IAAIA,MAAM,CAAC5G,KAAK,CAACsG,OAAO,CAACJ,OAAO,EAAEI,OAAO,CAACH,aAAa,CAAC,CAC/D;MAED,IAAIO,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEG,MAAM,EAAE;QAC1BZ,KAAK,CAACa,0BAA0B,GAAGJ,cAAc;QAEjD,IAAIK,qBAAqB,GAAGd,KAAK,CAACE,aAAa;QAE/C,KAAK,MAAMS,MAAM,IAAIF,cAAc,EAAE;UACnCK,qBAAqB,GAAG,IAAAC,cAAK,EAACD,qBAAqB,EAAEH,MAAM,CAAC1G,OAAO,CAAC;QACtE;QAEA+F,KAAK,CAACE,aAAa,GAAGY,qBAAqB;MAC7C;;MAEA;MACAd,KAAK,GAAG,IAAAe,cAAK,EAACf,KAAK,EAAEK,OAAO,CAAC;MAE7B,OAAOL,KAAK;IACd;EACF;AACF,CAAC;AAAA,eAEcD,SAAS;AAAA"}