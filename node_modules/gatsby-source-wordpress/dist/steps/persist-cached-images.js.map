{"version":3,"file":"persist-cached-images.js","names":["persistPreviouslyCachedImages","helpers","pluginOptions","getGatsbyApi","mediaItemNodes","getNodesByType","schema","typePrefix","forEach","node","actions","touchNode","imageNodeMetaByUrl","getPersistentCache","key","store","dispatch","imageNodes","setState","nodeMetaByUrl"],"sources":["../../src/steps/persist-cached-images.ts"],"sourcesContent":["import { Step } from \"./../utils/run-steps\"\nimport store from \"~/store\"\nimport { getGatsbyApi } from \"~/utils/get-gatsby-api\"\nimport { getPersistentCache } from \"~/utils/cache\"\n\nconst persistPreviouslyCachedImages: Step = async (): Promise<void> => {\n  const { helpers, pluginOptions } = getGatsbyApi()\n\n  // get all existing media item nodes\n  const mediaItemNodes = helpers.getNodesByType(\n    `${pluginOptions.schema.typePrefix}MediaItem`\n  )\n\n  // and touch them so they aren't garbage collected.\n  // we will remove them as needed when receiving DELETE events from WP\n  mediaItemNodes.forEach(node => helpers.actions.touchNode(node))\n\n  const imageNodeMetaByUrl = await getPersistentCache({\n    key: `image-node-meta-by-url`,\n  })\n\n  if (imageNodeMetaByUrl) {\n    store.dispatch.imageNodes.setState({\n      nodeMetaByUrl: imageNodeMetaByUrl,\n    })\n  }\n}\n\nexport { persistPreviouslyCachedImages }\n"],"mappings":";;;;;AACA;AACA;AACA;AAEA,MAAMA,6BAAmC,GAAG,YAA2B;EACrE,MAAM;IAAEC,OAAO;IAAEC;EAAc,CAAC,GAAG,IAAAC,0BAAY,GAAE;;EAEjD;EACA,MAAMC,cAAc,GAAGH,OAAO,CAACI,cAAc,CAC1C,GAAEH,aAAa,CAACI,MAAM,CAACC,UAAW,WAAU,CAC9C;;EAED;EACA;EACAH,cAAc,CAACI,OAAO,CAACC,IAAI,IAAIR,OAAO,CAACS,OAAO,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC;EAE/D,MAAMG,kBAAkB,GAAG,MAAM,IAAAC,yBAAkB,EAAC;IAClDC,GAAG,EAAG;EACR,CAAC,CAAC;EAEF,IAAIF,kBAAkB,EAAE;IACtBG,cAAK,CAACC,QAAQ,CAACC,UAAU,CAACC,QAAQ,CAAC;MACjCC,aAAa,EAAEP;IACjB,CAAC,CAAC;EACJ;AACF,CAAC;AAAA"}