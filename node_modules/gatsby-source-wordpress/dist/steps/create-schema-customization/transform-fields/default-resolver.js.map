{"version":3,"file":"default-resolver.js","names":["buildDefaultResolver","transformerApi","source","_","context","fieldName","field","gatsbyNodeTypes","finalFieldValue","resolvedField","autoAliasedFieldPropertyName","type","name","aliasedField","typeName","findNamedTypeName","autoAliasedFieldName","aliasedField2","__typename","buildTypeName","isANodeConnection","id","Object","keys","length","includes","gatsbyNodeResolver","buildGatsbyNodeObjectResolver"],"sources":["../../../../src/steps/create-schema-customization/transform-fields/default-resolver.js"],"sourcesContent":["import { findNamedTypeName } from \"~/steps/create-schema-customization/helpers\"\n\nimport { buildGatsbyNodeObjectResolver } from \"~/steps/create-schema-customization/transform-fields/transform-object\"\nimport { buildTypeName } from \"../helpers\"\n\nexport const buildDefaultResolver = transformerApi => (source, _, context) => {\n  const { fieldName, field, gatsbyNodeTypes } = transformerApi\n\n  let finalFieldValue\n\n  const resolvedField = source[fieldName]\n\n  if (typeof resolvedField !== `undefined`) {\n    finalFieldValue = resolvedField\n  }\n\n  const autoAliasedFieldPropertyName = `${fieldName}__typename_${field?.type?.name}`\n\n  const aliasedField = source[autoAliasedFieldPropertyName]\n\n  if (\n    typeof resolvedField === `undefined` &&\n    typeof aliasedField !== `undefined`\n  ) {\n    finalFieldValue = aliasedField\n  }\n\n  // the findNamedTypeName helpers was written after this resolver\n  // had been in production for a while.\n  // so we don't know if in all cases it will find the right typename\n  // for this resolver..\n  // So the old way of doing it is above in autoAliasedFieldPropertyName\n  // @todo write comprehesive data resolution integration tests\n  // using many different WPGraphQL extensions\n  // then come back and remove the `return aliasedField` line and\n  // see if this still resolves everything properly\n  const typeName = findNamedTypeName(field.type)\n  const autoAliasedFieldName = `${fieldName}__typename_${typeName}`\n\n  const aliasedField2 = source[autoAliasedFieldName]\n\n  if (\n    typeof resolvedField === `undefined` &&\n    typeof aliasedField2 !== `undefined`\n  ) {\n    finalFieldValue = aliasedField2\n  }\n\n  if (finalFieldValue?.__typename) {\n    // in Gatsby V3 this property is used to determine the type of an interface field\n    // instead of the resolveType fn. This means we need to prefix it so that gql doesn't throw errors about missing types.\n    finalFieldValue.__typename = buildTypeName(finalFieldValue.__typename)\n  }\n\n  const isANodeConnection =\n    // if this field has just an id and typename\n    finalFieldValue?.id &&\n    finalFieldValue?.__typename &&\n    Object.keys(finalFieldValue).length === 2 &&\n    // and it's a Gatsby Node type\n    gatsbyNodeTypes.includes(finalFieldValue.__typename)\n\n  if (isANodeConnection) {\n    const gatsbyNodeResolver = buildGatsbyNodeObjectResolver(transformerApi)\n    return gatsbyNodeResolver(source, _, context)\n  }\n\n  return finalFieldValue\n}\n"],"mappings":";;;;AAAA;AAEA;AAGO,MAAMA,oBAAoB,GAAGC,cAAc,IAAI,CAACC,MAAM,EAAEC,CAAC,EAAEC,OAAO,KAAK;EAAA;EAC5E,MAAM;IAAEC,SAAS;IAAEC,KAAK;IAAEC;EAAgB,CAAC,GAAGN,cAAc;EAE5D,IAAIO,eAAe;EAEnB,MAAMC,aAAa,GAAGP,MAAM,CAACG,SAAS,CAAC;EAEvC,IAAI,OAAOI,aAAa,KAAM,WAAU,EAAE;IACxCD,eAAe,GAAGC,aAAa;EACjC;EAEA,MAAMC,4BAA4B,GAAI,GAAEL,SAAU,cAAaC,KAAK,aAALA,KAAK,sCAALA,KAAK,CAAEK,IAAI,gDAAX,YAAaC,IAAK,EAAC;EAElF,MAAMC,YAAY,GAAGX,MAAM,CAACQ,4BAA4B,CAAC;EAEzD,IACE,OAAOD,aAAa,KAAM,WAAU,IACpC,OAAOI,YAAY,KAAM,WAAU,EACnC;IACAL,eAAe,GAAGK,YAAY;EAChC;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,QAAQ,GAAG,IAAAC,0BAAiB,EAACT,KAAK,CAACK,IAAI,CAAC;EAC9C,MAAMK,oBAAoB,GAAI,GAAEX,SAAU,cAAaS,QAAS,EAAC;EAEjE,MAAMG,aAAa,GAAGf,MAAM,CAACc,oBAAoB,CAAC;EAElD,IACE,OAAOP,aAAa,KAAM,WAAU,IACpC,OAAOQ,aAAa,KAAM,WAAU,EACpC;IACAT,eAAe,GAAGS,aAAa;EACjC;EAEA,wBAAIT,eAAe,6CAAf,iBAAiBU,UAAU,EAAE;IAC/B;IACA;IACAV,eAAe,CAACU,UAAU,GAAG,IAAAC,sBAAa,EAACX,eAAe,CAACU,UAAU,CAAC;EACxE;EAEA,MAAME,iBAAiB;EACrB;EACA,sBAAAZ,eAAe,sDAAf,kBAAiBa,EAAE,2BACnBb,eAAe,sDAAf,kBAAiBU,UAAU,KAC3BI,MAAM,CAACC,IAAI,CAACf,eAAe,CAAC,CAACgB,MAAM,KAAK,CAAC;EACzC;EACAjB,eAAe,CAACkB,QAAQ,CAACjB,eAAe,CAACU,UAAU,CAAC;EAEtD,IAAIE,iBAAiB,EAAE;IACrB,MAAMM,kBAAkB,GAAG,IAAAC,8CAA6B,EAAC1B,cAAc,CAAC;IACxE,OAAOyB,kBAAkB,CAACxB,MAAM,EAAEC,CAAC,EAAEC,OAAO,CAAC;EAC/C;EAEA,OAAOI,eAAe;AACxB,CAAC;AAAA"}