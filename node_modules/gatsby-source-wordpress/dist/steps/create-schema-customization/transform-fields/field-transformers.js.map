{"version":3,"file":"field-transformers.js","names":["fieldTransformers","description","test","field","type","kind","ofType","transform","typeIsABuiltInScalar","findNamedTypeName","name","typeName","normalizedTypeName","buildTypeName","implementsNodeInterface","store","getState","remoteSchema","typeMap","get","interfaces","some","i","isAListOfGatsbyNodeInterfaces","transformListOfGatsbyNodes","fieldName","originalTypeName","typeKind","findTypeKind","resolve","source","resolvedField","autoAliasedFieldPropertyName","aliasedField","gatsbyNodeTypes","getGatsbyNodeTypeNames","pluginOptions","getPluginOptions","isAnInterfaceTypeOfGatsbyNodes","possibleTypes","filter","possibleType","typeIsExcluded","every","includes","transformGatsbyNodeObject","find","transformListOfUnions","transformUnion"],"sources":["../../../../src/steps/create-schema-customization/transform-fields/field-transformers.js"],"sourcesContent":["import { buildTypeName, findNamedTypeName, findTypeKind } from \"../helpers\"\nimport { transformUnion, transformListOfUnions } from \"./transform-union\"\nimport {\n  transformListOfGatsbyNodes,\n  transformGatsbyNodeObject,\n} from \"./transform-object\"\nimport { getGatsbyNodeTypeNames } from \"../../source-nodes/fetch-nodes/fetch-nodes\"\nimport { typeIsABuiltInScalar } from \"~/steps/create-schema-customization/helpers\"\nimport store from \"~/store\"\nimport { typeIsExcluded } from \"~/steps/ingest-remote-schema/is-excluded\"\nimport { getPluginOptions } from \"~/utils/get-gatsby-api\"\n\nexport const fieldTransformers = [\n  {\n    description: `NON_NULL Scalar`,\n    test: field =>\n      field.type.kind === `NON_NULL` && field.type.ofType.kind === `SCALAR`,\n\n    transform: ({ field }) => {\n      if (typeIsABuiltInScalar(field.type)) {\n        return `${findNamedTypeName(field.type.ofType)}!`\n      } else {\n        return `JSON!`\n      }\n    },\n  },\n\n  {\n    description: `NON_NULL list type`,\n    test: field =>\n      field.type.kind === `NON_NULL` &&\n      field.type.ofType.kind === `LIST` &&\n      (field.type.ofType.name || field.type.ofType?.ofType?.name),\n\n    transform: ({ field }) => {\n      const typeName = findNamedTypeName(field.type)\n      const normalizedTypeName = typeIsABuiltInScalar(field.type)\n        ? typeName\n        : buildTypeName(typeName)\n\n      return `[${normalizedTypeName}]!`\n    },\n  },\n\n  {\n    description: `Lists of Gatsby node interfaces`,\n    test: field => {\n      const implementsNodeInterface = store\n        .getState()\n        .remoteSchema.typeMap.get(findNamedTypeName(field.type))\n        ?.interfaces?.some(i => i.name === `Node`)\n\n      const isAListOfGatsbyNodeInterfaces =\n        (field.type.kind === `LIST` || field.type.ofType?.kind === `LIST`) &&\n        implementsNodeInterface\n\n      return isAListOfGatsbyNodeInterfaces\n    },\n\n    transform: transformListOfGatsbyNodes,\n  },\n\n  {\n    description: `NON_NULL lists of NON_NULL types`,\n    test: field =>\n      field.type.kind === `NON_NULL` &&\n      field.type.ofType.kind === `LIST` &&\n      field.type.ofType?.ofType?.kind === `NON_NULL`,\n\n    transform: ({ field, fieldName }) => {\n      const originalTypeName = findNamedTypeName(field.type)\n      const typeKind = findTypeKind(field.type)\n\n      const normalizedTypeName =\n        typeKind === `SCALAR` && typeIsABuiltInScalar(field.type)\n          ? originalTypeName\n          : buildTypeName(originalTypeName)\n\n      return {\n        type: `[${normalizedTypeName}!]!`,\n        resolve: source => {\n          const resolvedField = source[fieldName]\n\n          if (typeof resolvedField !== `undefined`) {\n            return resolvedField ?? []\n          }\n\n          const autoAliasedFieldPropertyName = `${fieldName}__typename_${field?.type?.name}`\n\n          const aliasedField = source[autoAliasedFieldPropertyName]\n\n          return aliasedField ?? []\n        },\n      }\n    },\n  },\n\n  {\n    description: `Lists of NON_NULL builtin types`,\n    test: field =>\n      field.type.kind === `LIST` &&\n      field.type.ofType.kind === `NON_NULL` &&\n      (field.type.ofType.name ?? field.type.ofType?.ofType?.name) &&\n      typeIsABuiltInScalar(field.type),\n\n    transform: ({ field }) => `[${findNamedTypeName(field.type)}!]`,\n  },\n\n  {\n    description: `Lists of NON_NULL types`,\n    test: field =>\n      field.type.kind === `LIST` &&\n      field.type.ofType.kind === `NON_NULL` &&\n      (field.type.ofType.name ?? field.type.ofType?.ofType?.name),\n\n    transform: ({ field }) =>\n      `[${buildTypeName(findNamedTypeName(field.type))}!]`,\n  },\n\n  {\n    description: `ENUM type`,\n    test: field => field.type.kind === `ENUM`,\n    transform: ({ field }) => buildTypeName(field.type.name),\n  },\n\n  {\n    description: `Scalar type`,\n    test: field => field.type.kind === `SCALAR`,\n    transform: ({ field }) => {\n      if (typeIsABuiltInScalar(field.type)) {\n        return field.type.name\n      } else {\n        // custom scalars are typed as JSON\n        // @todo if frequently requested,\n        // make this hookable so a plugin could register a custom scalar\n        return `JSON`\n      }\n    },\n  },\n\n  {\n    description: `Gatsby Node Objects or Gatsby Node Interfaces where all possible types are Gatsby Nodes`,\n    test: field => {\n      const gatsbyNodeTypes = getGatsbyNodeTypeNames()\n\n      const pluginOptions = getPluginOptions()\n\n      const isAnInterfaceTypeOfGatsbyNodes =\n        // if this is an interface\n        field.type.kind === `INTERFACE` &&\n        // and every possible type is a future gatsby node\n        store\n          .getState()\n          // get the full type for this interface\n          .remoteSchema.typeMap.get(findNamedTypeName(field.type))\n          // filter out any excluded types\n          .possibleTypes?.filter(\n            possibleType =>\n              !typeIsExcluded({\n                pluginOptions,\n                typeName: possibleType.name,\n              })\n          )\n          // if every remaining type is a Gatsby node type\n          // then use this field transformer\n          ?.every(possibleType => gatsbyNodeTypes.includes(possibleType.name))\n\n      return (\n        (gatsbyNodeTypes.includes(field.type.name) &&\n          field.type.kind === `OBJECT`) ||\n        isAnInterfaceTypeOfGatsbyNodes\n      )\n    },\n\n    transform: transformGatsbyNodeObject,\n  },\n\n  {\n    description: `Lists of Gatsby Node Object types`,\n    test: field => {\n      const gatsbyNodeTypes = getGatsbyNodeTypeNames()\n\n      const {\n        remoteSchema: { typeMap },\n      } = store.getState()\n\n      return (\n        // this is a list of Gatsby nodes\n        (field.type.kind === `LIST` &&\n          field.type.ofType.kind === `OBJECT` &&\n          gatsbyNodeTypes.includes(field.type.ofType.name)) ||\n        // or it's a list of an interface type which Gatsby nodes implement\n        (field.type.kind === `LIST` &&\n          field.type.ofType.kind === `INTERFACE` &&\n          typeMap\n            .get(field.type.ofType.name)\n            ?.possibleTypes?.find(possibleType =>\n              gatsbyNodeTypes.includes(possibleType.name)\n            ))\n      )\n    },\n\n    transform: transformListOfGatsbyNodes,\n  },\n\n  {\n    description: `Non-Gatsby Node Objects`,\n    test: field => field.type.kind === `OBJECT`,\n    transform: ({ field }) => buildTypeName(field.type.name),\n  },\n\n  {\n    description: `Lists of Non Gatsby Node Objects`,\n    test: field =>\n      field.type.kind === `LIST` &&\n      (field.type.ofType.kind === `OBJECT` ||\n        field.type.ofType.kind === `ENUM`),\n\n    transform: ({ field }) => `[${buildTypeName(field.type.ofType.name)}]`,\n  },\n\n  {\n    description: `Lists of Union types`,\n    test: field =>\n      field.type.kind === `LIST` && field.type.ofType.kind === `UNION`,\n\n    transform: transformListOfUnions,\n  },\n\n  {\n    description: `Lists of Scalar types`,\n    test: field =>\n      field.type.kind === `LIST` && field.type.ofType.kind === `SCALAR`,\n\n    transform: ({ field }) => {\n      if (typeIsABuiltInScalar(field.type)) {\n        return `[${field.type.ofType.name}]`\n      } else {\n        return `[JSON]`\n      }\n    },\n  },\n\n  {\n    description: `Lists of Interface types`,\n    test: field =>\n      field.type.kind === `LIST` && field.type.ofType.kind === `INTERFACE`,\n\n    transform: ({ field }) =>\n      `[${buildTypeName(findNamedTypeName(field.type))}]`,\n  },\n\n  {\n    description: `Union type`,\n    test: field => field.type.kind === `UNION`,\n    transform: transformUnion,\n  },\n\n  {\n    description: `Interface type`,\n    test: field => field.type.kind === `INTERFACE`,\n    transform: ({ field }) => buildTypeName(field.type.name),\n  },\n\n  {\n    description: `Lists of NON_NULL types`,\n    test: field =>\n      findTypeKind(field.type) !== `LIST` && field.type.kind === `NON_NULL`,\n    transform: ({ field }) =>\n      `${buildTypeName(findNamedTypeName(field.type))}!`,\n  },\n\n  // for finding unhandled types\n  // {\n  //   description: `Unhandled type`,\n  //   test: () => true,\n  //   transform: ({ field }) => dd(field),\n  // },\n]\n"],"mappings":"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"}