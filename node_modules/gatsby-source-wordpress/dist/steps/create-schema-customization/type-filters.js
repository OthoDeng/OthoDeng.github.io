"use strict";

exports.__esModule = true;
exports.typeDefinitionFilters = void 0;
var _helpers = require("./helpers");
const typeDefinitionFilters = [{
  typeName: `__all`,
  typeDef: (typeDef, {
    type
  }) => {
    var _typeDef$interfaces, _typeDef$fields, _typeDef$fields2, _typeDef$fields3, _typeDef$fields4;
    if (type.interfaces && typeDef) {
      typeDef.interfaces ||= [];
      typeDef.interfaces.push(...(0, _helpers.buildInterfacesListForType)(type));
    }
    if (typeDef !== null && typeDef !== void 0 && (_typeDef$interfaces = typeDef.interfaces) !== null && _typeDef$interfaces !== void 0 && _typeDef$interfaces.includes(`Node`)) {
      // used to filter by different node types within a node interface
      typeDef.fields.nodeType = `String`;
    }
    if (typeDef !== null && typeDef !== void 0 && (_typeDef$fields = typeDef.fields) !== null && _typeDef$fields !== void 0 && _typeDef$fields.date) {
      const dateField = {
        ...typeDef.fields.date,
        type: `Date`,
        extensions: {
          dateformat: {}
        }
      };
      typeDef.fields.date = dateField;
    }
    if (typeDef !== null && typeDef !== void 0 && (_typeDef$fields2 = typeDef.fields) !== null && _typeDef$fields2 !== void 0 && _typeDef$fields2.dateGmt) {
      const dateField = {
        ...typeDef.fields.dateGmt,
        type: `Date`,
        extensions: {
          dateformat: {}
        }
      };
      typeDef.fields.dateGmt = dateField;
    }
    if (typeDef !== null && typeDef !== void 0 && (_typeDef$fields3 = typeDef.fields) !== null && _typeDef$fields3 !== void 0 && _typeDef$fields3.modified) {
      const dateField = {
        ...typeDef.fields.modified,
        type: `Date`,
        extensions: {
          dateformat: {}
        }
      };
      typeDef.fields.modified = dateField;
    }
    if (typeDef !== null && typeDef !== void 0 && (_typeDef$fields4 = typeDef.fields) !== null && _typeDef$fields4 !== void 0 && _typeDef$fields4.modifiedGmt) {
      const dateField = {
        ...typeDef.fields.modifiedGmt,
        type: `Date`,
        extensions: {
          dateformat: {}
        }
      };
      typeDef.fields.modifiedGmt = dateField;
    }
    return typeDef;
  }
}, {
  typeName: `MediaItem`,
  typeDef: objectType => {
    objectType.fields.localFile = {
      type: `File`,
      extensions: {
        link: {
          from: `localFile.id`
        }
      }
    };
    return objectType;
  }
}];
exports.typeDefinitionFilters = typeDefinitionFilters;
//# sourceMappingURL=type-filters.js.map