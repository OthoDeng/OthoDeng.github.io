{"version":3,"file":"index.js","names":["inDevelopPreview","process","env","NODE_ENV","ENABLE_GATSBY_REFRESH_ENDPOINT","inPreviewRunner","RUNNER_TYPE","IS_GATSBY_PREVIEW","inPreviewMode","previewQueue","getPreviewQueue","previewRequestConcurrency","store","getState","gatsbyApi","pluginOptions","schema","PQueue","concurrency","carryoverConcurrencyCount","previewForIdIsAlreadyBeingProcessed","id","existingCallbacks","previewStore","nodePageCreatedCallbacks","alreadyProcessingThisPreview","writeDummyPageDataJsonIfNeeded","previewData","pageNode","isDraft","pageDataDirectory","path","join","cwd","fs","ensureDir","pageDataPath","pageDataExists","pathExists","writeJSON","createPreviewStatusCallback","reporter","passedNode","context","status","graphqlEndpoint","error","statusContext","message","data","fetchGraphql","url","query","variables","input","clientMutationId","modified","pagePath","parentDatabaseId","previewDatabaseId","errorContext","forceReportCriticalErrors","headers","WPGatsbyPreview","token","WPGatsbyPreviewUser","userDatabaseId","wpGatsbyRemotePreviewStatus","success","log","formatLogMessage","sourcePreview","actions","requiredProperties","missingProperties","filter","property","length","warn","info","JSON","stringify","touchValidNodes","sendPreviewStatus","dispatch","subscribeToPagesCreatedFromNodeById","nodeId","node","fetchAndCreateSingleNode","actionType","previewParentId","isPreview","manifestIds","forEach","manifestId","unstable_createNodeManifest","sourcePreviews","helpers","webhookBody","debug","preview","inPreviewDebugModeOption","getPluginOptions","remoteUrl","hostname","settingsHostname","urlUtil","parse","remoteHostname","databaseId","chalk","bold","inPreviewDebugMode","WP_GATSBY_PREVIEW_DEBUG","dump","wpGatsbyPreviewNodeManifestsAreSupported","remoteSchemaSupportsFieldNameOnTypeName","typeName","fieldName","previewActions","paginatedWpNodeFetch","contentTypePlural","nodeTypeName","Date","now","queue","add","Promise","all","onEmpty","onIdle","invokeAndCleanupLeftoverPreviewCallbacks"],"sources":["../../../src/steps/preview/index.ts"],"sourcesContent":["import { getPluginOptions } from \"./../../utils/get-gatsby-api\"\nimport { GatsbyHelpers } from \"~/utils/gatsby-types\"\nimport path from \"path\"\nimport fs from \"fs-extra\"\nimport chalk from \"chalk\"\nimport urlUtil from \"url\"\nimport PQueue from \"p-queue\"\nimport { dump } from \"dumper.js\"\nimport { actions as gatsbyActions } from \"gatsby/dist/redux/actions/public\"\n\nimport { remoteSchemaSupportsFieldNameOnTypeName } from \"~/steps/ingest-remote-schema/introspect-remote-schema\"\nimport { paginatedWpNodeFetch } from \"~/steps/source-nodes/fetch-nodes/fetch-nodes-paginated\"\nimport fetchGraphql from \"~/utils/fetch-graphql\"\n\nimport store from \"~/store\"\n\nimport { fetchAndCreateSingleNode } from \"~/steps/source-nodes/update-nodes/wp-actions/update\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { touchValidNodes } from \"../source-nodes/update-nodes/fetch-node-updates\"\n\nimport { Reporter } from \"gatsby/reporter\"\nimport { invokeAndCleanupLeftoverPreviewCallbacks } from \"./cleanup\"\n\nconst inDevelopPreview =\n  process.env.NODE_ENV === `development` &&\n  !!process.env.ENABLE_GATSBY_REFRESH_ENDPOINT\n\nconst inPreviewRunner =\n  process.env.RUNNER_TYPE === `PREVIEW` ||\n  process.env.RUNNER_TYPE === `INCREMENTAL_PREVIEWS` ||\n  !!process.env.IS_GATSBY_PREVIEW\n\n// this is a function simply because many places in the code expect it to be.\n// it used to call store.getState() and check for some state to determine preview mode\nexport const inPreviewMode = (): boolean => inDevelopPreview || inPreviewRunner\n\nexport type PreviewStatusUnion =\n  | `PREVIEW_SUCCESS`\n  | `NO_PAGE_CREATED_FOR_PREVIEWED_NODE`\n  | `GATSBY_PREVIEW_PROCESS_ERROR`\n  | `RECEIVED_PREVIEW_DATA_FROM_WRONG_URL`\n\nexport interface IPreviewData {\n  previewDatabaseId: number\n  userDatabaseId: number\n  token: string\n  remoteUrl: string\n  modified: string\n  parentDatabaseId: number\n  id: string\n  isDraft: boolean\n  singleName: string\n  since?: number\n  refreshing?: boolean\n  preview?: boolean\n  manifestIds?: Array<string>\n}\n\ninterface IPageNode {\n  path: string\n}\n\nlet previewQueue: PQueue\n\nconst getPreviewQueue = (): PQueue => {\n  if (!previewQueue) {\n    const { previewRequestConcurrency } =\n      store.getState().gatsbyApi.pluginOptions.schema\n\n    previewQueue = new PQueue({\n      concurrency: previewRequestConcurrency,\n      carryoverConcurrencyCount: true,\n    })\n  }\n\n  return previewQueue\n}\n\n// This checks wether or not we're already currently processing a preview\n// for the passed preview id.\nconst previewForIdIsAlreadyBeingProcessed = (id: string): boolean => {\n  if (!id) {\n    return false\n  }\n\n  const existingCallbacks =\n    store.getState().previewStore.nodePageCreatedCallbacks\n\n  const alreadyProcessingThisPreview = !!existingCallbacks?.[id]\n\n  return alreadyProcessingThisPreview\n}\n\n/**\n * For previews of draft posts, gatsby develop will throw a bunch of 404 errors\n * while WPGatsby is trying to read page-data.json\n * So we can write a dummy page-data.json if one doesn't exist.\n * that way there will be no 404's and Gatsby will overwrite our dummy file when it\n * needs to.\n */\nconst writeDummyPageDataJsonIfNeeded = async ({\n  previewData,\n  pageNode,\n}: {\n  previewData: IPreviewData\n  pageNode: IPageNode\n}): Promise<void> => {\n  if (!previewData.isDraft) {\n    return\n  }\n\n  const pageDataDirectory = path.join(\n    process.cwd(),\n    `public/page-data`,\n    pageNode.path\n  )\n\n  await fs.ensureDir(pageDataDirectory)\n\n  const pageDataPath = path.join(pageDataDirectory, `page-data.json`)\n\n  const pageDataExists = await fs.pathExists(pageDataPath)\n\n  if (!pageDataExists) {\n    await fs.writeJSON(pageDataPath, {\n      isDraft: previewData.isDraft,\n    })\n  }\n}\n\ninterface IOnPreviewStatusInput {\n  status: PreviewStatusUnion\n  context?: string\n  nodeId?: string\n  passedNode?: {\n    modified?: string\n    databaseId: number\n  }\n  pageNode?: IPageNode\n  graphqlEndpoint?: string\n  error?: Error\n}\n\nconst createPreviewStatusCallback =\n  ({\n    previewData,\n    reporter,\n  }: {\n    previewData: IPreviewData\n    reporter: Reporter\n  }) =>\n  async ({\n    passedNode,\n    pageNode,\n    context,\n    status,\n    graphqlEndpoint,\n    error,\n  }: IOnPreviewStatusInput): Promise<void> => {\n    if (status === `PREVIEW_SUCCESS`) {\n      // we might need to write a dummy page-data.json so that\n      // Gatsby doesn't throw 404 errors when WPGatsby tries to read this file\n      // that maybe doesn't exist yet\n      await writeDummyPageDataJsonIfNeeded({ previewData, pageNode })\n    }\n\n    const statusContext = error?.message\n      ? `${context}\\n\\n${error.message}`\n      : context\n\n    const { data } = await fetchGraphql({\n      url: graphqlEndpoint,\n      query: /* GraphQL */ `\n        mutation MUTATE_PREVIEW_NODE(\n          $input: WpGatsbyRemotePreviewStatusInput!\n        ) {\n          wpGatsbyRemotePreviewStatus(input: $input) {\n            success\n          }\n        }\n      `,\n      variables: {\n        input: {\n          clientMutationId: `sendPreviewStatus`,\n          modified: passedNode?.modified,\n          pagePath: pageNode?.path,\n          parentDatabaseId:\n            previewData.parentDatabaseId || previewData.previewDatabaseId, // if the parentDatabaseId is 0 we want to use the previewDatabaseId\n          status,\n          statusContext,\n        },\n      },\n      errorContext: `Error occurred while mutating WordPress Preview node meta.`,\n      forceReportCriticalErrors: true,\n      headers: {\n        WPGatsbyPreview: previewData.token,\n        WPGatsbyPreviewUser: previewData.userDatabaseId,\n      },\n    })\n\n    if (data?.wpGatsbyRemotePreviewStatus?.success) {\n      reporter.log(\n        formatLogMessage(\n          `Successfully sent Preview status back to WordPress post ${previewData.id} during ${context}`\n        )\n      )\n    } else {\n      reporter.log(\n        formatLogMessage(\n          `failed to mutate WordPress post ${previewData.id} during Preview ${context}.\\nCheck your WP server logs for more information.`\n        )\n      )\n    }\n  }\n\n/**\n * This is called and passed the result from the ActionMonitor.previewData object along with a JWT token\n * It sources a single preview and creates the callback that's invoked to send preview status back to WPGatsby.\n * When the preview status is sent back to Gatsby, the preview action that this\n * logic is processing is deleted in the WP instance. That's why we call\n * previewForIdIsAlreadyBeingProcessed to see if another preview webhook\n * already started processing for this action\n */\nexport const sourcePreview = async ({\n  previewData,\n  reporter,\n  actions,\n}: {\n  previewData: IPreviewData\n  reporter: Reporter\n  actions: typeof gatsbyActions\n}): Promise<void> => {\n  if (previewForIdIsAlreadyBeingProcessed(previewData?.id)) {\n    return\n  }\n\n  const requiredProperties = [\n    `previewDatabaseId`,\n    `id`,\n    `token`,\n    `remoteUrl`,\n    `parentDatabaseId`,\n    `modified`,\n    `userDatabaseId`,\n  ]\n\n  const missingProperties = requiredProperties.filter(\n    property => !(property in previewData)\n  )\n\n  if (!previewData || missingProperties.length) {\n    reporter.warn(\n      formatLogMessage(\n        `sourcePreview was called but the required previewData properties weren't provided.`\n      )\n    )\n    reporter.info(\n      formatLogMessage(\n        `Missing properties: \\n${JSON.stringify(missingProperties, null, 2)}`\n      )\n    )\n    reporter.log(\n      formatLogMessage(`previewData: \\n${JSON.stringify(previewData, null, 2)}`)\n    )\n    return\n  }\n\n  await touchValidNodes()\n\n  const sendPreviewStatus = createPreviewStatusCallback({\n    previewData,\n    reporter,\n  })\n\n  // this callback will be invoked when the page is created/updated for this node\n  // then it'll send a mutation to WPGraphQL so that WP knows the preview is ready\n  store.dispatch.previewStore.subscribeToPagesCreatedFromNodeById({\n    nodeId: previewData.id,\n    modified: previewData.modified,\n    sendPreviewStatus,\n  })\n\n  const { node } = await fetchAndCreateSingleNode({\n    actionType: `PREVIEW`,\n    ...previewData,\n    previewParentId: previewData.parentDatabaseId,\n    isPreview: true,\n  })\n\n  if (\n    previewData?.manifestIds?.length &&\n    `unstable_createNodeManifest` in actions &&\n    node\n  ) {\n    previewData.manifestIds.forEach(manifestId => {\n      actions.unstable_createNodeManifest({\n        manifestId,\n        node,\n      })\n    })\n  }\n}\n\n/**\n * This is called when the /__refresh endpoint is posted to from WP previews.\n * It should only ever run in Preview mode, which is process.env.ENABLE_GATSBY_REFRESH_ENDPOINT = true\n * It first sources all pending preview actions, then calls sourcePreview() for each of them.\n */\nexport const sourcePreviews = async (helpers: GatsbyHelpers): Promise<void> => {\n  const { webhookBody, reporter, actions } = helpers\n  const {\n    debug: { preview: inPreviewDebugModeOption },\n    url,\n  } = getPluginOptions()\n\n  // some versions of WPGatsby don't send a remoteUrl on every webhook.\n  // if we check this for every webhookBody errors will occur!\n  if (webhookBody.remoteUrl) {\n    // check if we're receiving preview data fromt the right WP backend\n    const { hostname: settingsHostname } = urlUtil.parse(url)\n    const { hostname: remoteHostname } = urlUtil.parse(webhookBody.remoteUrl)\n\n    if (settingsHostname !== remoteHostname) {\n      const sendPreviewStatus = createPreviewStatusCallback({\n        previewData: webhookBody,\n        reporter,\n      })\n\n      await sendPreviewStatus({\n        status: `RECEIVED_PREVIEW_DATA_FROM_WRONG_URL`,\n        context: `check that the preview data came from the right URL.`,\n        passedNode: {\n          modified: webhookBody.modified,\n          databaseId: webhookBody.parentDatabaseId,\n        },\n        graphqlEndpoint: webhookBody.remoteUrl,\n      })\n\n      reporter.warn(\n        formatLogMessage(\n          `Received preview data from a different remote URL than the one specified in plugin options. Preview will not work. Please send preview requests from the WP instance configured in gatsby-config.js.\\n\\n ${chalk.bold(\n            `Remote URL:`\n          )} ${webhookBody.remoteUrl}\\n ${chalk.bold(\n            `Plugin options URL:`\n          )} ${url}\\n\\n`\n        )\n      )\n\n      return\n    }\n  }\n\n  const inPreviewDebugMode =\n    inPreviewDebugModeOption || process.env.WP_GATSBY_PREVIEW_DEBUG\n\n  if (inPreviewDebugMode) {\n    reporter.info(`Sourcing previews for the following webhook:`)\n    dump(webhookBody)\n  }\n\n  const wpGatsbyPreviewNodeManifestsAreSupported =\n    await remoteSchemaSupportsFieldNameOnTypeName({\n      typeName: `GatsbyPreviewData`,\n      fieldName: `manifestIds`,\n    })\n\n  const previewActions = await paginatedWpNodeFetch({\n    contentTypePlural: `actionMonitorActions`,\n    nodeTypeName: `ActionMonitor`,\n    headers: {\n      WPGatsbyPreview: webhookBody.token,\n      WPGatsbyPreviewUser: webhookBody.userDatabaseId,\n    },\n    helpers,\n    query: /* GraphQL */ `\n      query PREVIEW_ACTIONS($after: String) {\n        actionMonitorActions(\n          where: {\n            previewStream: true\n            status: PRIVATE\n            orderby: { field: MODIFIED, order: DESC }\n            sinceTimestamp: ${\n              // only source previews made in the last 60 minutes\n              // We delete every preview action we process so this accounts for very long cold builds between previews.\n              Date.now() - 1000 * 60 * 60\n            }\n          }\n          first: 100\n          after: $after\n        ) {\n          nodes {\n            previewData {\n              id\n              isDraft\n              modified\n              parentDatabaseId\n              previewDatabaseId\n              remoteUrl\n              singleName\n              userDatabaseId\n              ${wpGatsbyPreviewNodeManifestsAreSupported ? `manifestIds` : ``}\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    `,\n  })\n\n  if (!previewActions?.length) {\n    if (inPreviewDebugMode) {\n      reporter.info(\n        `Preview for id ${webhookBody?.id} returned no action monitor actions.`\n      )\n    }\n    return\n  }\n\n  if (inPreviewDebugMode) {\n    reporter.info(\n      `Preview for id ${webhookBody?.id} returned the following actions:`\n    )\n    dump(previewActions)\n  }\n\n  const queue = getPreviewQueue()\n\n  for (const { previewData } of previewActions) {\n    queue.add(() =>\n      sourcePreview({\n        previewData: { ...previewData, token: webhookBody.token },\n        reporter,\n        actions,\n      })\n    )\n  }\n\n  await Promise.all([queue.onEmpty(), queue.onIdle()])\n\n  // clean up leftover callbacks at the end to clean up anything we didn't catch elsewhere\n  await invokeAndCleanupLeftoverPreviewCallbacks({\n    status: `GATSBY_PREVIEW_PROCESS_ERROR`,\n    context: `Starting sourcePreviews`,\n  })\n}\n"],"mappings":"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"}