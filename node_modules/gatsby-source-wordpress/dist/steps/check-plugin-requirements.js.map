{"version":3,"file":"check-plugin-requirements.js","names":["parseRange","range","set","versions","Range","isARange","length","minVersion","semver","version","maxVersion","message","areRemotePluginVersionsSatisfied","helpers","disableCompatibilityCheck","url","wpGraphQLEndpoint","wpgqlIsSatisfied","wpGatsbyIsSatisfied","data","fetchGraphql","query","variables","wpgqlVersion","supportedWpPluginVersions","WPGraphQL","wpgatsbyVersion","WPGatsby","panicOnError","throwGqlErrors","isFirstRequest","wpGatsbyCompatibility","satisfies","wpGQL","wpGatsby","e","includes","reporter","panic","formatLogMessage","genericDownloadMessage","shouldDisplayWPGraphQLReason","reason","shouldDisplayWPGatsbyReason","shouldDisplayAtleastOneReason","shouldDisplayBothReasons","reasons","hostname","protocol","parse","blankGetRequest","fetch","then","response","json","errors","firstError","debugMessage","catch","isWpGatsby","errorMap","from","to","prettyPermalinksAreEnabled","arePrettyPermalinksEnabled","log","warn","generalSettings","ensurePluginRequirementsAreMet","traceId","activity","activityTimer","start","gatsbyApi","pluginOptions","debug","remoteSchema","schemaWasChanged","store","getState","isFirstBuild","getPersistentCache","key","MD5_CACHE_KEY","end","Promise","all"],"sources":["../../src/steps/check-plugin-requirements.ts"],"sourcesContent":["import url from \"url\"\nimport Range from \"semver/classes/range\"\n\nimport type { NodePluginArgs } from \"gatsby\"\nimport fetch from \"node-fetch\"\n\nimport fetchGraphql from \"~/utils/fetch-graphql\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { getPersistentCache } from \"~/utils/cache\"\n\nimport store from \"~/store\"\nimport { MD5_CACHE_KEY } from \"~/constants\"\n\nimport {\n  supportedWpPluginVersions,\n  genericDownloadMessage,\n} from \"~/supported-remote-plugin-versions\"\n\nconst parseRange = (\n  range: string\n): {\n  message: string\n  minVersion: string\n  maxVersion: string\n  isARange: boolean\n} => {\n  const {\n    set: [versions],\n  } = new Range(range)\n\n  const isARange = versions.length >= 2\n  const minVersion = versions[0].semver.version\n  const maxVersion = versions[1]?.semver?.version\n\n  let message: string\n  if (isARange) {\n    message = `Install a version between ${minVersion} and ${maxVersion}.`\n  } else {\n    message = `Install version ${minVersion}.`\n  }\n\n  return {\n    message,\n    minVersion,\n    maxVersion,\n    isARange,\n  }\n}\n\nconst areRemotePluginVersionsSatisfied = async ({\n  helpers,\n  disableCompatibilityCheck,\n  url: wpGraphQLEndpoint,\n}: {\n  helpers: NodePluginArgs\n  url: string\n  disableCompatibilityCheck: boolean\n}): Promise<void> => {\n  if (disableCompatibilityCheck) {\n    return\n  }\n\n  let wpgqlIsSatisfied\n  let wpGatsbyIsSatisfied\n\n  try {\n    const { data } = await fetchGraphql({\n      query: /* GraphQL */ `\n        query WPGatsbyCompatibility(\n          $wpgqlVersion: String!\n          $wpgatsbyVersion: String!\n        ) {\n          wpGatsbyCompatibility(\n            wpGatsbyVersionRange: $wpgatsbyVersion\n            wpGQLVersionRange: $wpgqlVersion\n          ) {\n            satisfies {\n              wpGQL\n              wpGatsby\n            }\n          }\n        }\n      `,\n      variables: {\n        wpgqlVersion: supportedWpPluginVersions.WPGraphQL.version,\n        wpgatsbyVersion: supportedWpPluginVersions.WPGatsby.version,\n      },\n      panicOnError: false,\n      throwGqlErrors: true,\n      isFirstRequest: true,\n    })\n\n    wpgqlIsSatisfied = data.wpGatsbyCompatibility.satisfies.wpGQL\n    wpGatsbyIsSatisfied = data.wpGatsbyCompatibility.satisfies.wpGatsby\n  } catch (e) {\n    if (\n      e.message.includes(\n        `Cannot query field \"wpGatsbyCompatibility\" on type \"RootQuery\".`\n      )\n    ) {\n      helpers.reporter.panic(\n        formatLogMessage(\n          `Your version of WPGatsby is too old to determine if we're compatible.${genericDownloadMessage}`\n        )\n      )\n    } else {\n      helpers.reporter.panic(e.message)\n    }\n  }\n\n  const shouldDisplayWPGraphQLReason =\n    !wpgqlIsSatisfied && supportedWpPluginVersions.WPGraphQL.reason\n\n  const shouldDisplayWPGatsbyReason =\n    !wpGatsbyIsSatisfied && supportedWpPluginVersions.WPGatsby.reason\n\n  const shouldDisplayAtleastOneReason =\n    shouldDisplayWPGraphQLReason || shouldDisplayWPGatsbyReason\n\n  const shouldDisplayBothReasons =\n    shouldDisplayWPGraphQLReason && shouldDisplayWPGatsbyReason\n\n  // a message explaining why these are the minimum versions\n  const reasons = `${shouldDisplayAtleastOneReason ? `\\n\\nReasons:\\n\\n` : ``}${\n    shouldDisplayWPGraphQLReason\n      ? `- ${supportedWpPluginVersions.WPGraphQL.reason}`\n      : ``\n  }${shouldDisplayBothReasons ? `\\n\\n` : ``}${\n    shouldDisplayWPGatsbyReason\n      ? `- ${supportedWpPluginVersions.WPGatsby.reason}`\n      : ``\n  }`\n\n  let message = ``\n\n  if (!wpgqlIsSatisfied) {\n    const { minVersion, maxVersion } = parseRange(\n      supportedWpPluginVersions.WPGraphQL.version\n    )\n\n    message += `Your remote version of WPGraphQL is not within the accepted range\\n(${\n      supportedWpPluginVersions.WPGraphQL.version\n    }).\\n\\nThis is not a bug and it means one of two things:\\n you either need to upgrade WPGraphQL or gatsby-source-wordpress.\n\n1. If the version of WPGraphQL in your WordPress instance is higher than ${\n      maxVersion || minVersion\n    }\nit means you need to upgrade your version of gatsby-source-wordpress.\n\n2. If the version of WPGraphQL in your WordPress instance is lower than ${minVersion}\nit means you need to upgrade your version of WPGraphQL.\n\nYou can find a matching WPGraphQL version at https://github.com/wp-graphql/wp-graphql/releases`\n  }\n\n  if (!wpGatsbyIsSatisfied && !wpgqlIsSatisfied) {\n    message += `\\n\\n---------------\\n\\n`\n  }\n\n  if (!wpGatsbyIsSatisfied) {\n    const { minVersion, maxVersion } = parseRange(\n      supportedWpPluginVersions.WPGatsby.version\n    )\n\n    const { hostname, protocol } = url.parse(wpGraphQLEndpoint)\n\n    message += `Your remote version of WPGatsby is not within the accepted range\\n(${\n      supportedWpPluginVersions.WPGatsby.version\n    })\\n\\nThis is not a bug and it means one of two things:\\n you either need to upgrade WPGatsby or gatsby-source-wordpress.\n\n1. If the version of WPGatsby in your WordPress instance is higher than ${\n      maxVersion || minVersion\n    }\nit means you need to upgrade your version of gatsby-source-wordpress.\n\n2. If the version of WPGatsby in your WordPress instance is lower than ${minVersion}\nit means you need to upgrade your version of WPGatsby.\n\nDownload a matching version at https://github.com/gatsbyjs/wp-gatsby/releases\nor update via ${protocol}//${hostname}/wp-admin/plugins.php`\n  }\n\n  if (!wpGatsbyIsSatisfied || !wpgqlIsSatisfied) {\n    message += `\n${reasons}`\n  }\n\n  if (message) {\n    helpers.reporter.panic(formatLogMessage(message))\n  }\n}\n\n// This blank request is used to find debug messages\n// when a graphql request is made with no query\n// for example if 2 root fields are registered with the fieldname \"products\"\n// this will throw a helpful error message explaining that one should be removed\nconst blankGetRequest = async ({\n  url,\n  helpers,\n}: {\n  url: string\n  helpers: NodePluginArgs\n}): Promise<void> =>\n  fetch(url)\n    .then(response => response.json())\n    .then(json => {\n      if (json?.errors?.length) {\n        const firstError = json.errors[0]\n\n        if (\n          firstError.debugMessage ||\n          (firstError.message &&\n            !firstError.message?.includes(\n              `GraphQL Request must include at least one of those two parameters: \"query\" or \"queryId\"`\n            ))\n        ) {\n          helpers.reporter.panic(\n            formatLogMessage(`WPGraphQL returned a debug message on startup:\n\n${firstError.debugMessage || firstError.message}\n          `)\n          )\n        }\n      }\n    })\n    .catch(() => {\n      // this is ignored because a /graphql request will always return a 200 at this point\n      // we've already checked prior to this point that /graphql is up and returns a response.\n    })\n\nconst isWpGatsby = async (): Promise<void> => {\n  fetchGraphql({\n    query: /* GraphQL */ `\n      {\n        isWpGatsby\n      }\n    `,\n    errorMap: {\n      from: `Cannot query field \"isWpGatsby\" on type \"RootQuery\".`,\n      // @todo replace this link with another once we're out of alpha\n      to: `WPGatsby is not active in your WordPress installation.\\nTo download the latest version of WPGatsby visit https://wordpress.org/plugins/wp-gatsby/`,\n    },\n    panicOnError: true,\n    isFirstRequest: true,\n  })\n}\n\nconst prettyPermalinksAreEnabled = async ({\n  helpers,\n}: {\n  helpers: NodePluginArgs\n}): Promise<void> => {\n  try {\n    const { data } = await fetchGraphql({\n      query: /* GraphQL */ `\n        {\n          generalSettings {\n            url\n          }\n          wpGatsby {\n            arePrettyPermalinksEnabled\n          }\n        }\n      `,\n      throwGqlErrors: true,\n      isFirstRequest: true,\n    })\n\n    if (!data.wpGatsby.arePrettyPermalinksEnabled) {\n      helpers.reporter.log(``)\n      helpers.reporter.warn(\n        formatLogMessage(`\nPretty permalinks are not enabled in your WordPress instance.\nGatsby routing requires this setting to function properly.\nPlease enable pretty permalinks by changing your settings at\n${data.generalSettings.url}/wp-admin/options-permalink.php.\n`)\n      )\n    }\n  } catch (e) {\n    // the WPGatsby version is too old to query for wpGatsby.arePrettyPermalinksEnabled\n  }\n}\n\nconst ensurePluginRequirementsAreMet = async (\n  helpers: NodePluginArgs\n): Promise<void> => {\n  if (\n    helpers.traceId === `refresh-createSchemaCustomization` ||\n    // PQR doesn't have a trace id.\n    // By the time this runs in PQR we don't need it to run again.\n    !helpers.traceId\n  ) {\n    return\n  }\n\n  const activity = helpers.reporter.activityTimer(\n    formatLogMessage(`ensuring plugin requirements are met`)\n  )\n\n  activity.start()\n\n  const {\n    gatsbyApi: {\n      pluginOptions: {\n        url,\n        debug: { disableCompatibilityCheck },\n      },\n    },\n    remoteSchema: { schemaWasChanged },\n  } = store.getState()\n\n  // if we don't have a cached remote schema MD5, this is a cold build\n  const isFirstBuild = !(await getPersistentCache({ key: MD5_CACHE_KEY }))\n\n  if (\n    !schemaWasChanged &&\n    !isFirstBuild &&\n    helpers.traceId !== `schemaWasChanged`\n  ) {\n    activity.end()\n    return\n  }\n\n  await blankGetRequest({ url, helpers })\n  await isWpGatsby()\n\n  await Promise.all([\n    prettyPermalinksAreEnabled({ helpers }),\n    areRemotePluginVersionsSatisfied({\n      helpers,\n      url,\n      disableCompatibilityCheck,\n    }),\n  ])\n\n  activity.end()\n}\n\nexport { ensurePluginRequirementsAreMet }\n"],"mappings":"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"}