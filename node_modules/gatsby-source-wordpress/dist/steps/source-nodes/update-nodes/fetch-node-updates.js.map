{"version":3,"file":"fetch-node-updates.js","names":["touchValidNodes","helpers","getGatsbyApi","actions","validNodeIds","getPersistentCache","key","CREATED_NODE_IDS","length","forEach","nodeId","touchNode","getNode","fetchAndApplyNodeUpdates","since","throwFetchErrors","throwGqlErrors","pluginOptions","cache","reporter","activity","activityTimer","formatLogMessage","start","get","LAST_COMPLETED_SOURCE_TIME","wpActions","didUpdate","fetchAndRunWpActions","end"],"sources":["../../../../src/steps/source-nodes/update-nodes/fetch-node-updates.js"],"sourcesContent":["import { CREATED_NODE_IDS, LAST_COMPLETED_SOURCE_TIME } from \"~/constants\"\nimport { fetchAndRunWpActions } from \"./wp-actions\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { getGatsbyApi } from \"~/utils/get-gatsby-api\"\nimport { getPersistentCache } from \"~/utils/cache\"\n\nexport const touchValidNodes = async () => {\n  const { helpers } = getGatsbyApi()\n  const { actions } = helpers\n\n  const validNodeIds = await getPersistentCache({ key: CREATED_NODE_IDS })\n\n  if (validNodeIds?.length) {\n    validNodeIds.forEach(nodeId => actions.touchNode(helpers.getNode(nodeId)))\n  }\n}\n\n/**\n * fetchAndApplyNodeUpdates\n *\n * uses query info (types and gql query strings) fetched/generated in\n * onPreBootstrap to ask WordPress for the latest changes, and then\n * apply creates, updates, and deletes to Gatsby nodes\n */\nconst fetchAndApplyNodeUpdates = async ({\n  since,\n  throwFetchErrors = false,\n  throwGqlErrors = false,\n}) => {\n  const { helpers, pluginOptions } = getGatsbyApi()\n\n  const { cache, reporter } = helpers\n\n  const activity = reporter.activityTimer(\n    formatLogMessage(`pull updates since last build`)\n  )\n  activity.start()\n\n  if (!since) {\n    since = await cache.get(LAST_COMPLETED_SOURCE_TIME)\n  }\n\n  // Check with WPGQL to create, delete, or update cached WP nodes\n  const { wpActions, didUpdate } = await fetchAndRunWpActions({\n    since,\n    helpers,\n    pluginOptions,\n    throwFetchErrors,\n    throwGqlErrors,\n  })\n\n  await touchValidNodes()\n\n  activity.end()\n\n  return { wpActions, didUpdate }\n}\n\nexport default fetchAndApplyNodeUpdates\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AAEO,MAAMA,eAAe,GAAG,YAAY;EACzC,MAAM;IAAEC;EAAQ,CAAC,GAAG,IAAAC,0BAAY,GAAE;EAClC,MAAM;IAAEC;EAAQ,CAAC,GAAGF,OAAO;EAE3B,MAAMG,YAAY,GAAG,MAAM,IAAAC,yBAAkB,EAAC;IAAEC,GAAG,EAAEC;EAAiB,CAAC,CAAC;EAExE,IAAIH,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAEI,MAAM,EAAE;IACxBJ,YAAY,CAACK,OAAO,CAACC,MAAM,IAAIP,OAAO,CAACQ,SAAS,CAACV,OAAO,CAACW,OAAO,CAACF,MAAM,CAAC,CAAC,CAAC;EAC5E;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAOA,MAAMG,wBAAwB,GAAG,OAAO;EACtCC,KAAK;EACLC,gBAAgB,GAAG,KAAK;EACxBC,cAAc,GAAG;AACnB,CAAC,KAAK;EACJ,MAAM;IAAEf,OAAO;IAAEgB;EAAc,CAAC,GAAG,IAAAf,0BAAY,GAAE;EAEjD,MAAM;IAAEgB,KAAK;IAAEC;EAAS,CAAC,GAAGlB,OAAO;EAEnC,MAAMmB,QAAQ,GAAGD,QAAQ,CAACE,aAAa,CACrC,IAAAC,kCAAgB,EAAE,+BAA8B,CAAC,CAClD;EACDF,QAAQ,CAACG,KAAK,EAAE;EAEhB,IAAI,CAACT,KAAK,EAAE;IACVA,KAAK,GAAG,MAAMI,KAAK,CAACM,GAAG,CAACC,qCAA0B,CAAC;EACrD;;EAEA;EACA,MAAM;IAAEC,SAAS;IAAEC;EAAU,CAAC,GAAG,MAAM,IAAAC,+BAAoB,EAAC;IAC1Dd,KAAK;IACLb,OAAO;IACPgB,aAAa;IACbF,gBAAgB;IAChBC;EACF,CAAC,CAAC;EAEF,MAAMhB,eAAe,EAAE;EAEvBoB,QAAQ,CAACS,GAAG,EAAE;EAEd,OAAO;IAAEH,SAAS;IAAEC;EAAU,CAAC;AACjC,CAAC;AAAA,eAEcd,wBAAwB;AAAA"}