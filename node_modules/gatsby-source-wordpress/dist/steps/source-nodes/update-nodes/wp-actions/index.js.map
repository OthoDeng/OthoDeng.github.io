{"version":3,"file":"index.js","names":["getWpActions","variables","helpers","throwFetchErrors","throwGqlErrors","sourceTime","Date","now","actionMonitorActions","paginatedWpNodeFetch","contentTypePlural","query","actionMonitorQuery","nodeTypeName","length","cache","set","LAST_COMPLETED_SOURCE_TIME","handleWpActions","api","cachedNodeIds","wpAction","actionType","wpActionDELETE","wpActionUPDATE","fetchAndCreateNonNodeRootFields","sourceNodes","refetchAll","setHardCachedNodes","fetchAndRunWpActions","pluginOptions","since","wpActions","didUpdate"],"sources":["../../../../../src/steps/source-nodes/update-nodes/wp-actions/index.js"],"sourcesContent":["import { actionMonitorQuery } from \"~/utils/graphql-queries\"\nimport wpActionDELETE from \"./delete\"\nimport wpActionUPDATE from \"./update\"\nimport { LAST_COMPLETED_SOURCE_TIME } from \"~/constants\"\nimport { paginatedWpNodeFetch } from \"~/steps/source-nodes/fetch-nodes/fetch-nodes-paginated\"\n\nimport fetchAndCreateNonNodeRootFields from \"~/steps/source-nodes/create-nodes/fetch-and-create-non-node-root-fields\"\nimport { setHardCachedNodes } from \"~/utils/cache\"\nimport { sourceNodes } from \"~/steps/source-nodes\"\n\n/**\n * getWpActions\n *\n * pull the latest changes from WP and determine which of those changes\n * require updates in Gatsby, then return valid changes\n * An example of a non-valid change would be a post that was created\n * and then immediately deleted.\n */\nexport const getWpActions = async ({\n  variables,\n  helpers,\n  throwFetchErrors = false,\n  throwGqlErrors = false,\n}) => {\n  const sourceTime = Date.now()\n\n  // @todo add pagination in case there are more than 100 actions since the last build\n  const actionMonitorActions = await paginatedWpNodeFetch({\n    contentTypePlural: `actionMonitorActions`,\n    query: actionMonitorQuery,\n    nodeTypeName: `ActionMonitor`,\n    helpers,\n    throwFetchErrors,\n    throwGqlErrors,\n    ...variables,\n  })\n\n  if (!actionMonitorActions || !actionMonitorActions.length) {\n    return []\n  }\n\n  await helpers.cache.set(LAST_COMPLETED_SOURCE_TIME, sourceTime)\n\n  return actionMonitorActions\n}\n\n/**\n * Acts on changes in WordPress to call functions that sync Gatsby with\n * the latest WP changes\n */\nexport const handleWpActions = async api => {\n  const { cachedNodeIds, helpers } = api\n\n  switch (api.wpAction.actionType) {\n    case `DELETE`:\n      await wpActionDELETE(api)\n      break\n    case `UPDATE`:\n    case `CREATE`:\n      await wpActionUPDATE(api)\n      break\n    case `NON_NODE_ROOT_FIELDS`:\n      await fetchAndCreateNonNodeRootFields()\n      break\n    case `REFETCH_ALL`:\n      await sourceNodes({ ...helpers, refetchAll: true }, {})\n  }\n\n  await setHardCachedNodes({ helpers })\n\n  return cachedNodeIds\n}\n\n/**\n * fetchAndRunWpActions\n *\n * fetches a list of latest changes in WordPress\n * and then acts on those changes\n */\nexport const fetchAndRunWpActions = async ({\n  helpers,\n  pluginOptions,\n  since,\n  throwFetchErrors = false,\n  throwGqlErrors = false,\n}) => {\n  // check for new, edited, or deleted posts in WP \"Action Monitor\"\n  const wpActions = await getWpActions({\n    variables: {\n      since,\n    },\n    helpers,\n    throwFetchErrors,\n    throwGqlErrors,\n  })\n\n  const didUpdate = !!wpActions.length\n\n  if (didUpdate) {\n    for (const wpAction of wpActions) {\n      // Create, update, and delete nodes\n      await handleWpActions({\n        helpers,\n        pluginOptions,\n        wpAction,\n      })\n    }\n  }\n\n  return {\n    wpActions,\n    didUpdate,\n  }\n}\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,YAAY,GAAG,OAAO;EACjCC,SAAS;EACTC,OAAO;EACPC,gBAAgB,GAAG,KAAK;EACxBC,cAAc,GAAG;AACnB,CAAC,KAAK;EACJ,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,EAAE;;EAE7B;EACA,MAAMC,oBAAoB,GAAG,MAAM,IAAAC,yCAAoB,EAAC;IACtDC,iBAAiB,EAAG,sBAAqB;IACzCC,KAAK,EAAEC,kCAAkB;IACzBC,YAAY,EAAG,eAAc;IAC7BX,OAAO;IACPC,gBAAgB;IAChBC,cAAc;IACd,GAAGH;EACL,CAAC,CAAC;EAEF,IAAI,CAACO,oBAAoB,IAAI,CAACA,oBAAoB,CAACM,MAAM,EAAE;IACzD,OAAO,EAAE;EACX;EAEA,MAAMZ,OAAO,CAACa,KAAK,CAACC,GAAG,CAACC,qCAA0B,EAAEZ,UAAU,CAAC;EAE/D,OAAOG,oBAAoB;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AAHA;AAIO,MAAMU,eAAe,GAAG,MAAMC,GAAG,IAAI;EAC1C,MAAM;IAAEC,aAAa;IAAElB;EAAQ,CAAC,GAAGiB,GAAG;EAEtC,QAAQA,GAAG,CAACE,QAAQ,CAACC,UAAU;IAC7B,KAAM,QAAO;MACX,MAAM,IAAAC,eAAc,EAACJ,GAAG,CAAC;MACzB;IACF,KAAM,QAAO;IACb,KAAM,QAAO;MACX,MAAM,IAAAK,eAAc,EAACL,GAAG,CAAC;MACzB;IACF,KAAM,sBAAqB;MACzB,MAAM,IAAAM,wCAA+B,GAAE;MACvC;IACF,KAAM,aAAY;MAChB,MAAM,IAAAC,aAAW,EAAC;QAAE,GAAGxB,OAAO;QAAEyB,UAAU,EAAE;MAAK,CAAC,EAAE,CAAC,CAAC,CAAC;EAAA;EAG3D,MAAM,IAAAC,yBAAkB,EAAC;IAAE1B;EAAQ,CAAC,CAAC;EAErC,OAAOkB,aAAa;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AALA;AAMO,MAAMS,oBAAoB,GAAG,OAAO;EACzC3B,OAAO;EACP4B,aAAa;EACbC,KAAK;EACL5B,gBAAgB,GAAG,KAAK;EACxBC,cAAc,GAAG;AACnB,CAAC,KAAK;EACJ;EACA,MAAM4B,SAAS,GAAG,MAAMhC,YAAY,CAAC;IACnCC,SAAS,EAAE;MACT8B;IACF,CAAC;IACD7B,OAAO;IACPC,gBAAgB;IAChBC;EACF,CAAC,CAAC;EAEF,MAAM6B,SAAS,GAAG,CAAC,CAACD,SAAS,CAAClB,MAAM;EAEpC,IAAImB,SAAS,EAAE;IACb,KAAK,MAAMZ,QAAQ,IAAIW,SAAS,EAAE;MAChC;MACA,MAAMd,eAAe,CAAC;QACpBhB,OAAO;QACP4B,aAAa;QACbT;MACF,CAAC,CAAC;IACJ;EACF;EAEA,OAAO;IACLW,SAAS;IACTC;EACF,CAAC;AACH,CAAC;AAAA"}