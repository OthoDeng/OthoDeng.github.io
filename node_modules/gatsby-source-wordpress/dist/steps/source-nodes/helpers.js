"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.getTypeInfoBySingleName = exports.getQueryInfoByTypeName = exports.getQueryInfoBySingleFieldName = void 0;
var _camelCase2 = _interopRequireDefault(require("lodash/camelCase"));
var _store = _interopRequireDefault(require("../../store"));
var _helpers = require("../create-schema-customization/helpers");
const getTypeInfoBySingleName = singleName => {
  const {
    typeMap
  } = _store.default.getState().remoteSchema;
  const rootField = typeMap.get(`RootQuery`).fields.find(field => field.name === singleName);
  const typeName = rootField.type.name || (0, _helpers.findNamedTypeName)(rootField.type);
  const type = typeMap.get(typeName);
  return type;
};
exports.getTypeInfoBySingleName = getTypeInfoBySingleName;
const getQueryInfoBySingleFieldName = singleName => {
  const {
    nodeQueries
  } = _store.default.getState().remoteSchema;
  const queryInfo = Object.values(nodeQueries).find(q => q.typeInfo.singularName === singleName || q.typeInfo.singularName === (0, _camelCase2.default)(singleName));
  return queryInfo;
};
exports.getQueryInfoBySingleFieldName = getQueryInfoBySingleFieldName;
const getQueryInfoByTypeName = typeName => {
  const {
    nodeQueries
  } = _store.default.getState().remoteSchema;
  const queryInfo = Object.values(nodeQueries).find(q => q.typeInfo.nodesTypeName === typeName);
  return queryInfo;
};
exports.getQueryInfoByTypeName = getQueryInfoByTypeName;
//# sourceMappingURL=helpers.js.map