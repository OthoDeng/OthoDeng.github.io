{"version":3,"file":"create-local-file-node.js","names":["getFileNodeMetaBySourceUrl","sourceUrl","fileNodesMetaByUrls","store","getState","imageNodes","nodeMetaByUrl","stripImageSizesFromUrl","getMediaItemEditLink","node","helpers","pluginOptions","gatsbyApi","protocol","hostname","url","parse","link","baseUrl","databaseId","parentNode","parentHtmlNode","getNode","id","errorPanicker","error","reporter","fetchState","parentName","editUrl","stepMessage","mediaItemLink","editLink","fileUrl","mediaItemUrl","sharedError","errorString","toString","allow404ImagesInProduction","production","allow404Images","allow401ImagesInProduction","allow401Images","errorCodeIs404","includes","errorCodeIs401","errorCode","process","env","NODE_ENV","shouldBail","log","warn","formatLogMessage","info","panic","bold","join","console","getFileNodeByMediaItemNode","mediaItemNode","modifiedGmt","existingNodeMeta","internal","type","localFile","failedImageUrls","Set","createLocalFileNode","skipExistingNode","state","existingNode","gatsbyStore","cache","createNodeId","actions","createNode","mimeType","title","fileSize","has","wpUrl","remoteSchema","ensureSrcHasHostname","src","excludeByMimeTypes","maxFileSizeBytes","MediaItem","dispatch","postBuildWarningCounts","incrementMaxFileSizeBytesExceeded","incrementMimeTypeExceeded","hardCachedFileRelativePath","urlToPath","hardCachedMediaFilesDirectory","cwd","hardCachedFilePath","hardCacheMediaFiles","develop","createFileNodeRequirements","parentNodeId","remoteFileNode","buffer","fs","readFile","createFileNodeFromBuffer","name","ext","path","extname","e","retry","add","wpUrlHostname","mediaItemHostname","htaccessCredentials","auth","htaccess","shouldUseHtaccessCredentials","htaccess_pass","password","htaccess_user","username","createRemoteFileNode","retries","factor","minTimeout","onRetry","pushNodeMeta","ensureDir","dirname","copyFile","absolutePath"],"sources":["../../../../src/steps/source-nodes/create-nodes/create-local-file-node.js"],"sourcesContent":["import fs from \"fs-extra\"\nimport path from \"path\"\nimport url from \"url\"\nimport { bold } from \"chalk\"\n\nimport retry from \"async-retry\"\n\nimport { createFileNodeFromBuffer } from \"gatsby-source-filesystem\"\n\nimport createRemoteFileNode from \"./create-remote-file-node/index\"\n\nimport store from \"~/store\"\n\nimport urlToPath from \"~/utils/url-to-path\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { stripImageSizesFromUrl } from \"~/steps/source-nodes/fetch-nodes/fetch-referenced-media-items\"\nimport { ensureSrcHasHostname } from \"./process-node\"\n\nexport const getFileNodeMetaBySourceUrl = sourceUrl => {\n  const fileNodesMetaByUrls = store.getState().imageNodes.nodeMetaByUrl\n\n  return fileNodesMetaByUrls[stripImageSizesFromUrl(sourceUrl)]\n}\n\nexport const getMediaItemEditLink = node => {\n  const { helpers, pluginOptions } = store.getState().gatsbyApi\n\n  const { protocol, hostname } = url.parse(node?.link || pluginOptions.url)\n  const baseUrl = `${protocol}//${hostname}`\n\n  const databaseId = node.databaseId\n\n  if (!databaseId) {\n    const parentNode = node.parentHtmlNode || helpers.getNode(node.id)\n\n    if (!parentNode?.databaseId) {\n      return null\n    }\n\n    return `${baseUrl}/wp-admin/post.php?post=${parentNode.databaseId}&action=edit`\n  }\n\n  return `${baseUrl}/wp-admin/upload.php?item=${node.databaseId}`\n}\n\nexport const errorPanicker = ({\n  error,\n  reporter,\n  node,\n  fetchState,\n  parentName,\n}) => {\n  const editUrl = getMediaItemEditLink(node)\n\n  const stepMessage = parentName ? ` in step:\\n\\n\"${parentName}\"` : ``\n  const mediaItemLink = node.link ? `\\nMedia item link: ${node.link}` : ``\n  const editLink = `\\nEdit link: ${editUrl || `N/A`}`\n  const fileUrl = `\\nFile url: ${node.mediaItemUrl}`\n\n  const sharedError = `occurred while fetching media item${\n    node.databaseId ? ` #${node.databaseId}` : ``\n  }${stepMessage}\\n${mediaItemLink}${editLink}${fileUrl}`\n\n  const errorString =\n    typeof error === `string` ? error : error && error.toString()\n\n  const { pluginOptions } = store.getState().gatsbyApi\n  const allow404ImagesInProduction = pluginOptions.production.allow404Images\n  const allow401ImagesInProduction = pluginOptions.production.allow401Images\n  const errorCodeIs404 = errorString.includes(`Response code 404`)\n  const errorCodeIs401 = errorString.includes(`Response code 401`)\n  const errorCode = errorCodeIs404 ? `404` : errorCodeIs401 ? `401` : null\n\n  if (\n    (allow404ImagesInProduction ||\n      allow401ImagesInProduction ||\n      process.env.NODE_ENV !== `production`) &&\n    (errorCodeIs404 || errorCodeIs401)\n  ) {\n    fetchState.shouldBail = true\n\n    reporter.log(``)\n    reporter.warn(\n      formatLogMessage(\n        `Error ${sharedError}${\n          !allow404ImagesInProduction || !allow401ImagesInProduction\n            ? `\\n\\nThis error will fail production builds.`\n            : ``\n        }`\n      )\n    )\n    reporter.log(``)\n\n    return\n  }\n\n  if (errorString.includes(`Response code 4`)) {\n    reporter.log(``)\n\n    reporter.info(\n      formatLogMessage(\n        `Unrecoverable error ${sharedError}\\n\\nFailing the build to prevent deploying a broken site.${\n          errorCode\n            ? `\\n\\nIf you don't want ${errorCode}'s to fail your production builds, you can set the following option:\n\n{\n  options: {\n    production: {\n      allow${errorCode}Images: true\n    }\n  }\n}`\n            : ``\n        }`\n      )\n    )\n    reporter.panic(error)\n  } else if (errorString.includes(`Response code 5`)) {\n    reporter.log(``)\n    reporter.info(\n      formatLogMessage(\n        [\n          `Unrecoverable error ${sharedError}`,\n          `\\nYour wordpress host appears to be overloaded by our requests for images`,\n          `\\nIn ${bold(`gatsby-config.js`)}, try lowering the ${bold(\n            `requestConcurrency`\n          )} for MediaItems:`,\n          `\\nplugins: [\n  {\n    resolve: 'gatsby-source-wordpress',\n    options: {\n      url: 'https://mysite.com/graphql',\n      type: {\n        MediaItem: {\n          localFile: {\n            requestConcurrency: 50\n          }\n        }\n      }\n    },\n  }\n]`,\n          `\\nnote that GATSBY_CONCURRENT_REQUEST environment variable has been retired for these options`,\n        ].join(`\\n`)\n      )\n    )\n    reporter.panic(error)\n  } else {\n    console.error(error)\n    reporter.panic()\n  }\n}\n\nexport const getFileNodeByMediaItemNode = async ({\n  mediaItemNode,\n  helpers,\n}) => {\n  const { sourceUrl, modifiedGmt, mediaItemUrl, databaseId } = mediaItemNode\n\n  const fileUrl = sourceUrl || mediaItemUrl\n\n  if (!fileUrl) {\n    helpers.reporter.warn(\n      formatLogMessage(`Couldn't find source url for media item #${databaseId}`)\n    )\n    return null\n  }\n\n  const existingNodeMeta = getFileNodeMetaBySourceUrl(fileUrl)\n\n  if (\n    // if we already have this image\n    existingNodeMeta &&\n    existingNodeMeta.id &&\n    // and it hasn't been modified\n    existingNodeMeta.modifiedGmt === modifiedGmt\n  ) {\n    let node = await helpers.getNode(existingNodeMeta.id)\n\n    // some of the cached node metas don't necessarily need to be a File\n    // so make sure we return a File node if what we get isn't one\n    if (node && node.internal && node.internal.type !== `File`) {\n      if (node.localFile && node.localFile.id) {\n        // look up the corresponding file node\n        node = await helpers.getNode(node.localFile.id)\n      } else {\n        return null\n      }\n    }\n\n    return node\n  }\n\n  return null\n}\n\nconst failedImageUrls = new Set()\n\nexport const createLocalFileNode = async ({\n  mediaItemNode,\n  parentName,\n  skipExistingNode = false,\n}) => {\n  const state = store.getState()\n  const { helpers, pluginOptions } = state.gatsbyApi\n\n  const existingNode = !skipExistingNode\n    ? await getFileNodeByMediaItemNode({\n        mediaItemNode,\n        helpers,\n      })\n    : null\n\n  if (existingNode) {\n    return existingNode\n  }\n\n  const {\n    store: gatsbyStore,\n    cache,\n    createNodeId,\n    reporter,\n    actions: { createNode },\n  } = helpers\n\n  let { mediaItemUrl, modifiedGmt, mimeType, title, fileSize } = mediaItemNode\n\n  if (!mediaItemUrl || failedImageUrls.has(mediaItemUrl)) {\n    return null\n  }\n\n  const { wpUrl } = state.remoteSchema\n  mediaItemUrl = ensureSrcHasHostname({ wpUrl, src: mediaItemUrl })\n\n  const { excludeByMimeTypes, maxFileSizeBytes } =\n    // eslint-disable-next-line no-unsafe-optional-chaining\n    pluginOptions.type?.MediaItem?.localFile\n\n  // if this file is larger than maxFileSizeBytes, don't fetch the remote file\n  if (fileSize > maxFileSizeBytes) {\n    store.dispatch.postBuildWarningCounts.incrementMaxFileSizeBytesExceeded()\n    return null\n  }\n\n  // if this type of file is excluded, don't fetch the remote file\n  if (excludeByMimeTypes.includes(mimeType)) {\n    store.dispatch.postBuildWarningCounts.incrementMimeTypeExceeded()\n    return null\n  }\n\n  const hardCachedFileRelativePath = urlToPath(mediaItemUrl)\n  const hardCachedMediaFilesDirectory = `${process.cwd()}/.wordpress-cache`\n\n  const hardCachedFilePath =\n    hardCachedMediaFilesDirectory + hardCachedFileRelativePath\n\n  const hardCacheMediaFiles =\n    (process.env.NODE_ENV === `development` &&\n      pluginOptions.develop.hardCacheMediaFiles) ||\n    (process.env.NODE_ENV === `production` &&\n      pluginOptions.production.hardCacheMediaFiles)\n\n  const fetchState = {\n    shouldBail: false,\n  }\n\n  const createFileNodeRequirements = {\n    parentNodeId: mediaItemNode.id,\n    store: gatsbyStore,\n    cache,\n    createNode,\n    createNodeId,\n  }\n\n  let remoteFileNode\n\n  if (hardCacheMediaFiles) {\n    // check for file in .wordpress-cache/wp-content\n    // if it exists, use that to create a node from instead of\n    // fetching from wp\n    try {\n      const buffer = await fs.readFile(hardCachedFilePath)\n      remoteFileNode = await createFileNodeFromBuffer({\n        buffer,\n        name: title,\n        ext: path.extname(mediaItemUrl),\n        ...createFileNodeRequirements,\n      })\n    } catch (e) {\n      // ignore errors, we'll download the image below if it doesn't exist\n    }\n  }\n\n  if (!remoteFileNode) {\n    // Otherwise we need to download it\n    remoteFileNode = await retry(\n      async () => {\n        if (fetchState.shouldBail) {\n          failedImageUrls.add(mediaItemUrl)\n          return null\n        }\n\n        const { hostname: wpUrlHostname } = url.parse(wpUrl)\n        const { hostname: mediaItemHostname } = url.parse(mediaItemUrl)\n\n        const htaccessCredentials = pluginOptions.auth.htaccess\n\n        // if media items are hosted on another url like s3,\n        // using the htaccess creds will throw 400 errors\n        const shouldUseHtaccessCredentials = wpUrlHostname === mediaItemHostname\n\n        const auth =\n          htaccessCredentials && shouldUseHtaccessCredentials\n            ? {\n                htaccess_pass: htaccessCredentials?.password,\n                htaccess_user: htaccessCredentials?.username,\n              }\n            : null\n\n        // if this errors, it's caught one level above in fetch-referenced-media-items.js so it can be placed on the end of the request queue\n        const node = await createRemoteFileNode({\n          url: mediaItemUrl,\n          auth,\n          ...createFileNodeRequirements,\n          reporter,\n          pluginOptions,\n        })\n\n        return node\n      },\n      {\n        retries: 3,\n        factor: 1.1,\n        minTimeout: 5000,\n        onRetry: error =>\n          errorPanicker({\n            error,\n            reporter,\n            node: mediaItemNode,\n            fetchState,\n            parentName,\n          }),\n      }\n    )\n  }\n\n  if (!remoteFileNode) {\n    return null\n  }\n\n  // push it's id and url to our store for caching,\n  // so we can touch this node next time\n  // and so we can easily access the id by source url later\n  store.dispatch.imageNodes.pushNodeMeta({\n    id: remoteFileNode.id,\n    sourceUrl: mediaItemUrl,\n    modifiedGmt,\n  })\n\n  if (hardCacheMediaFiles) {\n    try {\n      // make sure the directory exists\n      await fs.ensureDir(path.dirname(hardCachedFilePath))\n      // copy our downloaded file to our existing directory\n      await fs.copyFile(remoteFileNode.absolutePath, hardCachedFilePath)\n    } catch (e) {\n      helpers.reporter.panic(e)\n    }\n  }\n\n  // and use it\n  return remoteFileNode\n}\n"],"mappings":"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"}