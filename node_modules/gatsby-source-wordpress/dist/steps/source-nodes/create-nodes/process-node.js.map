{"version":3,"file":"process-node.js","names":["getPlaceholderUrlFromMediaItemNode","node","pluginOptions","placeholderSizeByWidth","placeholderSizeByName","mediaDetails","sizes","forEach","size","name","type","MediaItem","placeholderSizeName","Number","width","placeHolderSize","sourceUrl","findReferencedImageNodeIds","nodeString","lazyNodes","usingGatsbyV4OrGreater","matchedIds","execall","map","match","subMatches","filter","id","getCheerioImgDbId","cheerioImg","dataAttributeId","attribs","class","wpImageClass","split","find","className","includes","wpImageClassDashArray","wpImageClassId","length","dbIdToMediaItemRelayId","dbId","b64e","getCheerioImgRelayId","ensureSrcHasHostname","src","wpUrl","protocol","host","url","parse","startsWith","pickNodeBySourceUrlOrCheerioImg","mediaItemNodes","possibleHtmlSrcs","stripImageSizesFromUrl","imageNode","mediaItemNode","mediaItemUrl","replace","displayedFailedToRestoreMessage","fetchNodeHtmlImageMediaItemNodes","cheerioImages","helpers","nodeMetaByUrl","store","getState","imageNodes","previouslyCachedNodesByUrl","Promise","all","Object","entries","existingNode","getNode","reporter","warn","formatLogMessage","Boolean","mediaItemUrls","mediaItemNodesBySourceUrl","fetchReferencedMediaItemsAndCreateNodes","mediaItemDbIds","mediaItemRelayIds","relayId","mediaItemNodesById","referencedMediaItemNodeIds","createdNodes","htmlMatchesToMediaItemNodesMap","Map","htmlImgSrc","cacheCreatedFileNodeBySrc","set","getCheerioElementFromMatch","tag","parsedMatch","JSON","$","cheerio","load","xml","withDomLvl1","normalizeWhitespace","xmlMode","decodeEntities","cheerioElement","getCheerioElementsFromMatches","imgTagMatches","isWebUri","encodeURI","getLargestSizeFromSizesAttribute","sizesString","sizesStringsArray","reduce","largest","currentSizeString","maxWidth","substring","indexOf","trim","maxWidthNumber","noLargestAndMaxWidthIsANumber","isNaN","maxWidthIsALargerNumberThanLargest","findImgTagMaxWidthFromCheerioImg","widthNumber","largestSize","getFileNodeRelativePathname","fileNode","fileName","internal","contentDigest","base","getFileNodePublicPath","publicPath","path","join","process","cwd","copyFileToStaticAndReturnUrlPath","fs","existsSync","copy","absolutePath","dereference","err","console","error","relativeUrl","pathPrefix","dispatch","pushNodeMeta","modifiedGmt","imgSrcRemoteFileRegex","getImgSrcRemoteFileMatchesFromNodeString","isInJSON","getImgTagMatches","replaceNodeHtmlImages","html","useGatsbyImage","exclude","imageUrlMatches","htmlMatchesWithImageResizes","matchInfo","get","isMediaItemNode","__typename","localFile","extension","mimeType","mediaType","imgTagMaxWidth","mediaItemNodeWidth","fallbackImageMaxWidth","configuredMaxWidth","imageMaxWidth","quality","imageQuality","gatsbyTransformerSharpSupportsThisFileType","supportedExtensions","imageResize","publicUrl","imageUrl","placeholderUrl","formats","generateWebpImages","push","generateAvifImages","gatsbyImageResolver","height","filename","basename","file","layout","placeholder","placeholderType","actions","gatsbyStore","publicUrlResolver","e","replaceIndex","matchResize","ReactGatsbyImage","gatsbyImageHydrationData","images","sources","fallback","image","alt","String","React","createElement","GatsbyImage","gatsbyImageStringRaw","ReactDOMServer","renderToString","stringify","gatsbyImageStringJSON","gatsbyImageString","replaceAll","replaceFileLinks","createStaticFiles","hrefMatches","RegExp","mediaItemUrlsAndMatches","matchGroup","findReplaceMaps","parent","mediaItemMatchGroup","hostname","getWpLinkRegex","replaceNodeHtmlLinks","wpLinkRegex","linkMatches","normalizedMatch","normalizedPath","thisMatchRegex","searchAndReplaceNodeStrings","Array","isArray","searchAndReplace","search","searchRegex","stringMatches","processNodeString","nodeStringFilters","nodeStringFilter","processNode","nodeMediaItemIdReferences","add","processedNodeString","processedNode"],"sources":["../../../../src/steps/source-nodes/create-nodes/process-node.js"],"sourcesContent":["/* eslint-disable no-useless-escape */\nimport { isWebUri } from \"valid-url\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport React from \"react\"\nimport ReactDOMServer from \"react-dom/server\"\nimport stringify from \"fast-json-stable-stringify\"\nimport execall from \"execall\"\nimport cheerio from \"cheerio\"\nimport url from \"url\"\nimport path from \"path\"\nimport fs from \"fs-extra\"\nimport { supportedExtensions } from \"gatsby-transformer-sharp/supported-extensions\"\nimport replaceAll from \"replaceall\"\nimport { usingGatsbyV4OrGreater } from \"~/utils/gatsby-version\"\nimport { gatsbyImageResolver } from \"gatsby-plugin-utils/dist/polyfill-remote-file/graphql/gatsby-image-resolver\"\nimport { publicUrlResolver } from \"gatsby-plugin-utils/dist/polyfill-remote-file/graphql/public-url-resolver\"\n\nimport { formatLogMessage } from \"~/utils/format-log-message\"\n\nimport fetchReferencedMediaItemsAndCreateNodes, {\n  stripImageSizesFromUrl,\n} from \"../fetch-nodes/fetch-referenced-media-items\"\nimport { b64e } from \"~/utils/string-encoding\"\nimport store from \"~/store\"\n\nimport { store as gatsbyStore } from \"gatsby/dist/redux\"\n\n/**\n * Takes in a MediaItem node from WPGraphQL as well as Gatsby plugin options and returns the correct placeholder URL for GatsbyImage\n *\n * The user must set the placeholderSizeName plugin option, or otherwise create an image size in WP where the name is `gatsby-image-placeholder`\n */\nexport function getPlaceholderUrlFromMediaItemNode(node, pluginOptions) {\n  let placeholderSizeByWidth\n  let placeholderSizeByName\n\n  node.mediaDetails?.sizes?.forEach(size => {\n    if (\n      size.name ===\n      (pluginOptions?.type?.MediaItem?.placeholderSizeName ||\n        `gatsby-image-placeholder`)\n    ) {\n      placeholderSizeByName = size\n    } else if (Number(size.width) <= 20) {\n      placeholderSizeByWidth = size\n    }\n  })\n\n  const placeHolderSize = placeholderSizeByName || placeholderSizeByWidth\n\n  return placeHolderSize?.sourceUrl\n}\n\nconst findReferencedImageNodeIds = ({ nodeString, pluginOptions, node }) => {\n  // if the lazyNodes plugin option is set we don't need to find\n  // image node id's because those nodes will be fetched lazily in resolvers.\n  if (\n    pluginOptions.type.MediaItem.lazyNodes &&\n    // but not in Gatsby v4+ because lazyNodes is no longer supported\n    !usingGatsbyV4OrGreater\n  ) {\n    return []\n  }\n\n  // get an array of all referenced media file ID's\n  const matchedIds = execall(\n    /\"__typename\":\"MediaItem\",\"id\":\"([^\"]*)\"/gm,\n    nodeString\n  )\n    .map(match => match.subMatches[0])\n    .filter(id => id !== node.id)\n\n  return matchedIds\n}\n\nconst getCheerioImgDbId = cheerioImg => {\n  // try to get the db id from data attributes\n  const dataAttributeId =\n    cheerioImg.attribs[`data-id`] || cheerioImg.attribs[`data-image-id`]\n\n  if (dataAttributeId) {\n    return dataAttributeId\n  }\n\n  if (!cheerioImg.attribs.class) {\n    return null\n  }\n\n  // try to get the db id from the wp-image-id classname\n  const wpImageClass = cheerioImg.attribs.class\n    .split(` `)\n    .find(className => className.includes(`wp-image-`))\n\n  if (wpImageClass) {\n    const wpImageClassDashArray = wpImageClass.split(`-`)\n    const wpImageClassId = Number(\n      wpImageClassDashArray[wpImageClassDashArray.length - 1]\n    )\n\n    if (wpImageClassId) {\n      return wpImageClassId\n    }\n  }\n\n  return null\n}\n\n// media items are of the \"post\" type\nconst dbIdToMediaItemRelayId = dbId => (dbId ? b64e(`post:${dbId}`) : null)\n\nconst getCheerioImgRelayId = cheerioImg =>\n  dbIdToMediaItemRelayId(getCheerioImgDbId(cheerioImg))\n\nexport const ensureSrcHasHostname = ({ src, wpUrl }) => {\n  const { protocol, host } = url.parse(wpUrl)\n\n  if (src.startsWith(`/wp-content`)) {\n    src = `${protocol}//${host}${src}`\n  }\n\n  return src\n}\n\nconst pickNodeBySourceUrlOrCheerioImg = ({\n  url,\n  cheerioImg,\n  mediaItemNodes,\n}) => {\n  const possibleHtmlSrcs = [\n    // try to match the media item source url by original html src\n    url,\n    // or by the src minus any image sizes string\n    stripImageSizesFromUrl(url),\n  ]\n\n  let imageNode = mediaItemNodes.find(\n    mediaItemNode =>\n      // either find our node by the source url\n      possibleHtmlSrcs.includes(mediaItemNode.sourceUrl) ||\n      possibleHtmlSrcs.includes(\n        // try to match without -scaled in the sourceUrl as well\n        // since WP adds -scaled to image urls if they were too large\n        // at upload time but image urls in html don't have this requirement.\n        // the sourceUrl may have -scaled in it but the full size image is still\n        // stored on the server (just not in the db)\n        (mediaItemNode.sourceUrl || mediaItemNode.mediaItemUrl)?.replace(\n          `-scaled`,\n          ``\n        )\n      )\n  )\n\n  if (!imageNode && cheerioImg) {\n    imageNode = mediaItemNodes.find(\n      mediaItemNode => getCheerioImgRelayId(cheerioImg) === mediaItemNode.id\n    )\n  }\n\n  return imageNode\n}\n\nlet displayedFailedToRestoreMessage = false\n\nconst fetchNodeHtmlImageMediaItemNodes = async ({\n  // node, // for inspecting nodes while debugging\n  cheerioImages,\n  helpers,\n  wpUrl,\n}) => {\n  // get all the image nodes we've cached from elsewhere\n  const { nodeMetaByUrl } = store.getState().imageNodes\n\n  const previouslyCachedNodesByUrl = (\n    await Promise.all(\n      Object.entries(nodeMetaByUrl).map(([sourceUrl, { id } = {}]) => {\n        if (!sourceUrl || !id) {\n          return null\n        }\n\n        sourceUrl = ensureSrcHasHostname({ wpUrl, src: sourceUrl })\n\n        const existingNode = helpers.getNode(id)\n\n        if (!existingNode) {\n          if (!displayedFailedToRestoreMessage) {\n            helpers.reporter.warn(\n              formatLogMessage(\n                `File node failed to restore from cache. This is a bug in gatsby-source-wordpress. Please open an issue so we can help you out :)`\n              )\n            )\n            displayedFailedToRestoreMessage = true\n          }\n\n          return null\n        }\n\n        return {\n          sourceUrl,\n          ...existingNode,\n        }\n      })\n    )\n  ).filter(Boolean)\n\n  const mediaItemUrls = cheerioImages\n    // filter out nodes we already have\n    .filter(({ cheerioImg }) => {\n      const url = ensureSrcHasHostname({ wpUrl, src: cheerioImg.attribs.src })\n\n      const existingNode = pickNodeBySourceUrlOrCheerioImg({\n        url,\n        mediaItemNodes: previouslyCachedNodesByUrl,\n      })\n\n      return !existingNode\n    })\n    // get remaining urls\n    .map(({ cheerioImg }) => {\n      const src = ensureSrcHasHostname({\n        src: cheerioImg.attribs.src,\n        wpUrl,\n      })\n\n      return src\n    })\n\n  // build a query to fetch all media items that we don't already have\n  const mediaItemNodesBySourceUrl =\n    await fetchReferencedMediaItemsAndCreateNodes({\n      mediaItemUrls,\n    })\n  // images that have been edited from the media library that were previously\n  // uploaded to a post/page will have a different sourceUrl so they can't be fetched by it\n  // in many cases we have data-id or data-image-id as attributes on the img\n  // we can try to use those to fetch media item nodes as well\n  // this will keep us from missing nodes\n  const mediaItemDbIds = cheerioImages\n    .map(({ cheerioImg }) => getCheerioImgDbId(cheerioImg))\n    .filter(Boolean)\n\n  const mediaItemRelayIds = mediaItemDbIds\n    .map(dbId => dbIdToMediaItemRelayId(dbId))\n    .filter(\n      // filter out any media item ids we already fetched\n      relayId =>\n        ![...mediaItemNodesBySourceUrl, ...previouslyCachedNodesByUrl].find(\n          ({ id } = {}) => id === relayId\n        )\n    )\n\n  const mediaItemNodesById = await fetchReferencedMediaItemsAndCreateNodes({\n    referencedMediaItemNodeIds: mediaItemRelayIds,\n  })\n\n  const createdNodes = [...mediaItemNodesById, ...mediaItemNodesBySourceUrl]\n\n  const mediaItemNodes = [...createdNodes, ...previouslyCachedNodesByUrl]\n\n  const htmlMatchesToMediaItemNodesMap = new Map()\n  for (const { cheerioImg, match } of cheerioImages) {\n    const htmlImgSrc = ensureSrcHasHostname({\n      src: cheerioImg.attribs.src,\n      wpUrl,\n    })\n\n    const imageNode = pickNodeBySourceUrlOrCheerioImg({\n      url: htmlImgSrc,\n      cheerioImg,\n      mediaItemNodes,\n    })\n\n    cacheCreatedFileNodeBySrc({ node: imageNode, src: htmlImgSrc })\n\n    if (imageNode) {\n      // match is the html string of the img tag\n      htmlMatchesToMediaItemNodesMap.set(match, { imageNode, cheerioImg })\n    }\n  }\n\n  return htmlMatchesToMediaItemNodesMap\n}\n\nconst getCheerioElementFromMatch =\n  wpUrl =>\n  ({ match, tag = `img` }) => {\n    // unescape quotes\n    const parsedMatch = JSON.parse(`\"${match}\"`)\n\n    // load our matching img tag into cheerio\n    const $ = cheerio.load(parsedMatch, {\n      xml: {\n        // make sure it's not wrapped in <body></body>\n        withDomLvl1: false,\n        // no need to normalize whitespace, we're dealing with a single element here\n        normalizeWhitespace: false,\n        xmlMode: true,\n        // entity decoding isn't our job here, that will be the responsibility of WPGQL\n        // or of the source plugin elsewhere.\n        decodeEntities: false,\n      },\n    })\n\n    // there's only ever one element due to our match matching a single tag\n    // $(tag) isn't an array, it's an object with a key of 0\n    const cheerioElement = $(tag)[0]\n\n    if (cheerioElement?.attribs?.src?.startsWith(`/wp-content`)) {\n      cheerioElement.attribs.src = `${wpUrl}${cheerioElement.attribs.src}`\n    }\n\n    return {\n      match,\n      cheerioElement,\n      // @todo this is from when this function was just used for images\n      // remove this by refactoring\n      cheerioImg: cheerioElement,\n    }\n  }\n\nconst getCheerioElementsFromMatches = ({ imgTagMatches, wpUrl }) =>\n  imgTagMatches\n    .map(getCheerioElementFromMatch(wpUrl))\n    .filter(({ cheerioImg: { attribs } }) => {\n      if (!attribs.src) {\n        return false\n      }\n\n      return isWebUri(encodeURI(attribs.src))\n    })\n\nconst getLargestSizeFromSizesAttribute = sizesString => {\n  const sizesStringsArray = sizesString.split(`,`)\n\n  return sizesStringsArray.reduce((largest, currentSizeString) => {\n    const maxWidth = currentSizeString\n      .substring(\n        currentSizeString.indexOf(`max-width: `) + 1,\n        currentSizeString.indexOf(`px`)\n      )\n      .trim()\n\n    const maxWidthNumber = Number(maxWidth)\n    const noLargestAndMaxWidthIsANumber = !largest && !isNaN(maxWidthNumber)\n    const maxWidthIsALargerNumberThanLargest =\n      largest && !isNaN(maxWidthNumber) && maxWidthNumber > largest\n\n    if (noLargestAndMaxWidthIsANumber || maxWidthIsALargerNumberThanLargest) {\n      largest = maxWidthNumber\n    }\n\n    return largest\n  }, null)\n}\n\nconst findImgTagMaxWidthFromCheerioImg = cheerioImg => {\n  const {\n    attribs: { width, sizes },\n  } = cheerioImg || { attribs: { width: null, sizes: null } }\n\n  if (width) {\n    const widthNumber = Number(width)\n\n    if (!isNaN(widthNumber)) {\n      return widthNumber\n    }\n  }\n\n  if (sizes) {\n    const largestSize = getLargestSizeFromSizesAttribute(sizes)\n\n    if (largestSize && !isNaN(largestSize)) {\n      return largestSize\n    }\n  }\n\n  return null\n}\n\nconst getFileNodeRelativePathname = fileNode => {\n  const fileName = `${fileNode.internal.contentDigest}/${fileNode.base}`\n\n  return fileName\n}\n\nconst getFileNodePublicPath = fileNode => {\n  const fileName = getFileNodeRelativePathname(fileNode)\n\n  const publicPath = path.join(process.cwd(), `public`, `static`, fileName)\n\n  return publicPath\n}\n\nconst copyFileToStaticAndReturnUrlPath = async (fileNode, helpers) => {\n  const publicPath = getFileNodePublicPath(fileNode)\n\n  if (!fs.existsSync(publicPath)) {\n    await fs.copy(\n      fileNode.absolutePath,\n      publicPath,\n      { dereference: true },\n      err => {\n        if (err) {\n          console.error(\n            `error copying file from ${fileNode.absolutePath} to ${publicPath}`,\n            err\n          )\n        }\n      }\n    )\n  }\n\n  const fileName = getFileNodeRelativePathname(fileNode)\n\n  const relativeUrl = `${helpers.pathPrefix ?? ``}/static/${fileName}`\n\n  return relativeUrl\n}\n\nconst cacheCreatedFileNodeBySrc = ({ node, src }) => {\n  if (node) {\n    // save any fetched media items in our global media item cache\n    store.dispatch.imageNodes.pushNodeMeta({\n      sourceUrl: src,\n      id: node.id,\n      modifiedGmt: node.modifiedGmt,\n    })\n  }\n}\n\nconst imgSrcRemoteFileRegex =\n  /(?:src=\\\\\")((?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.|\\/)(?:[^'\"])*\\.(?:jpeg|jpg|png|gif|ico|mpg|ogv|svg|bmp|tif|tiff))(\\?[^\\\\\" \\.]*|)(?=\\\\\"| |\\.)/gim\n\nexport const getImgSrcRemoteFileMatchesFromNodeString = nodeString =>\n  execall(imgSrcRemoteFileRegex, nodeString).filter(({ subMatches }) => {\n    // if our match is json encoded, that means it's inside a JSON\n    // encoded string field.\n    const isInJSON = subMatches[0].includes(`\\\\/\\\\/`)\n\n    // we shouldn't process encoded JSON, so skip this match if it's JSON\n    return !isInJSON\n  })\n\nexport const getImgTagMatches = ({ nodeString }) =>\n  execall(\n    /<img([\\w\\W]+?)[\\/]?>/gim,\n    nodeString\n      // we don't want to match images inside pre\n      .replace(/<pre([\\w\\W]+?)[\\/]?>(?:(?!<\\/pre>).)+(<\\/pre>)/gim, ``)\n      // and code tags, so temporarily remove those tags and everything inside them\n      .replace(/<code([\\w\\W]+?)[\\/]?>(?:(?!<\\/code>).)+(<\\/code>)/gim, ``)\n  )\n\nexport const replaceNodeHtmlImages = async ({\n  nodeString,\n  node,\n  helpers,\n  wpUrl,\n  pluginOptions,\n}) => {\n  // this prevents fetching inline html images\n  if (\n    !pluginOptions?.html?.useGatsbyImage ||\n    pluginOptions?.type?.MediaItem?.exclude\n  ) {\n    return nodeString\n  }\n\n  const imageUrlMatches = getImgSrcRemoteFileMatchesFromNodeString(nodeString)\n\n  const imgTagMatches = getImgTagMatches({ nodeString })\n\n  if (imageUrlMatches.length && imgTagMatches.length) {\n    const cheerioImages = getCheerioElementsFromMatches({\n      imgTagMatches,\n      wpUrl,\n    })\n\n    const htmlMatchesToMediaItemNodesMap =\n      await fetchNodeHtmlImageMediaItemNodes({\n        cheerioImages,\n        nodeString,\n        node,\n        helpers,\n        pluginOptions,\n        wpUrl,\n      })\n\n    // generate gatsby images for each cheerioImage\n    const htmlMatchesWithImageResizes = await Promise.all(\n      imgTagMatches.map(async ({ match }) => {\n        const matchInfo = htmlMatchesToMediaItemNodesMap.get(match)\n\n        if (!matchInfo) {\n          return null\n        }\n\n        const { imageNode, cheerioImg } = matchInfo\n\n        const isMediaItemNode = imageNode.__typename === `MediaItem`\n\n        if (!imageNode) {\n          return null\n        }\n\n        const fileNode =\n          // if we couldn't get a MediaItem node for this image in WPGQL\n          !isMediaItemNode\n            ? // this will already be a file node\n              imageNode\n            : // otherwise grab the file node\n              helpers.getNode(imageNode?.localFile?.id)\n\n        const extension = imageNode?.mimeType?.replace(\n          `${imageNode?.mediaType}/`,\n          ``\n        )\n\n        const imgTagMaxWidth = findImgTagMaxWidthFromCheerioImg(cheerioImg)\n\n        const mediaItemNodeWidth = isMediaItemNode\n          ? imageNode?.mediaDetails?.width\n          : null\n\n        // if a max width can't be inferred from html, this value will be passed to Sharp\n        let fallbackImageMaxWidth = pluginOptions?.html?.fallbackImageMaxWidth\n\n        if (\n          // if the image is smaller than the fallback max width,\n          // the images width will be used instead if we have a media item node\n          fallbackImageMaxWidth > mediaItemNodeWidth &&\n          // of course that means we have to have a media item node\n          // and a media item node max width\n          mediaItemNodeWidth &&\n          typeof mediaItemNodeWidth === `number` &&\n          mediaItemNodeWidth > 0\n        ) {\n          fallbackImageMaxWidth = mediaItemNodeWidth\n        }\n\n        let maxWidth =\n          // if we inferred a maxwidth from html\n          (imgTagMaxWidth &&\n          // and we have a media item node to know it's full size max width\n          mediaItemNodeWidth &&\n          // and this isn't an svg which has no maximum width\n          extension !== `svg` &&\n          // and the media item node max width is smaller than what we inferred\n          // from html\n          mediaItemNodeWidth < imgTagMaxWidth\n            ? // use the media item node width\n              mediaItemNodeWidth\n            : // otherwise use the width inferred from html\n              imgTagMaxWidth) ??\n          // if we don't have a media item node and we inferred no width\n          // from html, then use the fallback max width from plugin options\n          fallbackImageMaxWidth\n\n        const configuredMaxWidth = pluginOptions?.html?.imageMaxWidth\n\n        // if the configured html.maxWidth property is less than the result, then\n        // override the resulting width\n        if (configuredMaxWidth && configuredMaxWidth < maxWidth) {\n          maxWidth = configuredMaxWidth\n        }\n\n        const quality = pluginOptions?.html?.imageQuality ?? 70\n\n        const { reporter } = helpers\n\n        const gatsbyTransformerSharpSupportsThisFileType =\n          supportedExtensions[extension] || extension === `gif`\n\n        let imageResize = null\n        let publicUrl\n\n        const imageUrl =\n          imageNode.mediaItemUrl || imageNode.sourceUrl || imageNode.url\n\n        try {\n          if (gatsbyTransformerSharpSupportsThisFileType) {\n            const placeholderUrl = getPlaceholderUrlFromMediaItemNode(\n              imageNode,\n              pluginOptions\n            )\n\n            const formats = [`auto`]\n            if (pluginOptions.html.generateWebpImages) {\n              formats.push(`webp`)\n            }\n            if (pluginOptions.html.generateAvifImages) {\n              formats.push(`avif`)\n            }\n\n            imageResize = await gatsbyImageResolver(\n              {\n                url: imageUrl,\n                placeholderUrl,\n                mimeType: imageNode.mimeType,\n                width: imageNode.mediaDetails.width,\n                height: imageNode.mediaDetails.height,\n                filename: path.basename(imageNode.mediaDetails.file),\n                internal: {\n                  contentDigest: imageNode.modifiedGmt,\n                },\n              },\n              {\n                width: maxWidth,\n                layout: `constrained`,\n                placeholder: !placeholderUrl\n                  ? `none`\n                  : pluginOptions?.html?.placeholderType || `dominantColor`,\n                quality,\n                formats,\n              },\n              helpers.actions,\n              gatsbyStore\n            )\n          } else {\n            publicUrl = publicUrlResolver(\n              {\n                url: imageUrl,\n                mimeType: imageNode.mimeType,\n                filename: path.basename(imageNode.sourceUrl || imageNode.url),\n                internal: {\n                  contentDigest: imageNode.modifiedGmt,\n                },\n              },\n              helpers.actions,\n              gatsbyStore\n            )\n          }\n        } catch (e) {\n          reporter.error(e)\n          reporter.warn(\n            formatLogMessage(\n              `${node.__typename} ${node.id} couldn't process inline html image ${imageUrl}`\n            )\n          )\n          return null\n        }\n\n        return {\n          match,\n          cheerioImg,\n          fileNode,\n          imageResize,\n          maxWidth,\n          publicUrl,\n        }\n      })\n    )\n\n    // find/replace mutate nodeString to replace matched images with rendered gatsby images\n    let replaceIndex = 0\n    for (const matchResize of htmlMatchesWithImageResizes) {\n      if (!matchResize) {\n        continue\n      }\n\n      const { match, imageResize, cheerioImg, publicUrl } = matchResize\n\n      let ReactGatsbyImage\n      // used to create hydration data for images\n      let gatsbyImageHydrationData = null\n      if (\n        imageResize &&\n        (imageResize.images.sources.length > 0 || imageResize.images.fallback)\n      ) {\n        gatsbyImageHydrationData = {\n          image: imageResize,\n          alt: cheerioImg?.attribs?.alt,\n          className: `${\n            cheerioImg?.attribs?.class || ``\n          } inline-gatsby-image-wrapper`,\n          \"data-wp-inline-image\": String(++replaceIndex),\n        }\n        ReactGatsbyImage = React.createElement(\n          GatsbyImage,\n          gatsbyImageHydrationData,\n          null\n        )\n      } else if (publicUrl) {\n        ReactGatsbyImage = React.createElement(\n          `img`,\n          {\n            src: publicUrl,\n            alt: cheerioImg?.attribs?.alt,\n            className: `${\n              cheerioImg?.attribs?.class || ``\n            } inline-gatsby-image-wrapper`,\n          },\n          null\n        )\n      }\n\n      if (ReactGatsbyImage) {\n        let gatsbyImageStringRaw =\n          ReactDOMServer.renderToString(ReactGatsbyImage)\n\n        // gatsby-plugin-image needs hydration data to work on navigations - we add the hydration data to the DOM to use it in gatsby-browser.ts\n        if (gatsbyImageHydrationData) {\n          gatsbyImageStringRaw += `<script type=\"application/json\" data-wp-inline-image-hydration=\"${replaceIndex}\">${JSON.stringify(\n            gatsbyImageHydrationData\n          )}</script>`\n        }\n        // need to remove the JSON stringify quotes around our image since we're\n        // threading this JSON string back into a larger JSON object string\n        const gatsbyImageStringJSON = JSON.stringify(gatsbyImageStringRaw)\n        const gatsbyImageString = gatsbyImageStringJSON.substring(\n          1,\n          gatsbyImageStringJSON.length - 1\n        )\n\n        nodeString = replaceAll(match, gatsbyImageString, nodeString)\n      }\n    }\n  }\n\n  return nodeString\n}\n\nconst replaceFileLinks = async ({\n  nodeString,\n  helpers,\n  wpUrl,\n  pluginOptions,\n  node,\n}) => {\n  if (\n    !pluginOptions?.html?.createStaticFiles ||\n    pluginOptions?.type?.MediaItem?.exclude\n  ) {\n    return nodeString\n  }\n\n  if (node.__typename === `MediaItem`) {\n    // we don't want to replace file links on MediaItem nodes because they're processed specially from other node types.\n    // if we replace file links here then we wont be able to properly fetch the localFile node\n    return nodeString\n  }\n\n  const hrefMatches = [\n    // match url pathnames in html fields, for ex /wp-content/uploads/2019/01/image.jpg\n    ...(execall(\n      /(\\\\\"|\\\\'|\\()([^'\"()]*)(\\/wp-content\\/uploads\\/[^'\">()]+)(\\\\\"|\\\\'|>|\\))/gm,\n      nodeString\n    ) || []),\n    // match full urls in json fields, for ex https://example.com/wp-content/uploads/2019/01/image.jpg\n    ...(execall(\n      new RegExp(\n        `(\\\\\"|\\\\'|\\\\()([^'\"()]*)(${wpUrl}\\/wp-content\\/uploads\\/[^'\">()]+)(\\\\\"|\\\\'|>|\\\\))`,\n        `gm`\n      ),\n      nodeString\n    ) || []),\n  ]\n\n  if (hrefMatches.length) {\n    // eslint-disable-next-line arrow-body-style\n    const mediaItemUrlsAndMatches = hrefMatches.map(matchGroup => {\n      const match = matchGroup.subMatches[2]\n      const url = match.startsWith(wpUrl) ? match : `${wpUrl}${match}`\n      return {\n        matchGroup,\n        url,\n      }\n    })\n\n    const mediaItemUrls = mediaItemUrlsAndMatches\n      .map(({ url }) => url)\n      .filter(isWebUri)\n\n    const mediaItemNodesBySourceUrl =\n      await fetchReferencedMediaItemsAndCreateNodes({\n        mediaItemUrls,\n      })\n\n    const findReplaceMaps = []\n\n    await Promise.all(\n      mediaItemNodesBySourceUrl.map(async node => {\n        let fileNode\n        let mediaItemNode\n\n        if (node.internal.type === `File`) {\n          fileNode = node\n          mediaItemNode = await helpers.getNode(node.parent)\n        } else if (node.localFile?.id) {\n          fileNode = await helpers.getNode(node.localFile.id)\n          mediaItemNode = node\n        } else {\n          return null\n        }\n\n        const relativeUrl = await copyFileToStaticAndReturnUrlPath(\n          fileNode,\n          helpers\n        )\n\n        if (!relativeUrl || !mediaItemNode?.mediaItemUrl || !fileNode) {\n          return null\n        }\n\n        const mediaItemMatchGroup = mediaItemUrlsAndMatches.find(\n          ({\n            matchGroup: {\n              subMatches: [, , path],\n            },\n          }) => mediaItemNode.mediaItemUrl.includes(path)\n        )?.matchGroup\n\n        if (!mediaItemMatchGroup) {\n          return null\n        }\n\n        const [, hostname, path] = mediaItemMatchGroup.subMatches\n\n        cacheCreatedFileNodeBySrc({\n          node: mediaItemNode,\n          src: `${wpUrl}${path}`,\n        })\n\n        findReplaceMaps.push({\n          find: `${hostname || ``}${path}`,\n          replace: relativeUrl,\n        })\n\n        findReplaceMaps.push({\n          find: path,\n          replace: relativeUrl,\n        })\n\n        return null\n      })\n    )\n\n    for (const { find, replace } of findReplaceMaps.filter(Boolean)) {\n      nodeString = replaceAll(find, replace, nodeString)\n    }\n  }\n\n  return nodeString\n}\n\nexport const getWpLinkRegex = wpUrl =>\n  new RegExp(\n    `[\"']${wpUrl}(?!/wp-content|/wp-admin|/wp-includes)(/[^'\"]+)[\"']`,\n    `gim`\n  )\n\n// replaces any url which is a front-end WP url with a relative path\nconst replaceNodeHtmlLinks = ({ wpUrl, nodeString, node }) => {\n  const wpLinkRegex = getWpLinkRegex(wpUrl)\n  const linkMatches = execall(wpLinkRegex, nodeString)\n\n  if (linkMatches.length) {\n    linkMatches.forEach(({ match, subMatches: [path] }) => {\n      if (path) {\n        try {\n          // remove \\, \" and ' characters from match\n          const normalizedMatch = match\n            .replace(/['\"\\\\]/g, ``)\n            // ensure that query params are properly quoted\n            .replace(/\\?/, `\\\\?`)\n\n          const normalizedPath = path.replace(/\\\\/g, ``)\n\n          // replace normalized match with relative path\n          const thisMatchRegex = new RegExp(\n            normalizedMatch + `(?!/?wp-content|/?wp-admin|/?wp-includes)`,\n            `g`\n          )\n\n          nodeString = nodeString.replace(thisMatchRegex, normalizedPath)\n        } catch (e) {\n          console.error(e)\n          console.warn(\n            formatLogMessage(\n              `Failed to process inline html links in ${node.__typename} ${node.id}`\n            )\n          )\n        }\n      }\n    })\n  }\n\n  return nodeString\n}\n\n// replaces specific string or regex with a given string from the plugin options config\nexport const searchAndReplaceNodeStrings = ({\n  nodeString,\n  node,\n  pluginOptions,\n}) => {\n  if (Array.isArray(pluginOptions?.searchAndReplace)) {\n    pluginOptions.searchAndReplace.forEach(({ search, replace }) => {\n      const searchRegex = new RegExp(search, `g`)\n\n      const stringMatches = execall(searchRegex, nodeString)\n\n      if (stringMatches.length) {\n        stringMatches.forEach(({ match }) => {\n          if (match) {\n            try {\n              nodeString = nodeString.replace(search, replace)\n            } catch (e) {\n              console.error(e)\n              console.warn(\n                formatLogMessage(\n                  `Failed to process search and replace string in ${node.__typename} ${node.id}`\n                )\n              )\n            }\n          }\n        })\n      }\n    })\n  }\n\n  return nodeString\n}\n\nconst processNodeString = async ({\n  nodeString,\n  node,\n  pluginOptions,\n  helpers,\n  wpUrl,\n}) => {\n  const nodeStringFilters = [\n    searchAndReplaceNodeStrings,\n    replaceNodeHtmlImages,\n    replaceFileLinks,\n    replaceNodeHtmlLinks,\n  ]\n\n  for (const nodeStringFilter of nodeStringFilters) {\n    nodeString = await nodeStringFilter({\n      nodeString,\n      node,\n      pluginOptions,\n      helpers,\n      wpUrl,\n    })\n  }\n\n  return nodeString\n}\n\nconst processNode = async ({\n  node,\n  pluginOptions,\n  wpUrl,\n  helpers,\n  referencedMediaItemNodeIds,\n}) => {\n  const nodeString = stringify(node)\n\n  // find referenced node ids\n  // here we're searching for node id strings in our node\n  // we use this to download only the media items\n  // that are being used in posts\n  // this is important for downloading images nodes that are connected somewhere\n  // on a node field\n  const nodeMediaItemIdReferences = findReferencedImageNodeIds({\n    nodeString,\n    pluginOptions,\n    node,\n  })\n\n  // push them to our store of referenced id's\n  if (nodeMediaItemIdReferences?.length && referencedMediaItemNodeIds) {\n    nodeMediaItemIdReferences.forEach(id => referencedMediaItemNodeIds.add(id))\n  }\n\n  const processedNodeString = await processNodeString({\n    nodeString,\n    node,\n    pluginOptions,\n    helpers,\n    wpUrl,\n  })\n\n  const processedNode =\n    // only parse if the nodeString has changed\n    processedNodeString !== nodeString ? JSON.parse(processedNodeString) : node\n\n  return {\n    processedNode,\n    nodeMediaItemIdReferences,\n  }\n}\n\nexport { processNode }\n"],"mappings":"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"}