{"version":3,"file":"fetch-nodes.js","names":["fetchWPGQLContentNodes","queryInfo","pluginOptions","helpers","store","getState","gatsbyApi","reporter","url","schema","perPage","nodeListQueries","typeInfo","settings","typeName","nodesTypeName","dispatch","logger","createActivityTimer","allNodesOfContentType","nodeListQuery","contentNodes","paginatedWpNodeFetch","first","after","contentTypePlural","pluralName","nodeTypeName","query","stopActivityTimer","length","singular","singularName","plural","getContentTypeQueryInfos","nodeQueries","remoteSchema","queryInfos","Object","values","filter","exclude","cachedGatsbyNodeTypeNames","getGatsbyNodeTypeNames","typeMap","queryableTypenames","map","implementingNodeTypes","reduce","accumulator","typename","type","get","possibleTypes","name","allTypeNames","Set","allBuiltTypeNames","buildTypeName","typeNameList","runFnForEachNodeQuery","fn","chunkSize","getPluginOptions","requestConcurrency","chunkedQueries","chunk","queries","Promise","all","lazyNodes","usingGatsbyV4OrGreater","fetchWPGQLContentNodesByContentType","contentNodeGroups","contentNodeGroup","push","fetchAndCreateAllNodes","getGatsbyApi","activity","activityTimer","formatLogMessage","start","subscribe","setStatus","entityCount","createdNodeIds","hardCachedNodes","getHardCachedNodes","wpgqlNodesByContentType","createNodesActivity","createGatsbyNodesFromWPGQLContentNodes","setHardCachedNodes","end","restoreHardCachedNodes","setPersistentCache","key","CREATED_NODE_IDS","value"],"sources":["../../../../src/steps/source-nodes/fetch-nodes/fetch-nodes.js"],"sourcesContent":["import { createGatsbyNodesFromWPGQLContentNodes } from \"../create-nodes/create-nodes\"\nimport { paginatedWpNodeFetch } from \"./fetch-nodes-paginated\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { CREATED_NODE_IDS } from \"~/constants\"\nimport { usingGatsbyV4OrGreater } from \"~/utils/gatsby-version\"\n\nimport store from \"~/store\"\nimport { getGatsbyApi, getPluginOptions } from \"~/utils/get-gatsby-api\"\nimport chunk from \"lodash/chunk\"\n\nimport {\n  getHardCachedNodes,\n  restoreHardCachedNodes,\n  setHardCachedNodes,\n  setPersistentCache,\n} from \"~/utils/cache\"\nimport { buildTypeName } from \"../../create-schema-customization/helpers\"\n\n/**\n * fetchWPGQLContentNodes\n *\n * fetches and paginates remote nodes by post type while reporting progress\n */\nexport const fetchWPGQLContentNodes = async ({ queryInfo }) => {\n  const { pluginOptions, helpers } = store.getState().gatsbyApi\n  const { reporter } = helpers\n  const {\n    url,\n    schema: { perPage },\n  } = pluginOptions\n\n  const { nodeListQueries, typeInfo, settings } = queryInfo\n\n  const typeName = typeInfo.nodesTypeName\n\n  store.dispatch.logger.createActivityTimer({\n    typeName,\n    pluginOptions,\n    reporter,\n  })\n\n  let allNodesOfContentType = []\n\n  // there's normally just one query here, but more can be added using the settings.nodeListQueries api\n  for (const nodeListQuery of nodeListQueries) {\n    const contentNodes = await paginatedWpNodeFetch({\n      first: perPage,\n      after: null,\n      contentTypePlural: typeInfo.pluralName,\n      nodeTypeName: typeInfo.nodesTypeName,\n      query: nodeListQuery,\n      url,\n      settings,\n      helpers,\n    })\n\n    allNodesOfContentType = [...allNodesOfContentType, ...contentNodes]\n  }\n\n  store.dispatch.logger.stopActivityTimer({ typeName })\n\n  if (allNodesOfContentType && allNodesOfContentType.length) {\n    return {\n      singular: queryInfo.typeInfo.singularName,\n      plural: queryInfo.typeInfo.pluralName,\n      allNodesOfContentType,\n    }\n  }\n\n  return false\n}\n\n/**\n * getContentTypeQueryInfos\n *\n * returns query infos (Type info & GQL query strings) filtered to\n * remove types that are excluded in the plugin options\n *\n * @returns {Array} Type info & GQL query strings\n */\nexport const getContentTypeQueryInfos = () => {\n  const { nodeQueries } = store.getState().remoteSchema\n  const queryInfos = Object.values(nodeQueries).filter(\n    ({ settings }) => !settings.exclude\n  )\n  return queryInfos\n}\n\nlet cachedGatsbyNodeTypeNames = null\n\nexport const getGatsbyNodeTypeNames = () => {\n  if (cachedGatsbyNodeTypeNames) {\n    return cachedGatsbyNodeTypeNames\n  }\n\n  const { typeMap } = store.getState().remoteSchema\n\n  const queryableTypenames = getContentTypeQueryInfos().map(\n    query => query.typeInfo.nodesTypeName\n  )\n\n  const implementingNodeTypes = queryableTypenames.reduce(\n    (accumulator, typename) => {\n      const type = typeMap.get(typename)\n\n      if (type.possibleTypes?.length) {\n        accumulator = [\n          ...accumulator,\n          ...type.possibleTypes.map(({ name }) => name),\n        ]\n      }\n\n      return accumulator\n    },\n    []\n  )\n\n  const allTypeNames = [\n    ...new Set([...queryableTypenames, ...implementingNodeTypes]),\n  ]\n\n  const allBuiltTypeNames = allTypeNames.map(typename =>\n    buildTypeName(typename)\n  )\n\n  const typeNameList = [...allTypeNames, ...allBuiltTypeNames]\n\n  if (typeNameList.length) {\n    cachedGatsbyNodeTypeNames = typeNameList\n  }\n\n  return typeNameList\n}\n\n/**\n * fetchWPGQLContentNodesByContentType\n *\n * fetches nodes from the remote WPGQL server and groups them by post type\n *\n * @returns {Array}\n */\nexport const runFnForEachNodeQuery = async fn => {\n  const nodeQueries = getContentTypeQueryInfos()\n\n  const chunkSize = getPluginOptions()?.schema?.requestConcurrency || 15\n  const chunkedQueries = chunk(nodeQueries, chunkSize)\n\n  for (const queries of chunkedQueries) {\n    await Promise.all(\n      queries.map(async queryInfo => {\n        if (\n          // if the type settings call for lazyNodes, don't fetch them upfront here\n          (queryInfo.settings.lazyNodes &&\n            // but not in Gatsby v4+ since lazyNodes isn't supported in 4+\n            !usingGatsbyV4OrGreater) ||\n          // for media items we only want to fetch referenced nodes so don't fetch them here.\n          queryInfo.typeInfo.nodesTypeName === `MediaItem`\n        ) {\n          return\n        }\n\n        await fn({ queryInfo })\n      })\n    )\n  }\n}\n\nexport const fetchWPGQLContentNodesByContentType = async () => {\n  const contentNodeGroups = []\n\n  await runFnForEachNodeQuery(async ({ queryInfo }) => {\n    const contentNodeGroup = await fetchWPGQLContentNodes({ queryInfo })\n\n    if (contentNodeGroup) {\n      contentNodeGroups.push(contentNodeGroup)\n    }\n  })\n\n  return contentNodeGroups\n}\n\n/**\n * fetchAndCreateAllNodes\n *\n * uses query info (generated from introspection in onPreBootstrap) to\n * fetch and create Gatsby nodes from any lists of nodes in the remote schema\n */\nexport const fetchAndCreateAllNodes = async () => {\n  const { helpers } = getGatsbyApi()\n  const { reporter } = helpers\n\n  //\n  // fetch nodes from WPGQL\n  const activity = reporter.activityTimer(formatLogMessage(`fetching nodes`))\n  activity.start()\n\n  store.subscribe(() => {\n    activity.setStatus(`${store.getState().logger.entityCount} total`)\n  })\n\n  let createdNodeIds\n\n  const hardCachedNodes = await getHardCachedNodes()\n\n  if (!hardCachedNodes) {\n    const wpgqlNodesByContentType = await fetchWPGQLContentNodesByContentType()\n\n    const createNodesActivity = reporter.activityTimer(\n      formatLogMessage(`creating nodes`)\n    )\n    createNodesActivity.start()\n\n    //\n    // Create Gatsby nodes from WPGQL response\n    createdNodeIds = await createGatsbyNodesFromWPGQLContentNodes({\n      wpgqlNodesByContentType,\n      createNodesActivity,\n    })\n\n    await setHardCachedNodes({ helpers })\n\n    createNodesActivity.end()\n    activity.end()\n  } else if (hardCachedNodes) {\n    createdNodeIds = await restoreHardCachedNodes({\n      hardCachedNodes,\n    })\n  }\n\n  // save the node id's so we can touch them on the next build\n  // so that we don't have to refetch all nodes\n  await setPersistentCache({ key: CREATED_NODE_IDS, value: createdNodeIds })\n}\n"],"mappings":"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"}