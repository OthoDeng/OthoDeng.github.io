{"version":3,"file":"fetch-referenced-media-items.js","names":["nodeFetchConcurrency","concurrency","Number","process","env","GATSBY_CONCURRENT_DOWNLOAD","adjustedConcurrency","normalizedConcurrency","mediaFileFetchQueue","PQueue","carryoverConcurrencyCount","mediaNodeFetchQueue","previouslyRetriedPromises","pushPromiseOntoRetryQueue","node","helpers","createContentDigest","actions","queue","retryKey","retryPromise","add","timesRetried","Promise","resolve","setTimeout","error","reporter","info","panic","addImageCDNFieldsToNode","pluginOptions","__typename","includes","placeholderUrl","getPlaceholderUrlFromMediaItemNode","url","sourceUrl","mediaItemUrl","filename","mediaDetails","file","split","pop","path","basename","urlUtil","parse","pathname","contentType","mimeType","filesize","fileSize","width","height","sizes","createMediaItemNode","parentName","allMediaItemNodes","existingNode","getNode","id","store","dispatch","logger","incrementActivityTimer","typeName","by","push","resolveFutureNode","futureNode","fetchTimeout","log","formatLogMessage","getPluginOptions","createFileNodes","type","MediaItem","localFileNode","createLocalFileNode","mediaItemNode","clearTimeout","parent","internal","contentDigest","buildTypeName","localFile","normalizedNode","normalizeNode","nodeTypeName","createNode","urlToFileExtension","fileExtension","extname","stripImageSizesFromUrl","imageSizesPattern","RegExp","urlWithoutSizes","replace","createScaledImageUrl","isAlreadyScaled","scaledUrl","processAndDedupeImageUrls","urls","uniq","reduce","accumulator","strippedUrl","scaledStrippedUrl","fetchMediaItemsBySourceUrl","mediaItemUrls","selectionSet","builtFragments","processedMediaItemUrls","cachedMediaItemNodeIds","uncachedMediaItemUrls","getFileNodeMetaBySourceUrl","previouslyCachedMediaItemNodes","all","map","nodeId","parentNode","schema","perPage","mediaItemUrlsPages","chunk","length","allPromises","index","sourceUrls","entries","curPromise","join","query","data","fetchGraphql","variables","first","after","errorContext","thisPagesNodes","Object","values","filter","Boolean","nodes","forEach","imageNodes","pushNodeMeta","modifiedGmt","onIdle","allResults","flat","fetchMediaItemsById","mediaItemIds","settings","typeInfo","newMediaItemIds","chunkedIds","relayIds","ids","atob","slice","allNodesOfContentType","paginatedWpNodeFetch","contentTypePlural","pluralName","nodesTypeName","in","throwFetchErrors","referencedMediaItemNodeIds","fetchReferencedMediaItemsAndCreateNodes","state","getState","queryInfo","remoteSchema","nodeQueries","mediaItems","gatsbyApi","exclude","createdNodes","nodesSourcedById","nodesSourcedByUrl"],"sources":["../../../../src/steps/source-nodes/fetch-nodes/fetch-referenced-media-items.js"],"sourcesContent":["import chunk from \"lodash/chunk\"\nimport store from \"~/store\"\nimport atob from \"atob\"\nimport filesize from \"filesize\"\nimport PQueue from \"p-queue\"\nimport { createLocalFileNode } from \"../create-nodes/create-local-file-node\"\nimport { paginatedWpNodeFetch, normalizeNode } from \"./fetch-nodes-paginated\"\nimport { buildTypeName } from \"~/steps/create-schema-customization/helpers\"\nimport fetchGraphql from \"~/utils/fetch-graphql\"\nimport { getFileNodeMetaBySourceUrl } from \"~/steps/source-nodes/create-nodes/create-local-file-node\"\nimport uniq from \"lodash/uniq\"\nimport urlUtil from \"url\"\nimport path from \"path\"\nimport { getPluginOptions } from \"~/utils/get-gatsby-api\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { getPlaceholderUrlFromMediaItemNode } from \"../create-nodes/process-node\"\n\nconst nodeFetchConcurrency = 2\n\nconst concurrency = Number(process.env.GATSBY_CONCURRENT_DOWNLOAD ?? 200)\nconst adjustedConcurrency = Number(concurrency ?? 200) - nodeFetchConcurrency\nconst normalizedConcurrency =\n  adjustedConcurrency <= nodeFetchConcurrency\n    ? concurrency\n    : adjustedConcurrency\n\nconst mediaFileFetchQueue = new PQueue({\n  concurrency: normalizedConcurrency,\n  carryoverConcurrencyCount: true,\n})\n\nconst mediaNodeFetchQueue = new PQueue({\n  concurrency: nodeFetchConcurrency,\n  carryoverConcurrencyCount: true,\n})\n\nconst previouslyRetriedPromises = {}\n\nconst pushPromiseOntoRetryQueue = ({\n  node,\n  helpers,\n  createContentDigest,\n  actions,\n  queue,\n  retryKey,\n  retryPromise,\n}) => {\n  queue.add(async () => {\n    const timesRetried = previouslyRetriedPromises[retryKey] || 0\n\n    if (timesRetried >= 2) {\n      // if we've retried this more than once, pause for a sec.\n      await new Promise(resolve =>\n        setTimeout(() => resolve(), timesRetried * 500)\n      )\n    }\n\n    try {\n      await retryPromise({\n        createContentDigest,\n        actions,\n        helpers,\n        node,\n        queue,\n        retryKey,\n        retryPromise,\n        timesRetried,\n      })\n    } catch (error) {\n      // Errors that should exit are handled one level down\n      // in createLocalFileNode\n      //\n      // if we haven't reqeued this before,\n      // add it to the end of the queue to\n      // try once more later\n      if (timesRetried < 5) {\n        if (timesRetried > 1) {\n          helpers.reporter.info(\n            `pushing ${retryKey} to the end of the request queue.`\n          )\n\n          helpers.reporter.info(\n            `Previously retried ${timesRetried} times already.`\n          )\n        }\n\n        previouslyRetriedPromises[retryKey] = timesRetried + 1\n\n        pushPromiseOntoRetryQueue({\n          node,\n          helpers,\n          createContentDigest,\n          actions,\n          queue,\n          retryKey,\n          retryPromise,\n        })\n      } else {\n        helpers.reporter.info(\n          `\\n\\nalready re-queued ${retryKey} 5 times :( sorry.\\nTry lowering process.env.GATSBY_CONCURRENT_DOWNLOAD.\\nIt's currently set to ${process.env.GATSBY_CONCURRENT_DOWNLOAD}\\n\\n`\n        )\n        // we already tried this earlier in the queue\n        // no choice but to give up :(\n        helpers.reporter.panic(error)\n      }\n    }\n  })\n}\n\nexport const addImageCDNFieldsToNode = (node, pluginOptions) => {\n  if (!node?.__typename?.includes(`MediaItem`)) {\n    return node\n  }\n\n  const placeholderUrl = getPlaceholderUrlFromMediaItemNode(node, pluginOptions)\n\n  const url = node.sourceUrl || node.mediaItemUrl\n\n  const filename =\n    node?.mediaDetails?.file?.split(`/`)?.pop() ||\n    path.basename(urlUtil.parse(url).pathname)\n\n  return {\n    ...node,\n    url,\n    contentType: node.contentType,\n    mimeType: node.mimeType,\n    filename,\n    filesize: node?.mediaDetails?.fileSize,\n    width: node?.mediaDetails?.width,\n    height: node?.mediaDetails?.height,\n    placeholderUrl:\n      placeholderUrl ?? node?.mediaDetails?.sizes?.[0]?.sourceUrl ?? url,\n  }\n}\n\nexport const createMediaItemNode = async ({\n  node,\n  helpers,\n  createContentDigest,\n  actions,\n  parentName,\n  allMediaItemNodes = [],\n}) => {\n  const existingNode = await helpers.getNode(node.id)\n\n  if (existingNode) {\n    return existingNode\n  }\n\n  store.dispatch.logger.incrementActivityTimer({\n    typeName: `MediaItem`,\n    by: 1,\n  })\n\n  allMediaItemNodes.push(node)\n\n  let resolveFutureNode\n  const futureNode = new Promise(resolve => {\n    resolveFutureNode = resolve\n  })\n\n  pushPromiseOntoRetryQueue({\n    node,\n    helpers,\n    createContentDigest,\n    actions,\n    queue: mediaFileFetchQueue,\n    retryKey: node.mediaItemUrl,\n    retryPromise: async ({\n      createContentDigest,\n      actions,\n      helpers,\n      node,\n      retryKey,\n      timesRetried,\n    }) => {\n      const fetchTimeout = setTimeout(() => {\n        helpers.reporter.log(\n          formatLogMessage(\n            `Fetching ${\n              node.mediaItemUrl\n            } is taking a long time time (longer than 15 seconds). This file is ${filesize(\n              node.fileSize\n            )}`\n          )\n        )\n      }, 15000)\n\n      const pluginOptions = getPluginOptions()\n\n      const { createFileNodes } = pluginOptions.type.MediaItem\n\n      const localFileNode = createFileNodes\n        ? await createLocalFileNode({\n            mediaItemNode: node,\n            helpers,\n            parentName,\n          })\n        : null\n\n      clearTimeout(fetchTimeout)\n\n      if (timesRetried > 1) {\n        helpers.reporter.info(\n          `Successfully fetched ${retryKey} after retrying ${timesRetried} times`\n        )\n      }\n\n      node = addImageCDNFieldsToNode(\n        {\n          ...node,\n          parent: null,\n          internal: {\n            contentDigest: createContentDigest(node),\n            type: buildTypeName(`MediaItem`),\n          },\n        },\n        pluginOptions\n      )\n\n      if (localFileNode?.id) {\n        node.localFile = {\n          id: localFileNode?.id,\n        }\n      }\n\n      const normalizedNode = normalizeNode({ node, nodeTypeName: `MediaItem` })\n\n      await actions.createNode(normalizedNode)\n      return resolveFutureNode(node)\n    },\n  })\n\n  return futureNode\n}\n\nconst urlToFileExtension = url => {\n  const { pathname } = urlUtil.parse(url)\n\n  const fileExtension = path.extname(pathname)\n\n  return fileExtension\n}\n\nexport const stripImageSizesFromUrl = url => {\n  const fileExtension = urlToFileExtension(url)\n\n  const imageSizesPattern = new RegExp(\n    // eslint-disable-next-line no-useless-escape\n    `(?:[-_]([0-9]+)x([0-9]+))${fileExtension ? `\\.${fileExtension}` : ``}`\n  )\n\n  let urlWithoutSizes = url.replace(imageSizesPattern, ``)\n\n  if (urlWithoutSizes !== url && fileExtension) {\n    urlWithoutSizes = `${urlWithoutSizes}${fileExtension}`\n  }\n\n  return urlWithoutSizes\n}\n\nconst createScaledImageUrl = url => {\n  const fileExtension = urlToFileExtension(url)\n\n  const isAlreadyScaled = url.includes(`-scaled${fileExtension || ``}`)\n\n  if (isAlreadyScaled) {\n    return url\n  }\n\n  let scaledUrl\n\n  if (fileExtension) {\n    scaledUrl = url.replace(fileExtension, `-scaled${fileExtension}`)\n  } else {\n    scaledUrl = `${url}-scaled`\n  }\n\n  return scaledUrl\n}\n\n// takes an array of image urls and returns them + additional urls if\n// any of the provided image urls contain what appears to be an image resize signifier\n// for ex https://site.com/wp-content/uploads/01/your-image-500x1000.jpeg\n// that will add https://site.com/wp-content/uploads/01/your-image.jpeg to the array\n// this is necessary because we can only get image nodes by the full source url.\n// simply removing image resize signifiers from all urls would be a mistake since\n// someone could upload a full-size image that contains that pattern - so the full\n// size url would have 500x1000 in it, and removing it would make it so we can never\n// fetch this image node.\nconst processAndDedupeImageUrls = urls =>\n  uniq(\n    urls.reduce((accumulator, url) => {\n      const scaledUrl = createScaledImageUrl(url)\n      accumulator.push(scaledUrl)\n\n      const strippedUrl = stripImageSizesFromUrl(url)\n\n      // if the url had no image sizes, don't do anything special\n      if (strippedUrl === url) {\n        return accumulator\n      }\n\n      accumulator.push(strippedUrl)\n\n      const scaledStrippedUrl = createScaledImageUrl(strippedUrl)\n      accumulator.push(scaledStrippedUrl)\n\n      return accumulator\n    }, urls)\n  )\n\nexport const fetchMediaItemsBySourceUrl = async ({\n  mediaItemUrls,\n  selectionSet,\n  builtFragments,\n  createContentDigest,\n  actions,\n  helpers,\n  allMediaItemNodes = [],\n}) => {\n  const processedMediaItemUrls = processAndDedupeImageUrls(mediaItemUrls)\n\n  const { cachedMediaItemNodeIds, uncachedMediaItemUrls } =\n    processedMediaItemUrls.reduce(\n      (accumulator, url) => {\n        const { id } = getFileNodeMetaBySourceUrl(url) || {}\n\n        // if we have a cached image and we haven't already recorded this cached image\n        if (id && !accumulator.cachedMediaItemNodeIds.includes(id)) {\n          // save it\n          accumulator.cachedMediaItemNodeIds.push(id)\n        } else if (!id) {\n          // otherwise we need to fetch this media item by url\n          accumulator.uncachedMediaItemUrls.push(url)\n        }\n\n        return accumulator\n      },\n      { cachedMediaItemNodeIds: [], uncachedMediaItemUrls: [] }\n    )\n\n  // take our previously cached id's and get nodes for them\n  const previouslyCachedMediaItemNodes = await Promise.all(\n    cachedMediaItemNodeIds.map(async nodeId => {\n      const node = await helpers.getNode(nodeId)\n\n      const parentNode =\n        node?.internal?.type === `File` && node?.parent\n          ? helpers.getNode(node.parent)\n          : null\n\n      return parentNode || node\n    })\n  )\n\n  const {\n    schema: { perPage },\n  } = getPluginOptions()\n\n  // chunk up all our uncached media items\n  const mediaItemUrlsPages = chunk(uncachedMediaItemUrls, perPage)\n\n  // since we're using an async queue, we need a way to know when it's finished\n  // we pass this resolve function into the queue function so it can let us\n  // know when it's finished\n\n  // we have no media items to fetch,\n  // so we need to resolve this promise\n  // otherwise it will never resolve below.\n  if (!mediaItemUrlsPages.length) {\n    return Promise.resolve(previouslyCachedMediaItemNodes)\n  }\n\n  const allPromises = []\n  // for all the images we don't have cached, loop through and get them all\n  for (const [index, sourceUrls] of mediaItemUrlsPages.entries()) {\n    const curPromise = new Promise(resolve => {\n      pushPromiseOntoRetryQueue({\n        helpers,\n        createContentDigest,\n        actions,\n        queue: mediaNodeFetchQueue,\n        retryKey: `Media Item by sourceUrl query #${index}, digest: ${createContentDigest(\n          sourceUrls.join()\n        )}`,\n        retryPromise: async () => {\n          const query = /* GraphQL */ `\n            query MEDIA_ITEMS {\n              ${sourceUrls\n                .map(\n                  (sourceUrl, index) => /* GraphQL */ `\n                mediaItem__index_${index}: mediaItem(id: \"${sourceUrl}\", idType: SOURCE_URL) {\n                  ...MediaItemFragment\n                }\n              `\n                )\n                .join(` `)}\n            }\n\n            fragment MediaItemFragment on MediaItem {\n              ${selectionSet}\n            }\n\n            ${builtFragments || ``}\n          `\n\n          const { data } = await fetchGraphql({\n            query,\n            variables: {\n              first: perPage,\n              after: null,\n            },\n            errorContext: `Error occurred while fetching \"MediaItem\" nodes in inline html.`,\n          })\n\n          // since we're getting each media item on it's single node root field\n          // we just needs the values of each property in the response\n          // anything that returns null is because we tried to get the source url\n          // plus the source url minus resize patterns. So there will be nulls\n          // since only the full source url will return data\n          const thisPagesNodes = Object.values(data).filter(Boolean)\n\n          // take the WPGraphQL nodes we received and create Gatsby nodes out of them\n          const nodes = await Promise.all(\n            thisPagesNodes.map(node =>\n              createMediaItemNode({\n                node,\n                helpers,\n                createContentDigest,\n                actions,\n                allMediaItemNodes,\n                parentName: `Fetching referenced MediaItem nodes by sourceUrl`,\n              })\n            )\n          )\n\n          nodes.forEach((node, index) => {\n            if (!node || !node?.localFile?.id) {\n              return\n            }\n\n            // this is how we're caching nodes we've previously fetched.\n            store.dispatch.imageNodes.pushNodeMeta({\n              id: node.localFile.id,\n              sourceUrl: sourceUrls[index],\n              modifiedGmt: node.modifiedGmt,\n            })\n          })\n\n          resolve(nodes)\n        },\n      })\n    })\n    allPromises.push(curPromise)\n  }\n\n  await mediaNodeFetchQueue.onIdle()\n  await mediaFileFetchQueue.onIdle()\n\n  const allResults = await Promise.all(allPromises)\n  return [...previouslyCachedMediaItemNodes, ...allResults.flat()]\n}\n\nexport const fetchMediaItemsById = async ({\n  mediaItemIds,\n  settings,\n  url,\n  selectionSet,\n  builtFragments,\n  createContentDigest,\n  actions,\n  helpers,\n  typeInfo,\n}) => {\n  const newMediaItemIds = mediaItemIds.filter(id => !helpers.getNode(id))\n\n  const {\n    schema: { perPage },\n  } = getPluginOptions()\n\n  const chunkedIds = chunk(newMediaItemIds, perPage)\n\n  if (!newMediaItemIds.length) {\n    return Promise.resolve([])\n  }\n\n  const allMediaItemNodes = []\n  const allPromises = []\n\n  for (const [index, relayIds] of chunkedIds.entries()) {\n    const curPromise = new Promise(resolve => {\n      pushPromiseOntoRetryQueue({\n        helpers,\n        createContentDigest,\n        actions,\n        queue: mediaNodeFetchQueue,\n        retryKey: `Media Item query #${index}, digest: ${createContentDigest(\n          relayIds.join()\n        )}`,\n        retryPromise: async () => {\n          // relay id's are base64 encoded from strings like attachment:89381\n          // where 89381 is the id we want for our query\n          // so we split on the : and get the last item in the array, which is the id\n          // once we can get a list of media items by relay id's, we can remove atob\n          const ids = relayIds.map(id => atob(id).split(`:`).slice(-1)[0])\n\n          const query = `\n          query MEDIA_ITEMS($in: [ID]) {\n            mediaItems(first: ${perPage}, where:{ in: $in }) {\n              nodes {\n                ${selectionSet}\n              }\n            }\n          }\n\n          ${builtFragments || ``}\n        `\n          const allNodesOfContentType = await paginatedWpNodeFetch({\n            first: perPage,\n            contentTypePlural: typeInfo.pluralName,\n            nodeTypeName: typeInfo.nodesTypeName,\n            query,\n            url,\n            helpers,\n            settings,\n            in: ids,\n            // this allows us to retry-on-end-of-queue\n            throwFetchErrors: true,\n          })\n\n          const nodes = await Promise.all(\n            allNodesOfContentType.map(node =>\n              createMediaItemNode({\n                node,\n                helpers,\n                createContentDigest,\n                actions,\n                allMediaItemNodes,\n                referencedMediaItemNodeIds: mediaItemIds,\n                parentName: `Fetching referenced MediaItem nodes by id`,\n              })\n            )\n          )\n\n          resolve(nodes)\n        },\n      })\n    })\n    allPromises.push(curPromise)\n  }\n\n  await mediaNodeFetchQueue.onIdle()\n  await mediaFileFetchQueue.onIdle()\n\n  const allResults = await Promise.all(allPromises)\n  return allResults.flat()\n}\n\nexport default async function fetchReferencedMediaItemsAndCreateNodes({\n  referencedMediaItemNodeIds,\n  mediaItemUrls,\n}) {\n  const state = store.getState()\n  const queryInfo = state.remoteSchema.nodeQueries.mediaItems\n  const { helpers, pluginOptions } = state.gatsbyApi\n\n  // don't fetch media items if they are excluded via pluginOptions\n  if (pluginOptions.type?.MediaItem?.exclude) {\n    return []\n  }\n\n  const { createContentDigest, actions } = helpers\n  const { url } = pluginOptions\n  const { typeInfo, settings, selectionSet, builtFragments } = queryInfo\n\n  let createdNodes = []\n\n  if (referencedMediaItemNodeIds?.length) {\n    const nodesSourcedById = await fetchMediaItemsById({\n      mediaItemIds: referencedMediaItemNodeIds,\n      settings,\n      url,\n      selectionSet,\n      builtFragments,\n      createContentDigest,\n      actions,\n      helpers,\n      typeInfo,\n    })\n\n    createdNodes = nodesSourcedById\n  }\n\n  if (mediaItemUrls?.length) {\n    const nodesSourcedByUrl = await fetchMediaItemsBySourceUrl({\n      mediaItemUrls,\n      settings,\n      url,\n      selectionSet,\n      builtFragments,\n      createContentDigest,\n      actions,\n      helpers,\n      typeInfo,\n    })\n\n    createdNodes = [...createdNodes, ...nodesSourcedByUrl]\n  }\n\n  return createdNodes.filter(Boolean)\n}\n"],"mappings":"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"}