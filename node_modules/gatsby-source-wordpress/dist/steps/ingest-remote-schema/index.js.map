{"version":3,"file":"index.js","names":["ingestRemoteSchema","helpers","pluginOptions","process","env","NODE_ENV","schemaTimeKey","lastIngestRemoteSchemaTime","cache","get","ingestedSchemaInLastTenSeconds","Date","now","set","activity","reporter","activityTimer","formatLogMessage","start","runSteps","checkIfSchemaHasChanged","introspectAndStoreRemoteSchema","identifyAndStoreIngestableFieldsAndTypes","buildNodeQueries","buildNonNodeQueries","cacheFetchedTypes","writeQueriesToDisk","e","panic","end"],"sources":["../../../src/steps/ingest-remote-schema/index.js"],"sourcesContent":["import { runSteps } from \"~/utils/run-steps\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\n\nimport { checkIfSchemaHasChanged } from \"./diff-schemas\"\nimport { introspectAndStoreRemoteSchema } from \"./introspect-remote-schema\"\nimport { identifyAndStoreIngestableFieldsAndTypes } from \"./identify-and-store-ingestable-types\"\nimport { buildNonNodeQueries } from \"./build-and-store-ingestible-root-field-non-node-queries\"\nimport { buildNodeQueries } from \"./build-queries-from-introspection/build-node-queries\"\nimport { cacheFetchedTypes } from \"./cache-fetched-types\"\nimport { writeQueriesToDisk } from \"./write-queries-to-disk\"\n\n/**\n * This fn is called during schema customization.\n * It pulls in the remote WPGraphQL schema, caches it,\n * then builds queries and stores a transformed object\n * later used in schema customization.\n *\n * This fn must run in all PQR workers.\n */\nconst ingestRemoteSchema = async (helpers, pluginOptions) => {\n  if (process.env.NODE_ENV === `development`) {\n    // running this code block in production is problematic for PQR\n    // since this fn will run once for each worker and we need the result in each\n    // we'll return early in most workers when it checks the cache here\n    // Since PQR doesn't run in development and this code block was only meant for dev\n    // it should be ok to wrap it in this if statement\n    const schemaTimeKey = `lastIngestRemoteSchemaTime`\n    const lastIngestRemoteSchemaTime = await helpers.cache.get(schemaTimeKey)\n\n    const ingestedSchemaInLastTenSeconds =\n      Date.now() - lastIngestRemoteSchemaTime <= 10000\n\n    if (lastIngestRemoteSchemaTime && ingestedSchemaInLastTenSeconds) {\n      // only allow this to run once every ten seconds\n      // this prevents thrashing when many webhooks are received at once\n      return\n    }\n\n    await helpers.cache.set(schemaTimeKey, Date.now())\n  }\n\n  const activity = helpers.reporter.activityTimer(\n    formatLogMessage(`ingest WPGraphQL schema`)\n  )\n\n  activity.start()\n\n  try {\n    await runSteps(\n      [\n        checkIfSchemaHasChanged,\n        introspectAndStoreRemoteSchema,\n        identifyAndStoreIngestableFieldsAndTypes,\n        [buildNodeQueries, buildNonNodeQueries],\n        [cacheFetchedTypes, writeQueriesToDisk],\n      ],\n      helpers,\n      pluginOptions\n    )\n  } catch (e) {\n    activity.panic(e)\n  } finally {\n    activity.end()\n  }\n}\n\nexport { ingestRemoteSchema }\n"],"mappings":";;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,kBAAkB,GAAG,OAAOC,OAAO,EAAEC,aAAa,KAAK;EAC3D,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAM,aAAY,EAAE;IAC1C;IACA;IACA;IACA;IACA;IACA,MAAMC,aAAa,GAAI,4BAA2B;IAClD,MAAMC,0BAA0B,GAAG,MAAMN,OAAO,CAACO,KAAK,CAACC,GAAG,CAACH,aAAa,CAAC;IAEzE,MAAMI,8BAA8B,GAClCC,IAAI,CAACC,GAAG,EAAE,GAAGL,0BAA0B,IAAI,KAAK;IAElD,IAAIA,0BAA0B,IAAIG,8BAA8B,EAAE;MAChE;MACA;MACA;IACF;IAEA,MAAMT,OAAO,CAACO,KAAK,CAACK,GAAG,CAACP,aAAa,EAAEK,IAAI,CAACC,GAAG,EAAE,CAAC;EACpD;EAEA,MAAME,QAAQ,GAAGb,OAAO,CAACc,QAAQ,CAACC,aAAa,CAC7C,IAAAC,kCAAgB,EAAE,yBAAwB,CAAC,CAC5C;EAEDH,QAAQ,CAACI,KAAK,EAAE;EAEhB,IAAI;IACF,MAAM,IAAAC,kBAAQ,EACZ,CACEC,oCAAuB,EACvBC,sDAA8B,EAC9BC,yEAAwC,EACxC,CAACC,kCAAgB,EAAEC,mEAAmB,CAAC,EACvC,CAACC,oCAAiB,EAAEC,sCAAkB,CAAC,CACxC,EACDzB,OAAO,EACPC,aAAa,CACd;EACH,CAAC,CAAC,OAAOyB,CAAC,EAAE;IACVb,QAAQ,CAACc,KAAK,CAACD,CAAC,CAAC;EACnB,CAAC,SAAS;IACRb,QAAQ,CAACe,GAAG,EAAE;EAChB;AACF,CAAC;AAAA"}