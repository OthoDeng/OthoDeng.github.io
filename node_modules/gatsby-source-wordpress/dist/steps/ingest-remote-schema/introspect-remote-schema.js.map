{"version":3,"file":"introspect-remote-schema.js","names":["getCachedRemoteIntrospectionDataCacheKey","state","store","getState","pluginOptions","gatsbyApi","INTROSPECTION_CACHE_KEY","url","getCachedRemoteIntrospectionData","introspectionData","getPersistentCache","key","remoteSchemaSupportsFieldNameOnTypeName","fieldName","typeName","type","__schema","types","find","name","fieldExists","fields","introspectAndStoreRemoteSchema","schemaWasChanged","remoteSchema","printSchemaDiff","debug","graphql","printIntrospectionDiff","preview","staleIntrospectionData","data","fetchGraphql","query","introspectionQuery","setPersistentCache","value","console","log","forEach","staleTypeJSON","JSON","stringify","newType","newTypeJSON","typeDiff","diff","diffJson","length","part","added","removed","chalk","green","bold","trim","split","map","line","index","join","typeMap","Map","dispatch","setState"],"sources":["../../../src/steps/ingest-remote-schema/introspect-remote-schema.js"],"sourcesContent":["import chalk from \"chalk\"\nimport * as diff from \"diff\"\nimport { uniqBy } from \"lodash\"\nimport store from \"~/store\"\nimport { setPersistentCache, getPersistentCache } from \"~/utils/cache\"\nimport fetchGraphql from \"~/utils/fetch-graphql\"\nimport { introspectionQuery } from \"~/utils/graphql-queries\"\n\n/**\n * Builds the cache key for retrieving cached introspection data\n */\nconst getCachedRemoteIntrospectionDataCacheKey = () => {\n  const state = store.getState()\n  const { pluginOptions } = state.gatsbyApi\n\n  const INTROSPECTION_CACHE_KEY = `${pluginOptions.url}--introspection-data`\n\n  return INTROSPECTION_CACHE_KEY\n}\n\n/**\n * Returns cached introspection data for the remote WPGraphQL schema\n */\nconst getCachedRemoteIntrospectionData = async () => {\n  const INTROSPECTION_CACHE_KEY = getCachedRemoteIntrospectionDataCacheKey()\n  const introspectionData = await getPersistentCache({\n    key: INTROSPECTION_CACHE_KEY,\n  })\n\n  return introspectionData\n}\n\n/**\n * Checks if WPGraphQL is exposing a field on a type\n * for example `GatsbyPreviewData.manifestIds`\n * This allows us to make otherwise breaking changes in a backwards compatible way\n */\nexport const remoteSchemaSupportsFieldNameOnTypeName = async ({\n  fieldName,\n  typeName,\n}) => {\n  const introspectionData = await getCachedRemoteIntrospectionData()\n\n  const type = introspectionData.__schema.types.find(\n    ({ name }) => name === typeName\n  )\n\n  const fieldExists = !!type?.fields?.find(({ name }) => name === fieldName)\n\n  return fieldExists\n}\n\nconst introspectAndStoreRemoteSchema = async () => {\n  const state = store.getState()\n  const { pluginOptions } = state.gatsbyApi\n  const { schemaWasChanged } = state.remoteSchema\n\n  let introspectionData = await getCachedRemoteIntrospectionData()\n\n  const printSchemaDiff =\n    pluginOptions?.debug?.graphql?.printIntrospectionDiff ||\n    pluginOptions?.debug?.preview\n\n  let staleIntrospectionData\n\n  if (!introspectionData || schemaWasChanged) {\n    const { data } = await fetchGraphql({\n      query: introspectionQuery,\n    })\n\n    if (introspectionData) {\n      staleIntrospectionData = introspectionData\n    }\n\n    introspectionData = data\n\n    const INTROSPECTION_CACHE_KEY = getCachedRemoteIntrospectionDataCacheKey()\n\n    // cache introspection response\n    await setPersistentCache({\n      key: INTROSPECTION_CACHE_KEY,\n      value: introspectionData,\n    })\n  }\n\n  if (staleIntrospectionData && printSchemaDiff) {\n    console.log(`\\nData changed in WordPress schema:`)\n    staleIntrospectionData.__schema.types.forEach(type => {\n      const staleTypeJSON = JSON.stringify(type, null, 2)\n\n      const newType = introspectionData.__schema.types.find(\n        ({ name }) => name === type.name\n      )\n      const newTypeJSON = JSON.stringify(newType, null, 2)\n\n      if (staleTypeJSON === newTypeJSON) {\n        return\n      }\n\n      const typeDiff =\n        type && newType ? uniqBy(diff.diffJson(type, newType), `value`) : null\n\n      if (typeDiff?.length) {\n        console.log(`\\nFound changes to the ${type.name} type\\n`)\n        typeDiff.forEach(part => {\n          if (part.added || part.removed) {\n            console.log(\n              chalk.green(\n                chalk.bold(`${part.added ? `Added` : `Removed`}:\\n`) +\n                  part.value\n                    .trim()\n                    .split(`\\n`)\n                    .map(\n                      (line, index) =>\n                        `${part.added ? `+` : `-`}${\n                          index === 0 ? `\\t` : ` `\n                        }${line}`\n                    )\n                    .join(`\\n`)\n              )\n            )\n          }\n        })\n        console.log(`\\n`)\n      }\n    })\n  }\n\n  const typeMap = new Map(\n    introspectionData.__schema.types.map(type => [type.name, type])\n  )\n\n  store.dispatch.remoteSchema.setState({ introspectionData, typeMap })\n}\n\nexport { introspectAndStoreRemoteSchema }\n"],"mappings":"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"}