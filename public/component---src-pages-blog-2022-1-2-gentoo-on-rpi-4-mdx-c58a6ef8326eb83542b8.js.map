{"version":3,"file":"component---src-pages-blog-2022-1-2-gentoo-on-rpi-4-mdx-c58a6ef8326eb83542b8.js","mappings":"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","sources":["webpack://ottoqwq.github.io/./src/pages/blog/2022-1-2-Gentoo-on-rpi4.mdx","webpack://ottoqwq.github.io/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nconst MDXLayout = function Layout({children}) {\n  const _components = Object.assign({\n    main: \"main\"\n  }, _provideComponents());\n  return React.createElement(_components.main, {\n    align: \"left\",\n    style: {\n      color: '#EF9A9A'\n    }\n  }, children);\n};\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    a: \"a\",\n    strong: \"strong\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Gentoo-on-rpi4\"), \"\\n\", React.createElement(_components.h1, null, \"Gentoo-on-rpi4\"), \"\\n\", React.createElement(_components.h2, null, \"基础安装\"), \"\\n\", React.createElement(_components.h3, null, \"SD卡的准备\"), \"\\n\", React.createElement(_components.p, null, \"首先准备SD card 一张。在SD 卡上至少创建两个分区。\\nSD的/ boot分区应该是FAT32。根（/分区可以是任何首选的 Linux文件系统，但是由于 SD 卡是基于闪存的介质，使用F2FS有很多好处。\\n大致情况可以如下：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"\\tDisk /dev/sdb: 16.6 GB, 16574840832 bytes\\n\\t255 heads, 63 sectors/track, 2015 cylinders, total 32372736 sectors\\n\\tUnits = sectors of 1 * 512 = 512 bytes\\n\\tSector size (logical/physical): 512 bytes / 512 bytes\\n\\tI/O size (minimum/optimal): 512 bytes / 512 bytes\\n\\tDisk identifier: 0x1db42224\\n\\t\\n\\tDevice Boot      Start         End      Blocks   Id  System\\n\\t/dev/sdb1   *        2048      835379      416666    c  W95 FAT32 (LBA)\\n\\t/dev/sdb2          835380    31889024    15526822+  83  Linux\\n\\t/dev/sdb3        31889025    32372735      241855+   5  Extended\\n\\t/dev/sdb5        31889088    32372735      241824   82  Linux swap / Solaris\\n\")), \"\\n\", React.createElement(_components.h3, null, \"发行版的选择\"), \"\\n\", React.createElement(_components.p, null, \"树莓派使用的是ARM架构的linux系统。对于发行版，我们可以选择Debian系下的产品（如Ubuntu的server版本，也可以选择树莓派的官方镜像）\\n而我这次选择的是Gentoo Linux，因为它支持arm架构，同时支持32位，同时Gentoo Linux 支持编译整个系统，把原来官方提供的stage3 tarball里的所有组件替换成自己编译的（包括GCC编译器和所有基本系统组件），这样一来整个系统的所有程序和组件都是针对树莓派CPU架构优化编译的了，争取性能最大化。\"), \"\\n\", React.createElement(_components.h3, null, \"启动分区\"), \"\\n\", React.createElement(_components.p, null, \"正确的/boot分区的最低设置需要以下由 Raspberry Pi 基金会提供的\", React.createElement(_components.a, {\n    href: \"https://github.com/raspberrypi/firmware\"\n  }, \"专有固件文件\"), \"\\n\", React.createElement(_components.code, null, \"bootcode.bin\"), \"\\n\", React.createElement(_components.code, null, \"fixup.dat\"), \"\\n\", React.createElement(_components.code, null, \"start.elf\"), \"\\n\", React.createElement(_components.code, null, \"kernel image(s)\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"DTB (Device Tree Blob) files\")), \"\\n\", React.createElement(_components.p, null, \"要使用config.txt 中的gpu_mem=16设置启动树莓派，需要以下文件：\\nge3-armv7a_hardfp-YYYYMMDD.tar.bz2 -C /mnt/raspberrypiroot/\\nfixup_cd.dat\\nstart_cd.elf\"), \"\\n\", React.createElement(_components.p, null, \"Pi 有两个视频驱动程序。较旧的使用固定的保留 GPU 内存空间。开源 VC4 驱动程序使用内核连续内存分配器。使用vc4驱动时设置gpu_mem=16，避免浪费RAM。\\n我们可以merge一个sys-boot/raspberrypi-firmware来是它运行。\"), \"\\n\", React.createElement(_components.p, null, \"root #emerge --ask sys-boot/raspberrypi-firmware\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"固件文件安装在/boot 中。在出现sys-boot/raspberrypi-firmware包之前，应将 SD 卡的引导分区挂载在/boot上。\"), \"\\n或者我们可以选择安装预编译好的树莓派内核以及模块：\"), \"\\n\", React.createElement(_components.p, null, \"root #emerge --ask sys-kernel/raspberrypi-image\"), \"\\n\", React.createElement(_components.h3, null, \"下载并解压stage3\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"\\twget http://distfiles.gentoo.org/releases/arm/autobuilds/current-stage3-armv7a_hardfp/stage3-armv7a_hardfp-YYYYMMDD.tar.bz2\\n\\t#国内的镜像源可能并未同步该镜像\\n\\ttar xpjf stage3-armv7a_hardfp-YYYYMMDD.tar.bz2 -C /mnt/raspberrypiroot/\\n\")), \"\\n\", React.createElement(_components.h3, null, \"修改make.conf\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"\\tnano -w /mnt/raspberrypiroot/etc/portage/make.conf\\n\\n\\n\\t# Raspberry Pi 2, or Raspberry Pi 3 running in 32 bit mode:\\n\\tCFLAGS=\\\"-O2 -march=armv7-a -mfpu=neon-vfpv4 -mfloat-abi=hard\\\"\\n\\tCXXFLAGS=\\\"${CFLAGS}\\\"\\n\")), \"\\n\", React.createElement(_components.h3, null, \"修改fstab\"), \"\\n\", React.createElement(_components.p, null, \"我们使用lsblk以及blkid命令来查找分区。\\nSD卡一般被识别为/dev/mmcblk0\\nge3-armv7a_hardfp-YYYYMMDD.tar.bz2 -C /mnt/raspberrypiroot/\"), \"\\n\", React.createElement(_components.h3, null, \"生成root密码的hash，并添加至/etc/shadow\"), \"\\n\", React.createElement(_components.p, null, \"root #openssl passwd -1\"), \"\\n\", React.createElement(_components.h3, null, \"（可选）stage4文件\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/raspberrypi/noobs\"\n  }, \"每日NOOBS image会更新\"), \"\\n解压时解压在/os/Gentoo\"), \"\\n\", React.createElement(_components.h3, null, \"Portage树\"), \"\\n\", React.createElement(_components.p, null, \"下载最新的 Portage 树：\"), \"\\n\", React.createElement(_components.p, null, \"root #wget http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2\"), \"\\n\", React.createElement(_components.p, null, \"确保根分区上有足够的空闲 inode 块。Portage 占用大约 181K 的 inode。\"), \"\\n\", React.createElement(_components.p, null, \"root #df -ih | grep -E 'Mounted|mmc'\"), \"\\n\", React.createElement(_components.p, null, \"将 Portage 解压到 SD 卡：\"), \"\\n\", React.createElement(_components.p, null, \"root #tar xjvpf portage-latest.tar.bz2 -C /mnt/raspberrypiroot/usr\"), \"\\n\", React.createElement(_components.h3, null, \"交叉编译\"), \"\\n\", React.createElement(_components.p, null, \"由于树莓派处理器相比现代处理器差了很多，为了加快Gentoo的安装过程，我们可以选择使用另一台机子进行编译作业。\\n使用crossdev：\"), \"\\n\", React.createElement(_components.p, null, \"root #emerge --ask sys-devel/crossdev\"), \"\\n\", React.createElement(_components.p, null, \"对于 64 位模式的 Raspberry ：\"), \"\\n\", React.createElement(_components.p, null, \"root #crossdev -S -t aarch64-unknown-linux-gnu --genv 'USE=\\\"cxx multilib fortran -mudflap nls openmp -sanitize\\\"' #USE变量一定要配置！！！\\nroot #cd /usr/aarch64-unknown-linux-gnu/etc/portage && rm make.profile && ln -s /usr/portage/profiles/default/linux/arm64/13.0/desktop make.profile\"), \"\\n\", React.createElement(_components.p, null, \"在另一主机上：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"gentoo_pc ~ # emerge --ask --verbose sys-devel/crossdev`\\n\")), \"\\n\", React.createElement(_components.p, null, \"修改/etc/portage/repos.conf/crossdev.conf：\"), \"\\n\", React.createElement(_components.p, null, \"[crossdev]\"), \"\\n\", React.createElement(_components.p, null, \"location = /usr/local/portage-crossdev\\npriority = 10\\nmasters = gentoo\\nauto-sync = no\"), \"\\n\", React.createElement(_components.p, null, \"准备USE变量：\"), \"\\n\", React.createElement(_components.p, null, \"gentoo_pc ~ # mkdir -pv /usr/local/portage-crossdev\\ngentoo_pc ~ # crossdev --stable -t aarch64-unknown-linux-gnu -oO /usr/local/portage-crossdev\"), \"\\n\", React.createElement(_components.p, null, \"跑完之后，我们的交叉编译工具链已经配置好了：\\n我们进入到portage：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"gentoo_pc ~ # cd /usr/aarch64-unknown-linux-gnu/etc/portage\\n\\ngentoo_pc portage # rm -f make.profile\\ngentoo_pc portage # ln -s /usr/portage/profiles/default/linux/arm64/17.0/desktop make.profile\\n\")), \"\\n\", React.createElement(_components.p, null, \"检查toolchain：\"), \"\\n\", React.createElement(_components.p, null, \"gentoo_pc ~ # aarch64-unknown-linux-gnu-gcc --version\\ngentoo_pc ~ # aarch64-unknown-linux-gnu-c++ --version\\ngentoo_pc ~ # aarch64-unknown-linux-gnu-g++ --version\"), \"\\n\", React.createElement(_components.p, null, \"如果架构的选择没正确，我们就需要重新选择config，再source新的profile，示例如下：\"), \"\\n\", React.createElement(_components.p, null, \"gentoo_pc ~ # gcc-config -l\\n[1] aarch64-unknown-linux-gnu-5.4.0\"), \"\\n\", React.createElement(_components.p, null, \"[2] x86_64-pc-linux-gnu-4.9.4\\n[3] x86_64-pc-linux-gnu-5.4.0 * #选择了错误的架构\"), \"\\n\", React.createElement(_components.p, null, \"gentoo_pc ~ # gcc-config aarch64-unknown-linux-gnu-5.4.0\\ngentoo_pc ~ # source /etc/profile\"), \"\\n\", React.createElement(_components.h3, null, \"在chroot里编译\"), \"\\n\", React.createElement(_components.p, null, \"可以使用通用的 x86_64 或 i386 PC 来 chroot 到带有 Raspberry Pi 系统的现有 SD 卡。这种方法比在 Raspberry Pi 上编译要快得多。\\n为此，需要静态安装app-emulation/qemu：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"    root #echo app-emulation/qemu static-user qemu_user_targets_aarch64 qemu_user_targets_arm >> /etc/portage/package.use/qemu #写入USE变量\\n    root #emerge qemu\\t\\n    root #quickpkg qemu\\n\")), \"\\n\", React.createElement(_components.p, null, \"在创建带有 \", React.createElement(_components.code, null, \"static-user\"), \" USE 标志的 QEMU 之后，需要将qemu-arm可执行文件复制到 chrooting 系统中：\"), \"\\n\", React.createElement(_components.p, null, \"root #cd /mnt/rpi\\nroot #ROOT=$PWD/ emerge --usepkgonly --oneshot --nodeps qemu\"), \"\\n\", React.createElement(_components.p, null, \"完成后，需要在运行内核中用 ARM 可执行解释器：\"), \"\\n\", React.createElement(_components.p, null, \"root #echo ':arm:M::\\\\x7fELF\\\\x01\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x28\\\\x00:\\\\xff\\\\xff\\\\xff\\\\xff\\\\xff\\\\xff\\\\xff\\\\x00\\\\xff\\\\xff\\\\xff\\\\xff\\\\xff\\\\xff\\\\xff\\\\xff\\\\xfe\\\\xff\\\\xff\\\\xff:/usr/bin/qemu-arm:' > /proc/sys/fs/binfmt_misc/register\\nroot #echo ':aarch64:M::\\\\x7fELF\\\\x02\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\xb7\\\\x00:\\\\xff\\\\xff\\\\xff\\\\xff\\\\xff\\\\xff\\\\xff\\\\x00\\\\xff\\\\xff\\\\xff\\\\xff\\\\xff\\\\xff\\\\xff\\\\xff\\\\xfe\\\\xff\\\\xff\\\\xff:/usr/bin/qemu-aarch64:' > /proc/sys/fs/binfmt_misc/register\"), \"\\n\", React.createElement(_components.h3, null, \"挂载文件系统\"), \"\\n\", React.createElement(_components.p, null, \"root #mount /dev/mmcblk0p1 /mnt/rpi/boot\\nroot #mount -o bind /dev /mnt/rpi/dev\\nroot #mount -o bind /proc /mnt/rpi/proc\\nroot #mount -o bind /sys /mnt/rpi/sys\\nroot #mount -o rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000 devpts /mnt/rpi/dev/pts -t devpts\"), \"\\n\", React.createElement(_components.h3, null, \"复制DNS信息\"), \"\\n\", React.createElement(_components.p, null, \"root #cp /etc/resolv.conf /mnt/rpi/etc/\"), \"\\n\", React.createElement(_components.p, null, \"最后chroot进入树莓派系统：\"), \"\\n\", React.createElement(_components.p, null, \"root #chroot /mnt/rpi\"), \"\\n\", React.createElement(_components.h3, null, \"编译内核\"), \"\\n\", React.createElement(_components.p, null, \"Linux内核是所有发行版的核心。它位于用户程序和系统硬件之间。\"), \"\\n\", React.createElement(_components.p, null, \"root #emerge --ask sys-kernel/raspberrypi-sources\"), \"\\n\", React.createElement(_components.p, null, \"同样，我们可以选择手动配置内核或者使用genkernel来自动配置并编译内核：\\n这里我们选择使用genkernel来自动配置：\\n修改一下配置：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"/etc/genkernel-rpi.conf\\n        \\n# install kernel manually\\nINSTALL=\\\"no\\\"\\n        \\n#  Set arch to arm\\nARCH_OVERRIDE=\\\"arm\\\"\\n        \\n# No need to mount BOOTDIR and make symlink as the kernel is\\n# installed manually\\nMOUNTBOOT=\\\"no\\\"\\nSYMLINK=\\\"no\\\"\\n        \\n# Adjust this as needed for the machine.\\nMAKEOPTS=\\\"-j3\\\"\\n        \\n# For  Raspberry Pi 3 B in 32/64-bit mode\\nUTILS_CROSS_COMPILE=\\\"armv7a-unknown-linux-gnueabihf-\\\"\\nKERNEL_CROSS_COMPILE=\\\"armv7a-unknown-linux-gnueabihf-\\\"\\nKERNEL_CC=\\\"armv7a-unknown-linux-gnueabihf-gcc\\\"\\nKERNEL_AS=\\\"armv7a-unknown-linux-gnueabihf-as\\\"\\nKERNEL_LD=\\\"armv7a-unknown-linux-gnueabihf-ld\\\"\\n        \\n# Change this to the path of raspberrypi linux kernel sources.\\n# It is possible to make this a symlink pointing to the\\n# /usr/src/linux-rpi like it's done with a normal kernel.\\n# For example: ln -s /usr/src/linux-3.6.11-raspberrypi /usr/src/linux-rpi\\nDEFAULT_KERNEL_SOURCE=\\\"/usr/src/linux-rpi\\\"\\n        \\n# Point this variable to the directory where the SD card is mounted.\\n# Note that the location needs to be mounted manually before running genkernel.\\nINSTALL_MOD_PATH=\\\"/mnt/raspberrypiroot\\\"\\n        \\n# Genkernel needs access so /usr/share/genkernel (This folder contains default\\n# environment variables, scripts and source tarballs that enable genkernel to\\n# work).\\nGK_SHARE=\\\"${GK_SHARE:-/usr/share/genkernel}\\\"\\nDISTDIR=\\\"${GK_SHARE}/distfiles\\\"\\n        \\n# Genkernel also needs to have a logfile to write to. Without this present,\\n# you'll see \\\"ambiguous redirect\\\" printed out many times between legitimate\\n# messages.\\nLOGFILE=\\\"/var/log/genkernel.log\\\"\\n\")), \"\\n\", React.createElement(_components.p, null, \"保存配置文件。\\n挂载树莓派SD卡（假设树莓派的根分区设备是/dev/sdd3）：\"), \"\\n\", React.createElement(_components.p, null, \"root #mount /dev/sdd3 /mnt/raspberrypiroot\"), \"\\n\", React.createElement(_components.p, null, \"genkernel配置：\"), \"\\n\", React.createElement(_components.p, null, \"root #ARCH=arm genkernel --config=/etc/genkernel-rpi2.conf --kernel-config=/usr/src/linux-rpi/arch/arm/configs/bcm2709_defconfig kernel\"), \"\\n\", React.createElement(_components.p, null, \"保存配置/usr/local/bin/genkernel-rpi.sh:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"#!/bin/sh\\nARCH=arm genkernel --config=/etc/genkernel-rpi2.conf --kernel-config=/usr/src/linux-rpi/arch/arm/configs/bcm2709_defconfig kernel\\n\\n\\nroot #chmod +x /usr/local/bin/genkernel-rpi.sh\\n\")), \"\\n\", React.createElement(_components.p, null, \"以上步骤是在完善genkernel的一些基本配置，现在我们就可以为我们的树莓派去跑genkernel命令了。\"), \"\\n\", React.createElement(_components.p, null, \"root #genkernel-rpi.sh\"), \"\\n\", React.createElement(_components.h3, null, \"安装kernel image\"), \"\\n\", React.createElement(_components.p, null, \"这个步骤在实操过程中是比较棘手的，对于生成在/mnt/raspberrypiroot/boot/kernel.img可能无法正确引导kernel，这时候我们可能要使用到就一些版本的固件：\"), \"\\n\", React.createElement(_components.p, null, \"root #emerge --ask sys-boot/raspberrypi-mkimage\\nroot #imagetool-uncompressed.py arch/arm/boot/Image /mnt/raspberrypiroot/boot/kernel.img\"), \"\\n\", React.createElement(_components.h3, null, \"安装WiFi 蓝牙固件\"), \"\\n\", React.createElement(_components.p, null, \"root #emerge sys-kernel/linux-firmware\"), \"\\n\", React.createElement(_components.p, null, \"对于树莓派内置的 Wi-Fi 驱动程序brcmfmac会需要二进制固件 blob brcmfmac434*-sdio.bin。因此我们可能要配置一下brcmfmac434*-sdio.txt才能正常运行。\"), \"\\n\", React.createElement(_components.p, null, \"对于蓝牙，我们需要BCM43430A1.hcd 这个文件来支持运行。我们可以在树莓派官网蓝牙固件处找到，最后只需要将其配置到/lib/firmware/brcm处\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"\\troot #mkdir -p /lib/firmware/brcm\\n\\troot #wget -P /lib/firmware/brcm https://raw.githubusercontent.com/RPi-Distro/bluez-firmware/master/broadcom/BCM4345C0.hcd\\n\")), \"\\n\", React.createElement(_components.h3, null, \"VideoCore4\"), \"\\n\", React.createElement(_components.p, null, \"要在 RPi 设备上启用 VideoCore4 GPU 加速，请将以下内容添加到/boot/config.txt：\"), \"\\n\", React.createElement(_components.p, null, \"/boot/config.txt\\ndtoverlay = vc4-kms-v3d,cma-128\"), \"\\n\", React.createElement(_components.p, null, \"最后还要在我们的make.conf添加:\"), \"\\n\", React.createElement(_components.p, null, \"VIDEO_CARDS = \\\"vc4\\\"\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(\"a\", {\n    align: \"center\",\n    color: \"#F2ABBD\",\n    width: \"100%\",\n    textAlign: \"center\",\n    paddingBottom: \"0.5rem\",\n    paddingTop: \"0.5rem\"\n  }, React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"../\"\n  }, \"Go Back\")), React.createElement(\"p\", null, React.createElement(_components.p, null, \"Projects by\", \" \"), React.createElement(\"a\", {\n    href: \"https://github.com/ottoqwq\"\n  }, \" \", React.createElement(\"hi\", null, \"Otto Deng\")), React.createElement(_components.p, null, \". Powered by \", React.createElement(\"a\", {\n    href: \"https://www.gatsbyjs.com/\"\n  }, \"Gatsby\"))), React.createElement(\"p\", null, React.createElement(_components.p, null, \"Content on this site is licensed under\", \" \", \"\\n\", React.createElement(\"a\", {\n    href: \"https://creativecommons.org/licenses/by/4.0/\"\n  }, \"CC BY 4.0\"), \" \", \"\\nunless specified.\"))));\n}\nfunction MDXContent(props = {}) {\n  return React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props));\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["MDXLayout","children","_components","Object","assign","main","_provideComponents","React","align","style","color","_createMdxContent","props","h1","h2","h3","p","pre","code","a","strong","hr","components","className","href","width","textAlign","paddingBottom","paddingTop","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}